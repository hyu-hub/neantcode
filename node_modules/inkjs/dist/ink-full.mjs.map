{"version":3,"file":"ink-full.mjs","sources":["../src/compiler/CompilerOptions.ts","../src/compiler/DebugSourceRange.ts","../src/compiler/Parser/ErrorType.ts","../src/compiler/Parser/ParsedHierarchy/Argument.ts","../src/engine/TypeAssertion.ts","../src/compiler/Parser/ParsedHierarchy/Object.ts","../src/compiler/Parser/ParsedHierarchy/AuthorWarning.ts","../src/engine/Path.ts","../src/engine/Debug.ts","../src/engine/Value.ts","../src/engine/PushPop.ts","../src/engine/NullException.ts","../src/engine/Object.ts","../src/engine/StringBuilder.ts","../src/engine/InkList.ts","../src/engine/StoryException.ts","../src/engine/TryGetResult.ts","../src/engine/SearchResult.ts","../src/engine/Container.ts","../src/engine/ControlCommand.ts","../src/compiler/Parser/ParsedHierarchy/Expression/Expression.ts","../src/engine/Void.ts","../src/engine/NativeFunctionCall.ts","../src/compiler/Parser/ParsedHierarchy/Expression/NumberExpression.ts","../src/compiler/Parser/ParsedHierarchy/Expression/UnaryExpression.ts","../src/compiler/Parser/ParsedHierarchy/Expression/BinaryExpression.ts","../src/compiler/Parser/CharacterSet.ts","../src/compiler/Parser/CharacterRange.ts","../src/engine/ChoicePoint.ts","../src/engine/Pointer.ts","../src/engine/Divert.ts","../src/compiler/Parser/ParsedHierarchy/SymbolType.ts","../src/engine/VariableAssignment.ts","../src/compiler/Parser/ParsedHierarchy/Choice.ts","../src/compiler/Parser/StringParser/StringParserElement.ts","../src/compiler/Parser/StringParser/StringParserState.ts","../src/compiler/Parser/StringParser/StringParser.ts","../src/compiler/Parser/CommentEliminator.ts","../src/compiler/Parser/ParsedHierarchy/Conditional/Conditional.ts","../src/compiler/Parser/ParsedHierarchy/Text.ts","../src/compiler/Parser/ParsedHierarchy/Declaration/ConstantDeclaration.ts","../src/compiler/Parser/ParsedHierarchy/Flow/FlowLevel.ts","../src/compiler/Parser/ParsedHierarchy/Gather/Gather.ts","../src/compiler/Parser/ParsedHierarchy/Path.ts","../src/compiler/Parser/ParsedHierarchy/ReturnType.ts","../src/compiler/Parser/ParsedHierarchy/Flow/ClosestFlowBase.ts","../src/compiler/Parser/ParsedHierarchy/Identifier.ts","../src/compiler/Parser/ParsedHierarchy/Flow/FlowBase.ts","../src/compiler/Parser/ParsedHierarchy/ContentList.ts","../src/engine/VariableReference.ts","../src/compiler/Parser/ParsedHierarchy/Variable/VariableReference.ts","../src/compiler/Parser/ParsedHierarchy/FunctionCall.ts","../src/compiler/Parser/ParsedHierarchy/Expression/MultipleConditionExpression.ts","../src/compiler/Parser/ParsedHierarchy/Divert/DivertTarget.ts","../src/compiler/Parser/ParsedHierarchy/Divert/Divert.ts","../src/compiler/Parser/ParsedHierarchy/Gather/GatherPointToResolve.ts","../src/compiler/Parser/ParsedHierarchy/Sequence/SequenceDivertToResolve.ts","../src/compiler/Parser/ParsedHierarchy/Sequence/SequenceType.ts","../src/compiler/Parser/ParsedHierarchy/Sequence/Sequence.ts","../src/compiler/Parser/ParsedHierarchy/TunnelOnwards.ts","../src/engine/ListDefinition.ts","../src/compiler/Parser/ParsedHierarchy/List/ListDefinition.ts","../src/compiler/Parser/ParsedHierarchy/Variable/VariableAssignment.ts","../src/compiler/Parser/ParsedHierarchy/Weave.ts","../src/compiler/Parser/ParsedHierarchy/Conditional/ConditionalSingleBranch.ts","../src/compiler/Parser/CustomFlags.ts","../src/engine/DebugMetadata.ts","../src/compiler/Parser/ParsedHierarchy/Declaration/ExternalDeclaration.ts","../src/compiler/Parser/FlowDecl.ts","../src/compiler/Parser/ParsedHierarchy/Wrap.ts","../src/compiler/Parser/ParsedHierarchy/Glue.ts","../src/engine/Glue.ts","../src/compiler/Parser/ParsedHierarchy/Expression/IncDecExpression.ts","../src/compiler/Parser/ParsedHierarchy/IncludedFile.ts","../src/compiler/Parser/InfixOperator.ts","../src/compiler/Parser/ParsedHierarchy/Knot.ts","../src/compiler/Parser/ParsedHierarchy/List/List.ts","../src/compiler/Parser/ParsedHierarchy/List/ListElementDefinition.ts","../src/compiler/Parser/StatementLevel.ts","../src/compiler/Parser/ParsedHierarchy/Stitch.ts","../src/engine/Tag.ts","../src/engine/Choice.ts","../src/engine/ListDefinitionsOrigin.ts","../src/engine/JsonSerialisation.ts","../src/engine/CallStack.ts","../src/engine/VariablesState.ts","../src/engine/PRNG.ts","../src/engine/StatePatch.ts","../src/engine/SimpleJson.ts","../src/engine/Flow.ts","../src/engine/StoryState.ts","../src/engine/StopWatch.ts","../src/engine/Error.ts","../src/engine/Story.ts","../src/compiler/Parser/ParsedHierarchy/Story.ts","../src/compiler/Parser/ParsedHierarchy/Expression/StringExpression.ts","../src/compiler/Parser/ParsedHierarchy/Tag.ts","../src/compiler/FileHandler/DefaultFileHandler.ts","../src/compiler/Parser/InkParser.ts","../src/compiler/FileHandler/JsonFileHandler.ts","../src/compiler/Compiler.ts","../src/compiler/Stats.ts"],"sourcesContent":["import { ErrorHandler } from \"../engine/Error\";\nimport { IFileHandler } from \"./IFileHandler\";\n\nexport class CompilerOptions {\n  constructor(\n    public readonly sourceFilename: string | null = null,\n    public readonly pluginNames: string[] = [],\n    public readonly countAllVisits: boolean = false,\n    public readonly errorHandler: ErrorHandler | null = null,\n    public readonly fileHandler: IFileHandler | null = null\n  ) {}\n}\n","import { DebugMetadata } from \"../engine/DebugMetadata\";\n\nexport class DebugSourceRange {\n  constructor(\n    public readonly length: number,\n    public readonly debugMetadata: DebugMetadata | null,\n    public text: string\n  ) {}\n}\n","// TODO: Unifify with Engine.\n\nexport enum ErrorType {\n  Author,\n  Warning,\n  Error,\n}\n","import { Identifier } from \"./Identifier\";\n\nexport class Argument {\n  constructor(\n    public identifier: Identifier | null = null,\n    public isByReference: boolean | null = null,\n    public isDivertTarget: boolean | null = null\n  ) {}\n\n  get typeName(): string {\n    return \"Argument\";\n  }\n}\n","import { INamedContent } from \"./INamedContent\";\n\nexport function asOrNull<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | null {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    return null;\n  }\n}\n\nexport function asOrThrows<T>(\n  obj: any,\n  type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n): T | never {\n  if (obj instanceof type) {\n    return unsafeTypeAssertion(obj, type);\n  } else {\n    throw new Error(`${obj} is not of type ${type}`);\n  }\n}\n\nexport function asNumberOrThrows(obj: any) {\n  if (typeof obj === \"number\") {\n    return obj as number;\n  } else {\n    throw new Error(`${obj} is not a number`);\n  }\n}\n\nexport function asBooleanOrThrows(obj: any) {\n  if (typeof obj === \"boolean\") {\n    return obj as boolean;\n  } else {\n    throw new Error(`${obj} is not a boolean`);\n  }\n}\n\n// So here, in the reference implementation, contentObj is casted to an INamedContent\n// but here we use js-style duck typing: if it implements the same props as the interface,\n// we treat it as valid.\nexport function asINamedContentOrNull(obj: any): INamedContent | null {\n  if (obj.hasValidName && obj.name) {\n    return obj as INamedContent;\n  }\n\n  return null;\n}\n\nexport function nullIfUndefined<T>(obj: T | undefined): T | null {\n  if (typeof obj === \"undefined\") {\n    return null;\n  }\n\n  return obj;\n}\n\nexport function isEquatable(type: any) {\n  return typeof type === \"object\" && typeof type.Equals === \"function\";\n}\n\nfunction unsafeTypeAssertion<T>(\n  obj: any,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  type: (new () => T) | (Function & { prototype: T })\n) {\n  return obj as T;\n}\n\nexport function filterUndef<T>(element: T | undefined): element is T {\n  return element != undefined;\n}\n","import { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { DebugMetadata } from \"../../../engine/DebugMetadata\";\nimport { FindQueryFunc } from \"./FindQueryFunc\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Path as RuntimePath } from \"../../../engine/Path\";\nimport { Story } from \"./Story\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\n\nexport abstract class ParsedObject {\n  public abstract readonly GenerateRuntimeObject: () => RuntimeObject | null;\n\n  private _alreadyHadError: boolean = false;\n  private _alreadyHadWarning: boolean = false;\n  private _debugMetadata: DebugMetadata | null = null;\n  private _runtimeObject: RuntimeObject | null = null;\n\n  public content: ParsedObject[] = [];\n  public parent: ParsedObject | null = null;\n\n  get debugMetadata() {\n    if (this._debugMetadata === null && this.parent) {\n      return this.parent.debugMetadata;\n    }\n\n    return this._debugMetadata;\n  }\n\n  set debugMetadata(value: DebugMetadata | null) {\n    this._debugMetadata = value;\n  }\n\n  get hasOwnDebugMetadata(): boolean {\n    return Boolean(this.debugMetadata);\n  }\n\n  get typeName(): string {\n    return \"ParsedObject\";\n  }\n\n  public readonly GetType = (): string => this.typeName;\n\n  get story(): Story {\n    let ancestor: ParsedObject = this;\n    while (ancestor.parent) {\n      ancestor = ancestor.parent;\n    }\n\n    return ancestor as Story;\n  }\n\n  get runtimeObject(): RuntimeObject {\n    if (!this._runtimeObject) {\n      this._runtimeObject = this.GenerateRuntimeObject();\n      if (this._runtimeObject) {\n        this._runtimeObject.debugMetadata = this.debugMetadata;\n      }\n    }\n\n    return this._runtimeObject as RuntimeObject;\n  }\n\n  set runtimeObject(value: RuntimeObject) {\n    this._runtimeObject = value;\n  }\n\n  get runtimePath(): RuntimePath {\n    if (!this.runtimeObject.path) {\n      throw new Error();\n    }\n\n    return this.runtimeObject.path;\n  }\n\n  // When counting visits and turns since, different object\n  // types may have different containers that needs to be counted.\n  // For most it'll just be the object's main runtime object,\n  // but for e.g. choices, it'll be the target container.\n  get containerForCounting(): RuntimeContainer | null {\n    return this.runtimeObject as RuntimeContainer;\n  }\n\n  get ancestry(): ParsedObject[] {\n    let result = [];\n\n    let ancestor = this.parent;\n    while (ancestor) {\n      result.push(ancestor);\n      ancestor = ancestor.parent;\n    }\n\n    result = result.reverse();\n\n    return result;\n  }\n\n  /*\n  get descriptionOfScope(): string {\n    const locationNames: string[] = [];\n\n    let ancestor: ParsedObject | null = this;\n    while (ancestor) {\n      var ancestorFlow = ancestor as FlowBase;\n      if (ancestorFlow && ancestorFlow.name != null) {\n        locationNames.push(`'${ancestorFlow.name}'`);\n      }\n      ancestor = ancestor.parent;\n    }\n\n    let scopeSB = '';\n    if (locationNames.length > 0) {\n      const locationsListStr = locationNames.join(', ');\n      scopeSB += `${locationsListStr} and`;\n    }\n\n    scopeSB += 'at top scope';\n\n    return scopeSB;\n  }\n*/\n\n  // Return the object so that method can be chained easily\n  public readonly AddContent = <T extends ParsedObject, V extends T | T[]>(\n    subContent: V\n  ) => {\n    if (this.content === null) {\n      this.content = [];\n    }\n\n    const sub = Array.isArray(subContent) ? subContent : [subContent];\n\n    // Make resilient to content not existing, which can happen\n    // in the case of parse errors where we've already reported\n    // an error but still want a valid structure so we can\n    // carry on parsing.\n    for (const ss of sub) {\n      if (ss.hasOwnProperty(\"parent\")) {\n        ss.parent = this;\n      }\n      this.content.push(ss);\n    }\n\n    if (Array.isArray(subContent)) {\n      return;\n    } else {\n      return subContent;\n    }\n  };\n\n  public readonly InsertContent = <T extends ParsedObject>(\n    index: number,\n    subContent: T\n  ): T => {\n    if (this.content === null) {\n      this.content = [];\n    }\n\n    subContent.parent = this;\n    this.content.splice(index, 0, subContent);\n\n    return subContent;\n  };\n\n  public readonly Find =\n    <T extends ParsedObject>(\n      type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n    ) =>\n    (queryFunc: FindQueryFunc<T> | null = null): T | null => {\n      let tObj = asOrNull(this, type) as any as T;\n      if (tObj !== null && (queryFunc === null || queryFunc(tObj) === true)) {\n        return tObj;\n      }\n\n      if (this.content === null) {\n        return null;\n      }\n\n      for (const obj of this.content) {\n        let nestedResult = obj.Find && obj.Find(type)(queryFunc);\n        if (nestedResult) {\n          return nestedResult as T;\n        }\n      }\n\n      return null;\n    };\n\n  public readonly FindAll =\n    <T extends ParsedObject>(\n      type: (new (...arg: any[]) => T) | (Function & { prototype: T })\n    ) =>\n    (queryFunc?: FindQueryFunc<T>, foundSoFar?: T[]): T[] => {\n      const found = Array.isArray(foundSoFar) ? foundSoFar : [];\n\n      const tObj = asOrNull(this, type);\n      if (tObj !== null && (!queryFunc || queryFunc(tObj) === true)) {\n        found.push(tObj);\n      }\n\n      if (this.content === null) {\n        return [];\n      }\n\n      for (const obj of this.content) {\n        obj.FindAll && obj.FindAll(type)(queryFunc, found);\n      }\n\n      return found;\n    };\n\n  public ResolveReferences(context: Story) {\n    if (this.content !== null) {\n      for (const obj of this.content) {\n        obj.ResolveReferences(context);\n      }\n    }\n  }\n\n  public Error(\n    message: string,\n    source: ParsedObject | null = null,\n    isWarning: boolean = false\n  ): void {\n    if (source === null) {\n      source = this;\n    }\n\n    // Only allow a single parsed object to have a single error *directly* associated with it\n    if (\n      (source._alreadyHadError && !isWarning) ||\n      (source._alreadyHadWarning && isWarning)\n    ) {\n      return;\n    }\n\n    if (this.parent) {\n      this.parent.Error(message, source, isWarning);\n    } else {\n      throw new Error(`No parent object to send error to: ${message}`);\n    }\n\n    if (isWarning) {\n      source._alreadyHadWarning = true;\n    } else {\n      source._alreadyHadError = true;\n    }\n  }\n\n  public readonly Warning = (\n    message: string,\n    source: ParsedObject | null = null\n  ): void => {\n    this.Error(message, source, true);\n  };\n}\n","import { ParsedObject } from \"./Object\";\n\nexport class AuthorWarning extends ParsedObject {\n  constructor(public readonly warningMessage: string) {\n    super();\n  }\n\n  get typeName(): string {\n    return \"AuthorWarning\";\n  }\n\n  public readonly GenerateRuntimeObject = (): null => {\n    this.Warning(this.warningMessage);\n    return null;\n  };\n}\n","export class Path {\n  public static parentId = \"^\";\n\n  public _isRelative: boolean;\n  public _components: Path.Component[];\n  public _componentsString: string | null;\n\n  constructor();\n  constructor(componentsString: string);\n  constructor(head: Path.Component, tail: Path);\n  constructor(head: Path.Component[], relative?: boolean);\n  constructor() {\n    this._components = [];\n    this._componentsString = null;\n    this._isRelative = false;\n\n    if (typeof arguments[0] == \"string\") {\n      let componentsString = arguments[0] as string;\n      this.componentsString = componentsString;\n    } else if (\n      arguments[0] instanceof Path.Component &&\n      arguments[1] instanceof Path\n    ) {\n      let head = arguments[0] as Path.Component;\n      let tail = arguments[1] as Path;\n      this._components.push(head);\n      this._components = this._components.concat(tail._components);\n    } else if (arguments[0] instanceof Array) {\n      let head = arguments[0] as Path.Component[];\n      let relative = !!arguments[1] as boolean;\n      this._components = this._components.concat(head);\n      this._isRelative = relative;\n    }\n  }\n  get isRelative() {\n    return this._isRelative;\n  }\n  get componentCount(): number {\n    return this._components.length;\n  }\n  get head(): Path.Component | null {\n    if (this._components.length > 0) {\n      return this._components[0];\n    } else {\n      return null;\n    }\n  }\n  get tail(): Path {\n    if (this._components.length >= 2) {\n      // careful, the original code uses length-1 here. This is because the second argument of\n      // List.GetRange is a number of elements to extract, wherease Array.slice uses an index\n      let tailComps = this._components.slice(1, this._components.length);\n      return new Path(tailComps);\n    } else {\n      return Path.self;\n    }\n  }\n  get length(): number {\n    return this._components.length;\n  }\n  get lastComponent(): Path.Component | null {\n    let lastComponentIdx = this._components.length - 1;\n    if (lastComponentIdx >= 0) {\n      return this._components[lastComponentIdx];\n    } else {\n      return null;\n    }\n  }\n  get containsNamedComponent(): boolean {\n    for (let i = 0, l = this._components.length; i < l; i++) {\n      if (!this._components[i].isIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n  static get self(): Path {\n    let path = new Path();\n    path._isRelative = true;\n    return path;\n  }\n\n  public GetComponent(index: number): Path.Component {\n    return this._components[index];\n  }\n  public PathByAppendingPath(pathToAppend: Path): Path {\n    let p = new Path();\n\n    let upwardMoves = 0;\n    for (let i = 0; i < pathToAppend._components.length; ++i) {\n      if (pathToAppend._components[i].isParent) {\n        upwardMoves++;\n      } else {\n        break;\n      }\n    }\n\n    for (let i = 0; i < this._components.length - upwardMoves; ++i) {\n      p._components.push(this._components[i]);\n    }\n\n    for (let i = upwardMoves; i < pathToAppend._components.length; ++i) {\n      p._components.push(pathToAppend._components[i]);\n    }\n\n    return p;\n  }\n  get componentsString(): string {\n    if (this._componentsString == null) {\n      this._componentsString = this._components.join(\".\");\n      if (this.isRelative)\n        this._componentsString = \".\" + this._componentsString;\n    }\n\n    return this._componentsString;\n  }\n  set componentsString(value: string) {\n    this._components.length = 0;\n\n    this._componentsString = value;\n\n    if (this._componentsString == null || this._componentsString == \"\") return;\n\n    if (this._componentsString[0] == \".\") {\n      this._isRelative = true;\n      this._componentsString = this._componentsString.substring(1);\n    }\n\n    let componentStrings = this._componentsString.split(\".\");\n    for (let str of componentStrings) {\n      // we need to distinguish between named components that start with a number, eg \"42somewhere\", and indexed components\n      // the normal parseInt won't do for the detection because it's too relaxed.\n      // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n      if (/^(\\-|\\+)?([0-9]+|Infinity)$/.test(str)) {\n        this._components.push(new Path.Component(parseInt(str)));\n      } else {\n        this._components.push(new Path.Component(str));\n      }\n    }\n  }\n  public toString(): string {\n    return this.componentsString;\n  }\n  public Equals(otherPath: Path | null): boolean {\n    if (otherPath == null) return false;\n\n    if (otherPath._components.length != this._components.length) return false;\n\n    if (otherPath.isRelative != this.isRelative) return false;\n\n    // the original code uses SequenceEqual here, so we need to iterate over the components manually.\n    for (let i = 0, l = otherPath._components.length; i < l; i++) {\n      // it's not quite clear whether this test should use Equals or a simple == operator,\n      // see https://github.com/y-lohse/inkjs/issues/22\n      if (!otherPath._components[i].Equals(this._components[i])) return false;\n    }\n\n    return true;\n  }\n  public PathByAppendingComponent(c: Path.Component): Path {\n    let p = new Path();\n    p._components.push(...this._components);\n    p._components.push(c);\n    return p;\n  }\n}\n\nexport namespace Path {\n  export class Component {\n    public readonly index: number;\n    public readonly name: string | null;\n\n    constructor(indexOrName: string | number) {\n      this.index = -1;\n      this.name = null;\n      if (typeof indexOrName == \"string\") {\n        this.name = indexOrName;\n      } else {\n        this.index = indexOrName;\n      }\n    }\n    get isIndex(): boolean {\n      return this.index >= 0;\n    }\n    get isParent(): boolean {\n      return this.name == Path.parentId;\n    }\n\n    public static ToParent(): Component {\n      return new Component(Path.parentId);\n    }\n    public toString(): string | null {\n      if (this.isIndex) {\n        return this.index.toString();\n      } else {\n        return this.name;\n      }\n    }\n    public Equals(otherComp: Component): boolean {\n      if (otherComp != null && otherComp.isIndex == this.isIndex) {\n        if (this.isIndex) {\n          return this.index == otherComp.index;\n        } else {\n          return this.name == otherComp.name;\n        }\n      }\n\n      return false;\n    }\n  }\n}\n","export namespace Debug {\n  export function AssertType<T>(\n    variable: any,\n    type: new () => T,\n    message: string\n  ): void | never {\n    Assert(variable instanceof type, message);\n  }\n\n  export function Assert(condition: boolean, message?: string): void | never {\n    if (!condition) {\n      if (typeof message !== \"undefined\") {\n        console.warn(message);\n      }\n\n      if (console.trace) {\n        console.trace();\n      }\n\n      throw new Error(\"\");\n    }\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { StoryException } from \"./StoryException\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { tryParseInt, tryParseFloat } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport abstract class AbstractValue extends InkObject {\n  public abstract get valueType(): ValueType;\n  public abstract get isTruthy(): boolean;\n  public abstract get valueObject(): any;\n\n  public abstract Cast(newType: ValueType): Value<any>;\n\n  public static Create(\n    val: any,\n    preferredNumberType?: ValueType\n  ): Value<any> | null {\n    // This code doesn't exist in upstream and is simply here to enforce\n    // the creation of the proper number value.\n    // If `preferredNumberType` is not provided or if value doesn't match\n    // `preferredNumberType`, this conditional does nothing.\n    if (preferredNumberType) {\n      if (\n        preferredNumberType === (ValueType.Int as ValueType) &&\n        Number.isInteger(Number(val))\n      ) {\n        return new IntValue(Number(val));\n      } else if (\n        preferredNumberType === (ValueType.Float as ValueType) &&\n        !isNaN(val)\n      ) {\n        return new FloatValue(Number(val));\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      return new BoolValue(Boolean(val));\n    }\n\n    // https://github.com/y-lohse/inkjs/issues/425\n    // Changed condition sequence, because Number('') is\n    // parsed to 0, which made setting string to empty\n    // impossible\n    if (typeof val === \"string\") {\n      return new StringValue(String(val));\n    } else if (Number.isInteger(Number(val))) {\n      return new IntValue(Number(val));\n    } else if (!isNaN(val)) {\n      return new FloatValue(Number(val));\n    } else if (val instanceof Path) {\n      return new DivertTargetValue(asOrThrows(val, Path));\n    } else if (val instanceof InkList) {\n      return new ListValue(asOrThrows(val, InkList));\n    }\n\n    return null;\n  }\n  public Copy() {\n    return asOrThrows(AbstractValue.Create(this.valueObject), InkObject);\n  }\n  public BadCastException(targetType: ValueType) {\n    return new StoryException(\n      \"Can't cast \" +\n        this.valueObject +\n        \" from \" +\n        this.valueType +\n        \" to \" +\n        targetType\n    );\n  }\n}\n\nexport abstract class Value<\n  T extends { toString: () => string },\n> extends AbstractValue {\n  public value: T | null;\n\n  constructor(val: T | null) {\n    super();\n    this.value = val;\n  }\n  public get valueObject() {\n    return this.value;\n  }\n  public toString() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.toString();\n  }\n}\n\nexport class BoolValue extends Value<boolean> {\n  constructor(val: boolean) {\n    super(val || false);\n  }\n  public get isTruthy() {\n    return Boolean(this.value);\n  }\n  public get valueType() {\n    return ValueType.Bool;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value ? 1 : 0);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value ? 1.0 : 0.0);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(this.value ? \"true\" : \"false\");\n    }\n\n    throw this.BadCastException(newType);\n  }\n\n  public toString() {\n    return this.value ? \"true\" : \"false\";\n  }\n}\n\nexport class IntValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0);\n  }\n  public get isTruthy() {\n    return this.value != 0;\n  }\n  public get valueType() {\n    return ValueType.Int;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0 ? false : true);\n    }\n\n    if (newType == ValueType.Float) {\n      return new FloatValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class FloatValue extends Value<number> {\n  constructor(val: number) {\n    super(val || 0.0);\n  }\n  public get isTruthy() {\n    return this.value != 0.0;\n  }\n  public get valueType() {\n    return ValueType.Float;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Bool) {\n      return new BoolValue(this.value === 0.0 ? false : true);\n    }\n\n    if (newType == ValueType.Int) {\n      return new IntValue(this.value);\n    }\n\n    if (newType == ValueType.String) {\n      return new StringValue(\"\" + this.value);\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class StringValue extends Value<string> {\n  public _isNewline: boolean;\n  public _isInlineWhitespace: boolean;\n\n  constructor(val: string) {\n    super(val || \"\");\n\n    this._isNewline = this.value == \"\\n\";\n    this._isInlineWhitespace = true;\n\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (this.value.length > 0) {\n      this.value.split(\"\").every((c) => {\n        if (c != \" \" && c != \"\\t\") {\n          this._isInlineWhitespace = false;\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }\n  public get valueType() {\n    return ValueType.String;\n  }\n  public get isTruthy() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value.length > 0;\n  }\n  public get isNewline() {\n    return this._isNewline;\n  }\n  public get isInlineWhitespace() {\n    return this._isInlineWhitespace;\n  }\n  public get isNonWhitespace() {\n    return !this.isNewline && !this.isInlineWhitespace;\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) {\n      return this;\n    }\n\n    if (newType == ValueType.Int) {\n      let parsedInt = tryParseInt(this.value);\n      if (parsedInt.exists) {\n        return new IntValue(parsedInt.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    if (newType == ValueType.Float) {\n      let parsedFloat = tryParseFloat(this.value);\n      if (parsedFloat.exists) {\n        return new FloatValue(parsedFloat.result);\n      } else {\n        throw this.BadCastException(newType);\n      }\n    }\n\n    throw this.BadCastException(newType);\n  }\n}\n\nexport class DivertTargetValue extends Value<Path> {\n  constructor(targetPath: Path | null = null) {\n    super(targetPath);\n  }\n  public get valueType() {\n    return ValueType.DivertTarget;\n  }\n  public get targetPath() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set targetPath(value: Path) {\n    this.value = value;\n  }\n  public get isTruthy(): never {\n    throw new Error(\"Shouldn't be checking the truthiness of a divert target\");\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"DivertTargetValue(\" + this.targetPath + \")\";\n  }\n}\n\nexport class VariablePointerValue extends Value<string> {\n  public _contextIndex: number;\n\n  constructor(variableName: string, contextIndex: number = -1) {\n    super(variableName);\n\n    this._contextIndex = contextIndex;\n  }\n\n  public get contextIndex() {\n    return this._contextIndex;\n  }\n  public set contextIndex(value: number) {\n    this._contextIndex = value;\n  }\n  public get variableName() {\n    if (this.value === null) return throwNullException(\"Value.value\");\n    return this.value;\n  }\n  public set variableName(value: string) {\n    this.value = value;\n  }\n  public get valueType() {\n    return ValueType.VariablePointer;\n  }\n\n  public get isTruthy(): never {\n    throw new Error(\n      \"Shouldn't be checking the truthiness of a variable pointer\"\n    );\n  }\n\n  public Cast(newType: ValueType): Value<any> {\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  public toString() {\n    return \"VariablePointerValue(\" + this.variableName + \")\";\n  }\n  public Copy() {\n    return new VariablePointerValue(this.variableName, this.contextIndex);\n  }\n}\n\nexport class ListValue extends Value<InkList> {\n  public get isTruthy() {\n    if (this.value === null) {\n      return throwNullException(\"this.value\");\n    }\n    return this.value.Count > 0;\n  }\n  public get valueType() {\n    return ValueType.List;\n  }\n  public Cast(newType: ValueType): Value<any> {\n    if (this.value === null) return throwNullException(\"Value.value\");\n\n    if (newType == ValueType.Int) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new IntValue(0);\n      else return new IntValue(max.Value);\n    } else if (newType == ValueType.Float) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new FloatValue(0.0);\n      else return new FloatValue(max.Value);\n    } else if (newType == ValueType.String) {\n      let max = this.value.maxItem;\n      if (max.Key.isNull) return new StringValue(\"\");\n      else {\n        return new StringValue(max.Key.toString());\n      }\n    }\n\n    if (newType == this.valueType) return this;\n\n    throw this.BadCastException(newType);\n  }\n  constructor();\n  constructor(list: InkList);\n  constructor(listOrSingleItem: InkListItem, singleValue: number);\n  constructor(listOrSingleItem?: InkListItem | InkList, singleValue?: number) {\n    super(null);\n\n    if (!listOrSingleItem && !singleValue) {\n      this.value = new InkList();\n    } else if (listOrSingleItem instanceof InkList) {\n      this.value = new InkList(listOrSingleItem);\n    } else if (\n      listOrSingleItem instanceof InkListItem &&\n      typeof singleValue === \"number\"\n    ) {\n      this.value = new InkList({\n        Key: listOrSingleItem,\n        Value: singleValue,\n      });\n    }\n  }\n  public static RetainListOriginsForAssignment(\n    oldValue: InkObject | null,\n    newValue: InkObject\n  ) {\n    let oldList = asOrNull(oldValue, ListValue);\n    let newList = asOrNull(newValue, ListValue);\n\n    if (newList && newList.value === null)\n      return throwNullException(\"newList.value\");\n    if (oldList && oldList.value === null)\n      return throwNullException(\"oldList.value\");\n\n    // When assigning the empty list, try to retain any initial origin names\n    if (oldList && newList && newList.value!.Count == 0)\n      newList.value!.SetInitialOriginNames(oldList.value!.originNames);\n  }\n}\n\nexport enum ValueType {\n  Bool = -1,\n  Int = 0,\n  Float = 1,\n  List = 2,\n  String = 3,\n  DivertTarget = 4,\n  VariablePointer = 5,\n}\n","export enum PushPopType {\n  Tunnel = 0,\n  Function = 1,\n  FunctionEvaluationFromGame = 2,\n}\n","/**\n * In the original C# code, a SystemException would be thrown when passing\n * null to methods expected a valid instance. Javascript has no such\n * concept, but TypeScript will not allow `null` to be passed to methods\n * explicitely requiring a valid type.\n *\n * Whenever TypeScript complain about the possibility of a `null` value,\n * check the offending value and it it's null, throw this exception using\n * `throwNullException(name: string)`.\n */\nexport class NullException extends Error {}\n\n/**\n * Throw a NullException.\n *\n * @param name a short description of the offending value (often its name within the code).\n */\nexport function throwNullException(name: string): never {\n  throw new NullException(`${name} is null or undefined`);\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { Debug } from \"./Debug\";\nimport { asOrNull, asINamedContentOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SearchResult } from \"./SearchResult\";\nimport { DebugMetadata } from \"./DebugMetadata\";\n\nexport class InkObject {\n  public parent: InkObject | null = null;\n\n  get debugMetadata(): DebugMetadata | null {\n    if (this._debugMetadata === null) {\n      if (this.parent) {\n        return this.parent.debugMetadata;\n      }\n    }\n\n    return this._debugMetadata;\n  }\n\n  set debugMetadata(value) {\n    this._debugMetadata = value;\n  }\n\n  get ownDebugMetadata() {\n    return this._debugMetadata;\n  }\n\n  private _debugMetadata: DebugMetadata | null = null;\n\n  public DebugLineNumberOfPath(path: Path) {\n    if (path === null) return null;\n\n    // Try to get a line number from debug metadata\n    let root = this.rootContentContainer;\n    if (root) {\n      let targetContent = root.ContentAtPath(path).obj;\n      if (targetContent) {\n        let dm = targetContent.debugMetadata;\n        if (dm !== null) {\n          return dm.startLineNumber;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  get path() {\n    if (this._path == null) {\n      if (this.parent == null) {\n        this._path = new Path();\n      } else {\n        let comps: Path.Component[] = [];\n\n        let child: InkObject = this;\n        let container = asOrNull(child.parent, Container);\n\n        while (container !== null) {\n          let namedChild = asINamedContentOrNull(child);\n          if (namedChild != null && namedChild.hasValidName) {\n            if (namedChild.name === null)\n              return throwNullException(\"namedChild.name\");\n            comps.unshift(new Path.Component(namedChild.name!));\n          } else {\n            comps.unshift(new Path.Component(container.content.indexOf(child)));\n          }\n\n          child = container;\n          container = asOrNull(container.parent, Container);\n        }\n\n        this._path = new Path(comps);\n      }\n    }\n\n    return this._path;\n  }\n  private _path: Path | null = null;\n\n  public ResolvePath(path: Path | null): SearchResult {\n    if (path === null) return throwNullException(\"path\");\n    if (path.isRelative) {\n      let nearestContainer = asOrNull(this, Container);\n\n      if (nearestContainer === null) {\n        Debug.Assert(\n          this.parent !== null,\n          \"Can't resolve relative path because we don't have a parent\"\n        );\n        nearestContainer = asOrNull(this.parent, Container);\n        Debug.Assert(\n          nearestContainer !== null,\n          \"Expected parent to be a container\"\n        );\n        Debug.Assert(path.GetComponent(0).isParent);\n        path = path.tail;\n      }\n\n      if (nearestContainer === null) {\n        return throwNullException(\"nearestContainer\");\n      }\n      return nearestContainer.ContentAtPath(path);\n    } else {\n      let contentContainer = this.rootContentContainer;\n      if (contentContainer === null) {\n        return throwNullException(\"contentContainer\");\n      }\n      return contentContainer.ContentAtPath(path);\n    }\n  }\n\n  public ConvertPathToRelative(globalPath: Path) {\n    let ownPath = this.path;\n\n    let minPathLength = Math.min(globalPath.length, ownPath.length);\n    let lastSharedPathCompIndex = -1;\n\n    for (let i = 0; i < minPathLength; ++i) {\n      let ownComp = ownPath.GetComponent(i);\n      let otherComp = globalPath.GetComponent(i);\n\n      if (ownComp.Equals(otherComp)) {\n        lastSharedPathCompIndex = i;\n      } else {\n        break;\n      }\n    }\n\n    // No shared path components, so just use global path\n    if (lastSharedPathCompIndex == -1) return globalPath;\n\n    let numUpwardsMoves = ownPath.componentCount - 1 - lastSharedPathCompIndex;\n\n    let newPathComps: Path.Component[] = [];\n\n    for (let up = 0; up < numUpwardsMoves; ++up)\n      newPathComps.push(Path.Component.ToParent());\n\n    for (\n      let down = lastSharedPathCompIndex + 1;\n      down < globalPath.componentCount;\n      ++down\n    )\n      newPathComps.push(globalPath.GetComponent(down));\n\n    let relativePath = new Path(newPathComps, true);\n    return relativePath;\n  }\n\n  public CompactPathString(otherPath: Path) {\n    let globalPathStr = null;\n    let relativePathStr = null;\n\n    if (otherPath.isRelative) {\n      relativePathStr = otherPath.componentsString;\n      globalPathStr = this.path.PathByAppendingPath(otherPath).componentsString;\n    } else {\n      let relativePath = this.ConvertPathToRelative(otherPath);\n      relativePathStr = relativePath.componentsString;\n      globalPathStr = otherPath.componentsString;\n    }\n\n    if (relativePathStr.length < globalPathStr.length) return relativePathStr;\n    else return globalPathStr;\n  }\n\n  get rootContentContainer() {\n    let ancestor: InkObject = this;\n    while (ancestor.parent) {\n      ancestor = ancestor.parent;\n    }\n    return asOrNull(ancestor, Container);\n  }\n\n  public Copy(): InkObject {\n    throw Error(\"Not Implemented: Doesn't support copying\");\n  }\n  // SetChild works slightly diferently in the js implementation.\n  // Since we can't pass an objets property by reference, we instead pass\n  // the object and the property string.\n  // TODO: This method can probably be rewritten with type-safety in mind.\n  public SetChild(obj: any, prop: any, value: any) {\n    if (obj[prop]) obj[prop] = null;\n\n    obj[prop] = value;\n\n    if (obj[prop]) obj[prop].parent = this;\n  }\n\n  public Equals(obj: any) {\n    return obj === this;\n  }\n}\n","export class StringBuilder {\n  private string: string;\n\n  constructor(str?: string) {\n    str = typeof str !== \"undefined\" ? str.toString() : \"\";\n    this.string = str;\n  }\n  get Length(): number {\n    return this.string.length;\n  }\n  public Append(str: string | null) {\n    if (str !== null) {\n      this.string += str;\n    }\n  }\n  public AppendLine(str?: string) {\n    if (typeof str !== \"undefined\") this.Append(str);\n    this.string += \"\\n\";\n  }\n  public AppendFormat(format: string, ...args: any[]) {\n    // taken from http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n    this.string += format.replace(/{(\\d+)}/g, (match: string, num: number) =>\n      typeof args[num] != \"undefined\" ? args[num] : match\n    );\n  }\n  public toString(): string {\n    return this.string;\n  }\n\n  public Clear() {\n    this.string = \"\";\n  }\n}\n","import { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Story } from \"./Story\";\n\nexport class InkListItem implements IInkListItem {\n  // InkListItem is a struct\n\n  public readonly originName: string | null = null;\n  public readonly itemName: string | null = null;\n\n  constructor(originName: string | null, itemName: string | null);\n  constructor(fullName: string | null);\n  constructor() {\n    if (typeof arguments[1] !== \"undefined\") {\n      let originName = arguments[0] as string | null;\n      let itemName = arguments[1] as string | null;\n\n      this.originName = originName;\n      this.itemName = itemName;\n    } else if (arguments[0]) {\n      let fullName = arguments[0] as string;\n\n      let nameParts = fullName.toString().split(\".\");\n      this.originName = nameParts[0];\n      this.itemName = nameParts[1];\n    }\n  }\n  public static get Null() {\n    return new InkListItem(null, null);\n  }\n  public get isNull() {\n    return this.originName == null && this.itemName == null;\n  }\n  get fullName() {\n    return (\n      (this.originName !== null ? this.originName : \"?\") + \".\" + this.itemName\n    );\n  }\n  public toString(): string {\n    return this.fullName;\n  }\n  public Equals(obj: InkListItem) {\n    if (obj instanceof InkListItem) {\n      let otherItem = obj;\n      return (\n        otherItem.itemName == this.itemName &&\n        otherItem.originName == this.originName\n      );\n    }\n\n    return false;\n  }\n\n  // These methods did not exist in the original C# code. Their purpose is to\n  // make `InkListItem` mimics the value-type semantics of the original\n  // struct. Please refer to the end of this file, for a more in-depth\n  // explanation.\n\n  /**\n   * Returns a shallow clone of the current instance.\n   */\n  public copy() {\n    return new InkListItem(this.originName, this.itemName);\n  }\n  /**\n   * Returns a `SerializedInkListItem` representing the current\n   * instance. The result is intended to be used as a key inside a Map.\n   */\n  public serialized(): SerializedInkListItem {\n    // We are simply using a JSON representation as a value-typed key.\n    return JSON.stringify({\n      originName: this.originName,\n      itemName: this.itemName,\n    });\n  }\n\n  /**\n   * Reconstructs a `InkListItem` from the given SerializedInkListItem.\n   */\n  public static fromSerializedKey(key: SerializedInkListItem): InkListItem {\n    let obj = JSON.parse(key);\n    if (!InkListItem.isLikeInkListItem(obj)) return InkListItem.Null;\n\n    let inkListItem = obj as IInkListItem;\n\n    return new InkListItem(inkListItem.originName, inkListItem.itemName);\n  }\n\n  /**\n   * Determines whether the given item is sufficiently `InkListItem`-like\n   * to be used as a template when reconstructing the InkListItem.\n   */\n  private static isLikeInkListItem(item: any) {\n    if (typeof item !== \"object\") return false;\n    if (!item.hasOwnProperty(\"originName\") || !item.hasOwnProperty(\"itemName\"))\n      return false;\n    if (typeof item.originName !== \"string\" && typeof item.originName !== null)\n      return false;\n    if (typeof item.itemName !== \"string\" && typeof item.itemName !== null)\n      return false;\n\n    return true;\n  }\n}\n\nexport class InkList extends Map<SerializedInkListItem, number> {\n  public origins: ListDefinition[] | null = null;\n  public _originNames: string[] | null = [];\n\n  constructor();\n  constructor(otherList: InkList);\n  constructor(singleOriginListName: string, originStory: Story);\n  constructor(singleElement: KeyValuePair<InkListItem, number>);\n  constructor() {\n    // Trying to be smart here, this emulates the constructor inheritance found\n    // in the original code, but only if otherList is an InkList. IIFE FTW.\n    super(\n      (() => {\n        if (arguments[0] instanceof InkList) {\n          return arguments[0];\n        } else {\n          return [];\n        }\n      })()\n    );\n\n    if (arguments[0] instanceof InkList) {\n      let otherList = arguments[0] as InkList;\n\n      let otherOriginNames = otherList.originNames as string[];\n      if (otherOriginNames !== null)\n        this._originNames = otherOriginNames.slice();\n      if (otherList.origins !== null) {\n        this.origins = otherList.origins.slice();\n      }\n    } else if (typeof arguments[0] === \"string\") {\n      let singleOriginListName = arguments[0] as string;\n      let originStory = arguments[1] as Story;\n      this.SetInitialOriginName(singleOriginListName);\n\n      if (originStory.listDefinitions === null) {\n        return throwNullException(\"originStory.listDefinitions\");\n      }\n      let def = originStory.listDefinitions.TryListGetDefinition(\n        singleOriginListName,\n        null\n      );\n      if (def.exists) {\n        // Throwing now, because if the value is `null` it will\n        // eventually throw down the line.\n        if (def.result === null) {\n          return throwNullException(\"def.result\");\n        }\n        this.origins = [def.result];\n      } else {\n        throw new Error(\n          \"InkList origin could not be found in story when constructing new list: \" +\n            singleOriginListName\n        );\n      }\n    } else if (\n      typeof arguments[0] === \"object\" &&\n      arguments[0].hasOwnProperty(\"Key\") &&\n      arguments[0].hasOwnProperty(\"Value\")\n    ) {\n      let singleElement = arguments[0] as KeyValuePair<InkListItem, number>;\n      this.Add(singleElement.Key, singleElement.Value);\n    }\n  }\n\n  public static FromString(myListItem: string, originStory: Story) {\n    if (myListItem == null || myListItem == \"\") return new InkList();\n    let listValue =\n      originStory.listDefinitions?.FindSingleItemListWithName(myListItem);\n    if (listValue) {\n      if (listValue.value === null) {\n        return throwNullException(\"listValue.value\");\n      }\n      return new InkList(listValue.value);\n    } else {\n      throw new Error(\n        \"Could not find the InkListItem from the string '\" +\n          myListItem +\n          \"' to create an InkList because it doesn't exist in the original list definition in ink.\"\n      );\n    }\n  }\n\n  public AddItem(\n    itemOrItemName: InkListItem | string | null,\n    storyObject: Story | null = null\n  ) {\n    if (itemOrItemName instanceof InkListItem) {\n      let item = itemOrItemName;\n\n      if (item.originName == null) {\n        this.AddItem(item.itemName);\n        return;\n      }\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (origin.name == item.originName) {\n          let intVal = origin.TryGetValueForItem(item, 0);\n          if (intVal.exists) {\n            this.Add(item, intVal.result);\n            return;\n          } else {\n            throw new Error(\n              \"Could not add the item \" +\n                item +\n                \" to this list because it doesn't exist in the original list definition in ink.\"\n            );\n          }\n        }\n      }\n\n      throw new Error(\n        \"Failed to add item to list because the item was from a new list definition that wasn't previously known to this list. Only items from previously known lists can be used, so that the int value can be found.\"\n      );\n    } else if (itemOrItemName !== null) {\n      //itemOrItemName is a string\n      let itemName = itemOrItemName as string;\n\n      let foundListDef: ListDefinition | null = null;\n\n      if (this.origins === null) return throwNullException(\"this.origins\");\n\n      for (let origin of this.origins) {\n        if (itemName === null) return throwNullException(\"itemName\");\n\n        if (origin.ContainsItemWithName(itemName)) {\n          if (foundListDef != null) {\n            throw new Error(\n              \"Could not add the item \" +\n                itemName +\n                \" to this list because it could come from either \" +\n                origin.name +\n                \" or \" +\n                foundListDef.name\n            );\n          } else {\n            foundListDef = origin;\n          }\n        }\n      }\n\n      if (foundListDef == null) {\n        if (storyObject == null) {\n          throw new Error(\n            \"Could not add the item \" +\n              itemName +\n              \" to this list because it isn't known to any list definitions previously associated with this list.\"\n          );\n        } else {\n          let newItem = InkList.FromString(itemName, storyObject)\n            .orderedItems[0];\n          this.Add(newItem.Key, newItem.Value);\n        }\n      } else {\n        let item = new InkListItem(foundListDef.name, itemName);\n        let itemVal = foundListDef.ValueForItem(item);\n        this.Add(item, itemVal);\n      }\n    }\n  }\n  public ContainsItemNamed(itemName: string | null) {\n    for (let [key] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (item.itemName == itemName) return true;\n    }\n\n    return false;\n  }\n  public ContainsKey(key: InkListItem) {\n    return this.has(key.serialized());\n  }\n  public Add(key: InkListItem, value: number) {\n    let serializedKey = key.serialized();\n    if (this.has(serializedKey)) {\n      // Throw an exception to match the C# behavior.\n      throw new Error(`The Map already contains an entry for ${key}`);\n    }\n    this.set(serializedKey, value);\n  }\n  public Remove(key: InkListItem) {\n    return this.delete(key.serialized());\n  }\n  get Count() {\n    return this.size;\n  }\n  get originOfMaxItem(): ListDefinition | null {\n    if (this.origins == null) return null;\n\n    let maxOriginName = this.maxItem.Key.originName;\n    let result = null;\n    this.origins.every((origin) => {\n      if (origin.name == maxOriginName) {\n        result = origin;\n        return false;\n      } else return true;\n    });\n\n    return result;\n  }\n  get originNames(): string[] {\n    if (this.Count > 0) {\n      if (this._originNames == null && this.Count > 0) this._originNames = [];\n      else {\n        if (!this._originNames) this._originNames = [];\n        this._originNames.length = 0;\n      }\n\n      for (let [key] of this) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.originName === null)\n          return throwNullException(\"item.originName\");\n        this._originNames.push(item.originName);\n      }\n    }\n\n    return this._originNames as string[];\n  }\n  public SetInitialOriginName(initialOriginName: string) {\n    this._originNames = [initialOriginName];\n  }\n  public SetInitialOriginNames(initialOriginNames: string[]) {\n    if (initialOriginNames == null) this._originNames = null;\n    else this._originNames = initialOriginNames.slice(); // store a copy\n  }\n  get maxItem() {\n    let max: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (max.Key.isNull || value > max.Value)\n        max = { Key: item, Value: value };\n    }\n\n    return max;\n  }\n  get minItem() {\n    let min: KeyValuePair<InkListItem, number> = {\n      Key: InkListItem.Null,\n      Value: 0,\n    };\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      if (min.Key.isNull || value < min.Value) {\n        min = { Key: item, Value: value };\n      }\n    }\n    return min;\n  }\n  get inverse() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          if (!this.ContainsKey(item)) list.Add(item, value);\n        }\n      }\n    }\n    return list;\n  }\n  get all() {\n    let list = new InkList();\n    if (this.origins != null) {\n      for (let origin of this.origins) {\n        for (let [key, value] of origin.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          list.set(item.serialized(), value);\n        }\n      }\n    }\n    return list;\n  }\n  public Union(otherList: InkList) {\n    let union = new InkList(this);\n    for (let [key, value] of otherList) {\n      union.set(key, value);\n    }\n    return union;\n  }\n  public Intersect(otherList: InkList) {\n    let intersection = new InkList();\n    for (let [key, value] of this) {\n      if (otherList.has(key)) intersection.set(key, value);\n    }\n\n    return intersection;\n  }\n  public HasIntersection(otherList: InkList): boolean {\n    for (let [key] of this) {\n      if (otherList.has(key)) return true;\n    }\n    return false;\n  }\n  public Without(listToRemove: InkList) {\n    let result = new InkList(this);\n    for (let [key] of listToRemove) {\n      result.delete(key);\n    }\n\n    return result;\n  }\n\n  public Contains(key: string): boolean;\n  public Contains(otherList: InkList): boolean;\n  public Contains(what: string | InkList): boolean {\n    if (typeof what == \"string\") return this.ContainsItemNamed(what);\n    const otherList = what;\n    if (otherList.size == 0 || this.size == 0) return false;\n    for (let [key] of otherList) {\n      if (!this.has(key)) return false;\n    }\n\n    return true;\n  }\n  public GreaterThan(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return this.minItem.Value > otherList.maxItem.Value;\n  }\n  public GreaterThanOrEquals(otherList: InkList) {\n    if (this.Count == 0) return false;\n    if (otherList.Count == 0) return true;\n\n    return (\n      this.minItem.Value >= otherList.minItem.Value &&\n      this.maxItem.Value >= otherList.maxItem.Value\n    );\n  }\n  public LessThan(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return this.maxItem.Value < otherList.minItem.Value;\n  }\n  public LessThanOrEquals(otherList: InkList) {\n    if (otherList.Count == 0) return false;\n    if (this.Count == 0) return true;\n\n    return (\n      this.maxItem.Value <= otherList.maxItem.Value &&\n      this.minItem.Value <= otherList.minItem.Value\n    );\n  }\n  public MaxAsList() {\n    if (this.Count > 0) return new InkList(this.maxItem);\n    else return new InkList();\n  }\n  public MinAsList() {\n    if (this.Count > 0) return new InkList(this.minItem);\n    else return new InkList();\n  }\n  public ListWithSubRange(minBound: any, maxBound: any) {\n    if (this.Count == 0) return new InkList();\n\n    let ordered = this.orderedItems;\n\n    let minValue = 0;\n    let maxValue = Number.MAX_SAFE_INTEGER;\n\n    if (Number.isInteger(minBound)) {\n      minValue = minBound;\n    } else {\n      if (minBound instanceof InkList && minBound.Count > 0)\n        minValue = minBound.minItem.Value;\n    }\n\n    if (Number.isInteger(maxBound)) {\n      maxValue = maxBound;\n    } else {\n      if (maxBound instanceof InkList && maxBound.Count > 0)\n        maxValue = maxBound.maxItem.Value;\n    }\n\n    let subList = new InkList();\n    subList.SetInitialOriginNames(this.originNames);\n    for (let item of ordered) {\n      if (item.Value >= minValue && item.Value <= maxValue) {\n        subList.Add(item.Key, item.Value);\n      }\n    }\n\n    return subList;\n  }\n  public Equals(otherInkList: InkList) {\n    if (otherInkList instanceof InkList === false) return false;\n    if (otherInkList.Count != this.Count) return false;\n\n    for (let [key] of this) {\n      if (!otherInkList.has(key)) return false;\n    }\n\n    return true;\n  }\n  // GetHashCode not implemented\n  get orderedItems() {\n    // List<KeyValuePair<InkListItem, int>>\n    let ordered = new Array<KeyValuePair<InkListItem, number>>();\n\n    for (let [key, value] of this) {\n      let item = InkListItem.fromSerializedKey(key);\n      ordered.push({ Key: item, Value: value });\n    }\n\n    ordered.sort((x, y) => {\n      if (x.Key.originName === null) {\n        return throwNullException(\"x.Key.originName\");\n      }\n      if (y.Key.originName === null) {\n        return throwNullException(\"y.Key.originName\");\n      }\n\n      if (x.Value == y.Value) {\n        return x.Key.originName.localeCompare(y.Key.originName);\n      } else {\n        // TODO: refactor this bit into a numberCompareTo method?\n        if (x.Value < y.Value) return -1;\n        return x.Value > y.Value ? 1 : 0;\n      }\n    });\n\n    return ordered;\n  }\n\n  get singleItem(): InkListItem | null {\n    for (let item of this.orderedItems) {\n      return item.Key;\n    }\n    return null;\n  }\n\n  public toString() {\n    let ordered = this.orderedItems;\n\n    let sb = new StringBuilder();\n    for (let i = 0; i < ordered.length; i++) {\n      if (i > 0) sb.Append(\", \");\n\n      let item = ordered[i].Key;\n      if (item.itemName === null) return throwNullException(\"item.itemName\");\n      sb.Append(item.itemName);\n    }\n\n    return sb.toString();\n  }\n  // casting a InkList to a Number, for somereason, actually gives a number.\n  // This messes up the type detection when creating a Value from a InkList.\n  // Returning NaN here prevents that.\n  public valueOf() {\n    return NaN;\n  }\n}\n\n/**\n * In the original C# code, `InkListItem` was defined as value type, meaning\n * that two `InkListItem` would be considered equal as long as they held the\n * same values. This doesn't hold true in Javascript, as `InkListItem` is a\n * reference type (Javascript doesn't allow the creation of custom value types).\n *\n * The key equality of Map objects is based on the \"SameValueZero\" algorithm;\n * since `InkListItem` is a value type, two keys will only be considered\n * equal if they are, in fact, the same object. As we are trying to emulate\n * the original behavior as close as possible, this will lead to unforeseen\n * side effects.\n *\n * In order to have a key equality based on value semantics, we'll convert\n * `InkListItem` to a valid string representation and use this representation\n * as a key (strings are value types in Javascript). Rather than using the\n * type `string` directly, we'll alias it to `SerializedInkListItem` and use\n * this type as the key for our Map-based `InkList`.\n *\n * Reducing `InkListItem` to a JSON representation would not be bulletproof\n * in the general case, but for our needs it works well. The major downside of\n * this method is that we will have to to reconstruct the original `InkListItem`\n * every time we'll need to access its properties.\n */\nexport type SerializedInkListItem = string;\n\n/**\n * An interface inherited by `InkListItem`, defining exposed\n * properties. It's mainly used when deserializing a `InkListItem` from its\n * key (`SerializedInkListItem`)\n */\ninterface IInkListItem {\n  readonly originName: string | null;\n  readonly itemName: string | null;\n}\nexport interface KeyValuePair<K, V> {\n  Key: K;\n  Value: V;\n}\n","export class StoryException extends Error {\n  public useEndLineNumber: boolean;\n  public message: string;\n  public name: string;\n\n  constructor(message: string) {\n    super(message);\n    this.useEndLineNumber = false;\n    this.message = message;\n    this.name = \"StoryException\";\n  }\n}\n","/**\n * This interface normalize the `TryGet` behavior found in the original\n * C# project. Any `TryGet` method will return a object conforming to this\n * interface.\n *\n * The original function returns a boolean and has a second parameter called\n * item that is an `out`. Both are needed and we can't just return the item\n * because it'll always be truthy. Instead, we return an object containing\n * whether the result exists (`exists`) and the result itself (`result`).\n *\n * For instance a `TryGet` prototype would look like this:\n```\nTryGetItemWithValue(val: number, item: InkListItem): TryGetResult<InkListItem>{\n```\n *\n * On the other hand, dealing with the result can be done in the following way:\n```\nvar item = item.TryGetItemWithValue(intVal, InkListItem.Null);\nif (item.exists) {\n\tconsole.log(item.result)\n}\n```\n *\n */\nexport interface TryGetResult<T> {\n  result: T;\n  exists: boolean;\n}\n\nexport function tryGetValueFromMap<K, V>(\n  map: Map<K, V> | null,\n  key: K,\n  /* out */ value: V\n): TryGetResult<V> {\n  if (map === null) {\n    return { result: value, exists: false };\n  }\n\n  let val = map.get(key);\n\n  if (typeof val === \"undefined\") {\n    return { result: value, exists: false };\n  } else {\n    return { result: val, exists: true };\n  }\n}\n\nexport function tryParseInt(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseInt(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n\nexport function tryParseFloat(\n  value: any,\n  /* out */ defaultValue: number = 0\n): TryGetResult<number> {\n  let val = parseFloat(value);\n\n  if (!Number.isNaN(val)) {\n    return { result: val, exists: true };\n  } else {\n    return { result: defaultValue, exists: false };\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class SearchResult {\n  public obj: InkObject | null = null;\n  public approximate: boolean = false;\n\n  get correctObj() {\n    return this.approximate ? null : this.obj;\n  }\n\n  get container() {\n    return this.obj instanceof Container ? this.obj : null;\n  }\n\n  public copy() {\n    let searchResult = new SearchResult();\n    searchResult.obj = this.obj;\n    searchResult.approximate = this.approximate;\n\n    return searchResult;\n  }\n}\n","import { StringValue } from \"./Value\";\nimport { throwNullException } from \"./NullException\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { INamedContent } from \"./INamedContent\";\nimport { InkObject } from \"./Object\";\nimport { SearchResult } from \"./SearchResult\";\nimport { Path } from \"./Path\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { asINamedContentOrNull, asOrNull, asOrThrows } from \"./TypeAssertion\";\n\nexport class Container extends InkObject implements INamedContent {\n  public name: string | null = null;\n\n  public _content: InkObject[] = [];\n  public namedContent: Map<string, INamedContent> = new Map();\n\n  public visitsShouldBeCounted: boolean = false;\n  public turnIndexShouldBeCounted: boolean = false;\n  public countingAtStartOnly: boolean = false;\n\n  public _pathToFirstLeafContent: Path | null = null;\n\n  get hasValidName() {\n    return this.name != null && this.name.length > 0;\n  }\n  get content() {\n    return this._content;\n  }\n  set content(value: InkObject[]) {\n    this.AddContent(value);\n  }\n  get namedOnlyContent() {\n    let namedOnlyContentDict: Map<string, InkObject> | null = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      let inkObject = asOrThrows(value, InkObject);\n      namedOnlyContentDict.set(key, inkObject);\n    }\n\n    for (let c of this.content) {\n      let named = asINamedContentOrNull(c);\n      if (named != null && named.hasValidName) {\n        namedOnlyContentDict.delete(named.name!);\n      }\n    }\n\n    if (namedOnlyContentDict.size == 0) namedOnlyContentDict = null;\n\n    return namedOnlyContentDict;\n  }\n  set namedOnlyContent(value: Map<string, InkObject> | null) {\n    let existingNamedOnly = this.namedOnlyContent;\n    if (existingNamedOnly != null) {\n      for (let [key] of existingNamedOnly) {\n        this.namedContent.delete(key);\n      }\n    }\n\n    if (value == null) return;\n\n    for (let [, val] of value) {\n      let named = asINamedContentOrNull(val);\n      if (named != null) this.AddToNamedContentOnly(named);\n    }\n  }\n  get countFlags(): number {\n    let flags: Container.CountFlags = 0;\n    if (this.visitsShouldBeCounted) flags |= Container.CountFlags.Visits;\n    if (this.turnIndexShouldBeCounted) flags |= Container.CountFlags.Turns;\n    if (this.countingAtStartOnly) flags |= Container.CountFlags.CountStartOnly;\n\n    if (flags == Container.CountFlags.CountStartOnly) {\n      flags = 0;\n    }\n\n    return flags;\n  }\n  set countFlags(value: number) {\n    let flag: Container.CountFlags = value;\n    if ((flag & Container.CountFlags.Visits) > 0)\n      this.visitsShouldBeCounted = true;\n    if ((flag & Container.CountFlags.Turns) > 0)\n      this.turnIndexShouldBeCounted = true;\n    if ((flag & Container.CountFlags.CountStartOnly) > 0)\n      this.countingAtStartOnly = true;\n  }\n  get pathToFirstLeafContent() {\n    if (this._pathToFirstLeafContent == null)\n      this._pathToFirstLeafContent = this.path.PathByAppendingPath(\n        this.internalPathToFirstLeafContent\n      );\n\n    return this._pathToFirstLeafContent;\n  }\n  get internalPathToFirstLeafContent() {\n    let components: Path.Component[] = [];\n    let container: Container = this;\n    while (container instanceof Container) {\n      if (container.content.length > 0) {\n        components.push(new Path.Component(0));\n        container = container.content[0] as Container;\n      }\n    }\n    return new Path(components);\n  }\n\n  public AddContent(contentObjOrList: InkObject | InkObject[]) {\n    if (contentObjOrList instanceof Array) {\n      let contentList = contentObjOrList as InkObject[];\n\n      for (let c of contentList) {\n        this.AddContent(c);\n      }\n    } else {\n      let contentObj = contentObjOrList as InkObject;\n\n      this._content.push(contentObj);\n\n      if (contentObj.parent) {\n        throw new Error(\"content is already in \" + contentObj.parent);\n      }\n\n      contentObj.parent = this;\n\n      this.TryAddNamedContent(contentObj);\n    }\n  }\n  public TryAddNamedContent(contentObj: InkObject) {\n    let namedContentObj = asINamedContentOrNull(contentObj);\n    if (namedContentObj != null && namedContentObj.hasValidName) {\n      this.AddToNamedContentOnly(namedContentObj);\n    }\n  }\n  public AddToNamedContentOnly(namedContentObj: INamedContent) {\n    Debug.AssertType(\n      namedContentObj,\n      InkObject,\n      \"Can only add Runtime.Objects to a Runtime.Container\"\n    );\n    let runtimeObj = asOrThrows(namedContentObj, InkObject);\n    runtimeObj.parent = this;\n\n    if (namedContentObj.name === null)\n      return throwNullException(\"namedContentObj.name\");\n    this.namedContent.set(namedContentObj.name!, namedContentObj);\n  }\n  public ContentAtPath(\n    path: Path,\n    partialPathStart: number = 0,\n    partialPathLength: number = -1\n  ) {\n    if (partialPathLength == -1) partialPathLength = path.length;\n\n    let result = new SearchResult();\n    result.approximate = false;\n\n    let currentContainer: Container | null = this;\n    let currentObj: InkObject = this;\n\n    for (let i = partialPathStart; i < partialPathLength; ++i) {\n      let comp = path.GetComponent(i);\n      if (currentContainer == null) {\n        result.approximate = true;\n        break;\n      }\n\n      let foundObj: InkObject | null =\n        currentContainer.ContentWithPathComponent(comp);\n\n      // Couldn't resolve entire path?\n      if (foundObj == null) {\n        result.approximate = true;\n        break;\n      }\n\n      // Are we about to loop into another container?\n      // Is the object a container as expected? It might\n      // no longer be if the content has shuffled around, so what\n      // was originally a container no longer is.\n      const nextContainer: Container | null = asOrNull(foundObj, Container);\n      if (i < partialPathLength - 1 && nextContainer == null) {\n        result.approximate = true;\n        break;\n      }\n\n      currentObj = foundObj;\n      currentContainer = nextContainer;\n    }\n\n    result.obj = currentObj;\n\n    return result;\n  }\n  public InsertContent(contentObj: InkObject, index: number) {\n    this.content.splice(index, 0, contentObj);\n\n    if (contentObj.parent) {\n      throw new Error(\"content is already in \" + contentObj.parent);\n    }\n\n    contentObj.parent = this;\n\n    this.TryAddNamedContent(contentObj);\n  }\n  public AddContentsOfContainer(otherContainer: Container) {\n    this.content.push(...otherContainer.content);\n\n    for (let obj of otherContainer.content) {\n      obj.parent = this;\n      this.TryAddNamedContent(obj);\n    }\n  }\n  public ContentWithPathComponent(component: Path.Component): InkObject | null {\n    if (component.isIndex) {\n      if (component.index >= 0 && component.index < this.content.length) {\n        return this.content[component.index];\n      } else {\n        return null;\n      }\n    } else if (component.isParent) {\n      return this.parent;\n    } else {\n      if (component.name === null) {\n        return throwNullException(\"component.name\");\n      }\n      let foundContent = tryGetValueFromMap(\n        this.namedContent,\n        component.name,\n        null\n      );\n      if (foundContent.exists) {\n        return asOrThrows(foundContent.result, InkObject);\n      } else {\n        return null;\n      }\n    }\n  }\n  public BuildStringOfHierarchy(): string;\n  public BuildStringOfHierarchy(\n    sb: StringBuilder,\n    indentation: number,\n    pointedObj: InkObject | null\n  ): string;\n  public BuildStringOfHierarchy() {\n    let sb: StringBuilder;\n    if (arguments.length == 0) {\n      sb = new StringBuilder();\n      this.BuildStringOfHierarchy(sb, 0, null);\n      return sb.toString();\n    }\n\n    sb = arguments[0] as StringBuilder;\n    let indentation = arguments[1] as number;\n    let pointedObj = arguments[2] as InkObject | null;\n\n    function appendIndentation() {\n      const spacesPerIndent = 4; // Truly const in the original code\n      for (let i = 0; i < spacesPerIndent * indentation; ++i) {\n        sb.Append(\" \");\n      }\n    }\n\n    appendIndentation();\n    sb.Append(\"[\");\n\n    if (this.hasValidName) {\n      sb.AppendFormat(\" ({0})\", this.name);\n    }\n\n    if (this == pointedObj) {\n      sb.Append(\"  <---\");\n    }\n\n    sb.AppendLine();\n\n    indentation++;\n\n    for (let i = 0; i < this.content.length; ++i) {\n      let obj = this.content[i];\n\n      if (obj instanceof Container) {\n        let container = obj as Container;\n\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n      } else {\n        appendIndentation();\n        if (obj instanceof StringValue) {\n          sb.Append('\"');\n          sb.Append(obj.toString().replace(\"\\n\", \"\\\\n\"));\n          sb.Append('\"');\n        } else {\n          sb.Append(obj.toString());\n        }\n      }\n\n      if (i != this.content.length - 1) {\n        sb.Append(\",\");\n      }\n\n      if (!(obj instanceof Container) && obj == pointedObj) {\n        sb.Append(\"  <---\");\n      }\n\n      sb.AppendLine();\n    }\n\n    let onlyNamed: Map<string, INamedContent> = new Map();\n\n    for (let [key, value] of this.namedContent) {\n      if (this.content.indexOf(asOrThrows(value, InkObject)) >= 0) {\n        continue;\n      } else {\n        onlyNamed.set(key, value);\n      }\n    }\n\n    if (onlyNamed.size > 0) {\n      appendIndentation();\n      sb.AppendLine(\"-- named: --\");\n\n      for (let [, value] of onlyNamed) {\n        Debug.AssertType(\n          value,\n          Container,\n          \"Can only print out named Containers\"\n        );\n        let container = value as Container;\n        container.BuildStringOfHierarchy(sb, indentation, pointedObj);\n        sb.AppendLine();\n      }\n    }\n\n    indentation--;\n\n    appendIndentation();\n    sb.Append(\"]\");\n  }\n}\n\nexport namespace Container {\n  export enum CountFlags {\n    Start = 0,\n    Visits = 1,\n    Turns = 2,\n    CountStartOnly = 4,\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class ControlCommand extends InkObject {\n  private _commandType: ControlCommand.CommandType;\n\n  get commandType(): ControlCommand.CommandType {\n    return this._commandType;\n  }\n\n  constructor(\n    commandType: ControlCommand.CommandType = ControlCommand.CommandType.NotSet\n  ) {\n    super();\n    this._commandType = commandType;\n  }\n\n  public Copy() {\n    return new ControlCommand(this.commandType);\n  }\n  public static EvalStart() {\n    return new ControlCommand(ControlCommand.CommandType.EvalStart);\n  }\n  public static EvalOutput() {\n    return new ControlCommand(ControlCommand.CommandType.EvalOutput);\n  }\n  public static EvalEnd() {\n    return new ControlCommand(ControlCommand.CommandType.EvalEnd);\n  }\n  public static Duplicate() {\n    return new ControlCommand(ControlCommand.CommandType.Duplicate);\n  }\n  public static PopEvaluatedValue() {\n    return new ControlCommand(ControlCommand.CommandType.PopEvaluatedValue);\n  }\n  public static PopFunction() {\n    return new ControlCommand(ControlCommand.CommandType.PopFunction);\n  }\n  public static PopTunnel() {\n    return new ControlCommand(ControlCommand.CommandType.PopTunnel);\n  }\n  public static BeginString() {\n    return new ControlCommand(ControlCommand.CommandType.BeginString);\n  }\n  public static EndString() {\n    return new ControlCommand(ControlCommand.CommandType.EndString);\n  }\n  public static NoOp() {\n    return new ControlCommand(ControlCommand.CommandType.NoOp);\n  }\n  public static ChoiceCount() {\n    return new ControlCommand(ControlCommand.CommandType.ChoiceCount);\n  }\n  public static Turns() {\n    return new ControlCommand(ControlCommand.CommandType.Turns);\n  }\n  public static TurnsSince() {\n    return new ControlCommand(ControlCommand.CommandType.TurnsSince);\n  }\n  public static ReadCount() {\n    return new ControlCommand(ControlCommand.CommandType.ReadCount);\n  }\n  public static Random() {\n    return new ControlCommand(ControlCommand.CommandType.Random);\n  }\n  public static SeedRandom() {\n    return new ControlCommand(ControlCommand.CommandType.SeedRandom);\n  }\n  public static VisitIndex() {\n    return new ControlCommand(ControlCommand.CommandType.VisitIndex);\n  }\n  public static SequenceShuffleIndex() {\n    return new ControlCommand(ControlCommand.CommandType.SequenceShuffleIndex);\n  }\n  public static StartThread() {\n    return new ControlCommand(ControlCommand.CommandType.StartThread);\n  }\n  public static Done() {\n    return new ControlCommand(ControlCommand.CommandType.Done);\n  }\n  public static End() {\n    return new ControlCommand(ControlCommand.CommandType.End);\n  }\n  public static ListFromInt() {\n    return new ControlCommand(ControlCommand.CommandType.ListFromInt);\n  }\n  public static ListRange() {\n    return new ControlCommand(ControlCommand.CommandType.ListRange);\n  }\n  public static ListRandom() {\n    return new ControlCommand(ControlCommand.CommandType.ListRandom);\n  }\n  public static BeginTag() {\n    return new ControlCommand(ControlCommand.CommandType.BeginTag);\n  }\n  public static EndTag() {\n    return new ControlCommand(ControlCommand.CommandType.EndTag);\n  }\n  public toString() {\n    return \"ControlCommand \" + this.commandType.toString();\n  }\n}\n\nexport namespace ControlCommand {\n  export enum CommandType {\n    NotSet = -1,\n    EvalStart, // 0\n    EvalOutput, // 1\n    EvalEnd, // 2\n    Duplicate, // 3\n    PopEvaluatedValue, // 4\n    PopFunction, // 5\n    PopTunnel, // 6\n    BeginString, // 7\n    EndString, // 8\n    NoOp, // 9\n    ChoiceCount, // 10\n    Turns, // 11\n    TurnsSince, // 12\n    ReadCount, // 13\n    Random, // 14\n    SeedRandom, // 15\n    VisitIndex, // 16\n    SequenceShuffleIndex, // 17\n    StartThread, // 18\n    Done, // 19\n    End, // 20\n    ListFromInt, // 21\n    ListRange, // 22\n    ListRandom, // 23\n    BeginTag, // 24\n    EndTag, // 25\n\n    TOTAL_VALUES,\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\n\nexport abstract class Expression extends ParsedObject {\n  public abstract GenerateIntoContainer: (container: RuntimeContainer) => void;\n\n  private _prototypeRuntimeConstantExpression: RuntimeContainer | null = null;\n  public outputWhenComplete: boolean = false;\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n\n    // Tell Runtime to start evaluating the following content as an expression\n    container.AddContent(RuntimeControlCommand.EvalStart());\n\n    this.GenerateIntoContainer(container);\n\n    // Tell Runtime to output the result of the expression evaluation to the output stream\n    if (this.outputWhenComplete) {\n      container.AddContent(RuntimeControlCommand.EvalOutput());\n    }\n\n    // Tell Runtime to stop evaluating the content as an expression\n    container.AddContent(RuntimeControlCommand.EvalEnd());\n\n    return container;\n  };\n\n  // When generating the value of a constant expression,\n  // we can't just keep generating the same constant expression into\n  // different places where the constant value is referenced, since then\n  // the same runtime objects would be used in multiple places, which\n  // is impossible since each runtime object should have one parent.\n  // Instead, we generate a prototype of the runtime object(s), then\n  // copy them each time they're used.\n  public readonly GenerateConstantIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    if (this._prototypeRuntimeConstantExpression === null) {\n      this._prototypeRuntimeConstantExpression = new RuntimeContainer();\n      this.GenerateIntoContainer(this._prototypeRuntimeConstantExpression);\n    }\n\n    for (const runtimeObj of this._prototypeRuntimeConstantExpression.content) {\n      const copy = runtimeObj.Copy();\n      if (copy) {\n        container.AddContent(copy);\n      }\n    }\n  };\n\n  get typeName(): string {\n    return \"Expression\";\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public Equals(obj: ParsedObject): boolean {\n    return false;\n  }\n\n  public readonly toString = () => \"No string value in JavaScript.\";\n}\n","import { InkObject } from \"./Object\";\n\nexport class Void extends InkObject {\n  public toString() {\n    return \"Void\";\n  }\n}\n","import { Value, ValueType, IntValue, ListValue, BoolValue } from \"./Value\";\nimport { StoryException } from \"./StoryException\";\nimport { Void } from \"./Void\";\nimport { Path } from \"./Path\";\nimport { InkList, InkListItem } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull, asOrThrows, asBooleanOrThrows } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\n\ntype BinaryOp<T> = (left: T, right: T) => any;\ntype UnaryOp<T> = (val: T) => any;\n\nexport class NativeFunctionCall extends InkObject {\n  public static readonly Add: string = \"+\";\n  public static readonly Subtract: string = \"-\";\n  public static readonly Divide: string = \"/\";\n  public static readonly Multiply: string = \"*\";\n  public static readonly Mod: string = \"%\";\n  public static readonly Negate: string = \"_\";\n  public static readonly Equal: string = \"==\";\n  public static readonly Greater: string = \">\";\n  public static readonly Less: string = \"<\";\n  public static readonly GreaterThanOrEquals: string = \">=\";\n  public static readonly LessThanOrEquals: string = \"<=\";\n  public static readonly NotEquals: string = \"!=\";\n  public static readonly Not: string = \"!\";\n  public static readonly And: string = \"&&\";\n  public static readonly Or: string = \"||\";\n  public static readonly Min: string = \"MIN\";\n  public static readonly Max: string = \"MAX\";\n  public static readonly Pow: string = \"POW\";\n  public static readonly Floor: string = \"FLOOR\";\n  public static readonly Ceiling: string = \"CEILING\";\n  public static readonly Int: string = \"INT\";\n  public static readonly Float: string = \"FLOAT\";\n  public static readonly Has: string = \"?\";\n  public static readonly Hasnt: string = \"!?\";\n  public static readonly Intersect: string = \"^\";\n  public static readonly ListMin: string = \"LIST_MIN\";\n  public static readonly ListMax: string = \"LIST_MAX\";\n  public static readonly All: string = \"LIST_ALL\";\n  public static readonly Count: string = \"LIST_COUNT\";\n  public static readonly ValueOfList: string = \"LIST_VALUE\";\n  public static readonly Invert: string = \"LIST_INVERT\";\n\n  public static CallWithName(functionName: string) {\n    return new NativeFunctionCall(functionName);\n  }\n\n  public static CallExistsWithName(functionName: string) {\n    this.GenerateNativeFunctionsIfNecessary();\n    return this._nativeFunctions!.get(functionName);\n  }\n\n  get name() {\n    if (this._name === null)\n      return throwNullException(\"NativeFunctionCall._name\");\n    return this._name;\n  }\n  set name(value: string) {\n    this._name = value;\n    if (!this._isPrototype) {\n      if (NativeFunctionCall._nativeFunctions === null)\n        throwNullException(\"NativeFunctionCall._nativeFunctions\");\n      else\n        this._prototype =\n          NativeFunctionCall._nativeFunctions.get(this._name) || null;\n    }\n  }\n  public _name: string | null = null;\n\n  get numberOfParameters() {\n    if (this._prototype) {\n      return this._prototype.numberOfParameters;\n    } else {\n      return this._numberOfParameters;\n    }\n  }\n  set numberOfParameters(value: number) {\n    this._numberOfParameters = value;\n  }\n  public _numberOfParameters: number = 0;\n\n  public Call(parameters: InkObject[]): InkObject | null {\n    if (this._prototype) {\n      return this._prototype.Call(parameters);\n    }\n\n    if (this.numberOfParameters != parameters.length) {\n      throw new Error(\"Unexpected number of parameters\");\n    }\n\n    let hasList = false;\n    for (let p of parameters) {\n      if (p instanceof Void)\n        throw new StoryException(\n          \"Attempting to perform \" +\n            this.name +\n            ' on a void value. Did you forget to \"return\" a value from a function you called here?'\n        );\n      if (p instanceof ListValue) hasList = true;\n    }\n\n    if (parameters.length == 2 && hasList) {\n      return this.CallBinaryListOperation(parameters);\n    }\n\n    let coercedParams = this.CoerceValuesToSingleType(parameters);\n    let coercedType = coercedParams[0].valueType;\n\n    if (coercedType == ValueType.Int) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.Float) {\n      return this.CallType<number>(coercedParams);\n    } else if (coercedType == ValueType.String) {\n      return this.CallType<string>(coercedParams);\n    } else if (coercedType == ValueType.DivertTarget) {\n      return this.CallType<Path>(coercedParams);\n    } else if (coercedType == ValueType.List) {\n      return this.CallType<InkList>(coercedParams);\n    }\n\n    return null;\n  }\n\n  public CallType<T extends { toString: () => string }>(\n    parametersOfSingleType: Array<Value<T>>\n  ) {\n    let param1 = asOrThrows(parametersOfSingleType[0], Value);\n    let valType = param1.valueType;\n\n    let val1 = param1 as Value<T>;\n\n    let paramCount = parametersOfSingleType.length;\n\n    if (paramCount == 2 || paramCount == 1) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let opForTypeObj = this._operationFuncs.get(valType);\n      if (!opForTypeObj) {\n        const key = ValueType[valType];\n        throw new StoryException(\n          \"Cannot perform operation \" + this.name + \" on \" + key\n        );\n      }\n\n      if (paramCount == 2) {\n        let param2 = asOrThrows(parametersOfSingleType[1], Value);\n\n        let val2 = param2 as Value<T>;\n\n        let opForType = opForTypeObj as BinaryOp<T>;\n\n        if (val1.value === null || val2.value === null)\n          return throwNullException(\"NativeFunctionCall.Call BinaryOp values\");\n        let resultVal = opForType(val1.value, val2.value);\n\n        return Value.Create(resultVal);\n      } else {\n        let opForType = opForTypeObj as UnaryOp<T>;\n\n        if (val1.value === null)\n          return throwNullException(\"NativeFunctionCall.Call UnaryOp value\");\n        let resultVal = opForType(val1.value);\n\n        // This code is different from upstream. Since JavaScript treats\n        // integers and floats as the same numbers, it's impossible\n        // to force an number to be either an integer or a float.\n        //\n        // It can be useful to force a specific number type\n        // (especially for divisions), so the result of INT() & FLOAT()\n        // is coerced to the the proper value type.\n        //\n        // Note that we also force all other unary operation to\n        // return the same value type, although this is only\n        // meaningful for numbers. See `Value.Create`.\n        if (this.name === NativeFunctionCall.Int) {\n          return Value.Create(resultVal, ValueType.Int);\n        } else if (this.name === NativeFunctionCall.Float) {\n          return Value.Create(resultVal, ValueType.Float);\n        } else {\n          return Value.Create(resultVal, param1.valueType);\n        }\n      }\n    } else {\n      throw new Error(\n        \"Unexpected number of parameters to NativeFunctionCall: \" +\n          parametersOfSingleType.length\n      );\n    }\n  }\n\n  public CallBinaryListOperation(parameters: InkObject[]) {\n    if (\n      (this.name == \"+\" || this.name == \"-\") &&\n      parameters[0] instanceof ListValue &&\n      parameters[1] instanceof IntValue\n    )\n      return this.CallListIncrementOperation(parameters);\n\n    let v1 = asOrThrows(parameters[0], Value);\n    let v2 = asOrThrows(parameters[1], Value);\n\n    if (\n      (this.name == \"&&\" || this.name == \"||\") &&\n      (v1.valueType != ValueType.List || v2.valueType != ValueType.List)\n    ) {\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let op = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n      if (op === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallBinaryListOperation op\"\n        );\n      let result = asBooleanOrThrows(\n        op(v1.isTruthy ? 1 : 0, v2.isTruthy ? 1 : 0)\n      );\n      return new BoolValue(result);\n    }\n\n    if (v1.valueType == ValueType.List && v2.valueType == ValueType.List)\n      return this.CallType<InkList>([v1, v2]);\n\n    throw new StoryException(\n      \"Can not call use \" +\n        this.name +\n        \" operation on \" +\n        ValueType[v1.valueType] +\n        \" and \" +\n        ValueType[v2.valueType]\n    );\n  }\n\n  public CallListIncrementOperation(listIntParams: InkObject[]) {\n    let listVal = asOrThrows(listIntParams[0], ListValue);\n    let intVal = asOrThrows(listIntParams[1], IntValue);\n\n    let resultInkList = new InkList();\n\n    if (listVal.value === null)\n      return throwNullException(\n        \"NativeFunctionCall.CallListIncrementOperation listVal.value\"\n      );\n    for (let [listItemKey, listItemValue] of listVal.value) {\n      let listItem = InkListItem.fromSerializedKey(listItemKey);\n\n      if (this._operationFuncs === null)\n        return throwNullException(\"NativeFunctionCall._operationFuncs\");\n      let intOp = this._operationFuncs.get(ValueType.Int) as BinaryOp<number>;\n\n      if (intVal.value === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation intVal.value\"\n        );\n      let targetInt = intOp(listItemValue, intVal.value);\n\n      let itemOrigin = null;\n      if (listVal.value.origins === null)\n        return throwNullException(\n          \"NativeFunctionCall.CallListIncrementOperation listVal.value.origins\"\n        );\n      for (let origin of listVal.value.origins) {\n        if (origin.name == listItem.originName) {\n          itemOrigin = origin;\n          break;\n        }\n      }\n      if (itemOrigin != null) {\n        let incrementedItem = itemOrigin.TryGetItemWithValue(\n          targetInt,\n          InkListItem.Null\n        );\n        if (incrementedItem.exists)\n          resultInkList.Add(incrementedItem.result, targetInt);\n      }\n    }\n\n    return new ListValue(resultInkList);\n  }\n\n  public CoerceValuesToSingleType(parametersIn: InkObject[]) {\n    let valType = ValueType.Int;\n\n    let specialCaseList: null | ListValue = null;\n\n    for (let obj of parametersIn) {\n      let val = asOrThrows(obj, Value);\n      if (val.valueType > valType) {\n        valType = val.valueType;\n      }\n\n      if (val.valueType == ValueType.List) {\n        specialCaseList = asOrNull(val, ListValue);\n      }\n    }\n\n    let parametersOut = [];\n\n    if (ValueType[valType] == ValueType[ValueType.List]) {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        if (val.valueType == ValueType.List) {\n          parametersOut.push(val);\n        } else if (val.valueType == ValueType.Int) {\n          let intVal = parseInt(val.valueObject);\n\n          specialCaseList = asOrThrows(specialCaseList, ListValue);\n          if (specialCaseList.value === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType specialCaseList.value\"\n            );\n          let list = specialCaseList.value.originOfMaxItem;\n\n          if (list === null)\n            return throwNullException(\n              \"NativeFunctionCall.CoerceValuesToSingleType list\"\n            );\n          let item = list.TryGetItemWithValue(intVal, InkListItem.Null);\n          if (item.exists) {\n            let castedValue = new ListValue(item.result, intVal);\n            parametersOut.push(castedValue);\n          } else\n            throw new StoryException(\n              \"Could not find List item with the value \" +\n                intVal +\n                \" in \" +\n                list.name\n            );\n        } else {\n          const key = ValueType[val.valueType];\n          throw new StoryException(\n            \"Cannot mix Lists and \" + key + \" values in this operation\"\n          );\n        }\n      }\n    } else {\n      for (let inkObjectVal of parametersIn) {\n        let val = asOrThrows(inkObjectVal, Value);\n        let castedValue = val.Cast(valType);\n        parametersOut.push(castedValue);\n      }\n    }\n\n    return parametersOut;\n  }\n\n  constructor(name: string);\n  constructor(name: string, numberOfParameters: number);\n  constructor();\n  constructor() {\n    super();\n\n    if (arguments.length === 0) {\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n    } else if (arguments.length === 1) {\n      let name = arguments[0];\n      NativeFunctionCall.GenerateNativeFunctionsIfNecessary();\n      this.name = name;\n    } else if (arguments.length === 2) {\n      let name = arguments[0];\n      let numberOfParameters = arguments[1];\n\n      this._isPrototype = true;\n      this.name = name;\n      this.numberOfParameters = numberOfParameters;\n    }\n  }\n\n  public static Identity<T>(t: T): any {\n    return t;\n  }\n\n  public static GenerateNativeFunctionsIfNecessary() {\n    if (this._nativeFunctions == null) {\n      this._nativeFunctions = new Map();\n\n      // Int operations\n      this.AddIntBinaryOp(this.Add, (x, y) => x + y);\n      this.AddIntBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddIntBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddIntBinaryOp(this.Divide, (x, y) => Math.floor(x / y));\n      this.AddIntBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddIntUnaryOp(this.Negate, (x) => -x);\n\n      this.AddIntBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddIntBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddIntBinaryOp(this.Less, (x, y) => x < y);\n      this.AddIntBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddIntBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddIntBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddIntUnaryOp(this.Not, (x) => x == 0);\n\n      this.AddIntBinaryOp(this.And, (x, y) => x != 0 && y != 0);\n      this.AddIntBinaryOp(this.Or, (x, y) => x != 0 || y != 0);\n\n      this.AddIntBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddIntBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddIntBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddIntUnaryOp(this.Floor, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Ceiling, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Int, NativeFunctionCall.Identity);\n      this.AddIntUnaryOp(this.Float, (x) => x);\n\n      // Float operations\n      this.AddFloatBinaryOp(this.Add, (x, y) => x + y);\n      this.AddFloatBinaryOp(this.Subtract, (x, y) => x - y);\n      this.AddFloatBinaryOp(this.Multiply, (x, y) => x * y);\n      this.AddFloatBinaryOp(this.Divide, (x, y) => x / y);\n      this.AddFloatBinaryOp(this.Mod, (x, y) => x % y);\n      this.AddFloatUnaryOp(this.Negate, (x) => -x);\n\n      this.AddFloatBinaryOp(this.Equal, (x, y) => x == y);\n      this.AddFloatBinaryOp(this.Greater, (x, y) => x > y);\n      this.AddFloatBinaryOp(this.Less, (x, y) => x < y);\n      this.AddFloatBinaryOp(this.GreaterThanOrEquals, (x, y) => x >= y);\n      this.AddFloatBinaryOp(this.LessThanOrEquals, (x, y) => x <= y);\n      this.AddFloatBinaryOp(this.NotEquals, (x, y) => x != y);\n      this.AddFloatUnaryOp(this.Not, (x) => x == 0.0);\n\n      this.AddFloatBinaryOp(this.And, (x, y) => x != 0.0 && y != 0.0);\n      this.AddFloatBinaryOp(this.Or, (x, y) => x != 0.0 || y != 0.0);\n\n      this.AddFloatBinaryOp(this.Max, (x, y) => Math.max(x, y));\n      this.AddFloatBinaryOp(this.Min, (x, y) => Math.min(x, y));\n\n      this.AddFloatBinaryOp(this.Pow, (x, y) => Math.pow(x, y));\n      this.AddFloatUnaryOp(this.Floor, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Ceiling, (x) => Math.ceil(x));\n      this.AddFloatUnaryOp(this.Int, (x) => Math.floor(x));\n      this.AddFloatUnaryOp(this.Float, NativeFunctionCall.Identity);\n\n      // String operations\n      this.AddStringBinaryOp(this.Add, (x, y) => x + y); // concat\n      this.AddStringBinaryOp(this.Equal, (x, y) => x === y);\n      this.AddStringBinaryOp(this.NotEquals, (x, y) => !(x === y));\n      this.AddStringBinaryOp(this.Has, (x, y) => x.includes(y));\n      this.AddStringBinaryOp(this.Hasnt, (x, y) => !x.includes(y));\n\n      this.AddListBinaryOp(this.Add, (x, y) => x.Union(y));\n      this.AddListBinaryOp(this.Subtract, (x, y) => x.Without(y));\n      this.AddListBinaryOp(this.Has, (x, y) => x.Contains(y));\n      this.AddListBinaryOp(this.Hasnt, (x, y) => !x.Contains(y));\n      this.AddListBinaryOp(this.Intersect, (x, y) => x.Intersect(y));\n\n      this.AddListBinaryOp(this.Equal, (x, y) => x.Equals(y));\n      this.AddListBinaryOp(this.Greater, (x, y) => x.GreaterThan(y));\n      this.AddListBinaryOp(this.Less, (x, y) => x.LessThan(y));\n      this.AddListBinaryOp(this.GreaterThanOrEquals, (x, y) =>\n        x.GreaterThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.LessThanOrEquals, (x, y) =>\n        x.LessThanOrEquals(y)\n      );\n      this.AddListBinaryOp(this.NotEquals, (x, y) => !x.Equals(y));\n\n      this.AddListBinaryOp(this.And, (x, y) => x.Count > 0 && y.Count > 0);\n      this.AddListBinaryOp(this.Or, (x, y) => x.Count > 0 || y.Count > 0);\n\n      this.AddListUnaryOp(this.Not, (x) => (x.Count == 0 ? 1 : 0));\n\n      this.AddListUnaryOp(this.Invert, (x) => x.inverse);\n      this.AddListUnaryOp(this.All, (x) => x.all);\n      this.AddListUnaryOp(this.ListMin, (x) => x.MinAsList());\n      this.AddListUnaryOp(this.ListMax, (x) => x.MaxAsList());\n      this.AddListUnaryOp(this.Count, (x) => x.Count);\n      this.AddListUnaryOp(this.ValueOfList, (x) => x.maxItem.Value);\n\n      let divertTargetsEqual = (d1: Path, d2: Path) => d1.Equals(d2);\n      let divertTargetsNotEqual = (d1: Path, d2: Path) => !d1.Equals(d2);\n      this.AddOpToNativeFunc(\n        this.Equal,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsEqual\n      );\n      this.AddOpToNativeFunc(\n        this.NotEquals,\n        2,\n        ValueType.DivertTarget,\n        divertTargetsNotEqual\n      );\n    }\n  }\n\n  public AddOpFuncForType(\n    valType: ValueType,\n    op: UnaryOp<number | InkList> | BinaryOp<number | string | InkList | Path>\n  ): void {\n    if (this._operationFuncs == null) {\n      this._operationFuncs = new Map();\n    }\n\n    this._operationFuncs.set(valType, op);\n  }\n\n  public static AddOpToNativeFunc(\n    name: string,\n    args: number,\n    valType: ValueType,\n    op: UnaryOp<any> | BinaryOp<any>\n  ): void {\n    if (this._nativeFunctions === null)\n      return throwNullException(\"NativeFunctionCall._nativeFunctions\");\n    let nativeFunc = this._nativeFunctions.get(name);\n    if (!nativeFunc) {\n      nativeFunc = new NativeFunctionCall(name, args);\n      this._nativeFunctions.set(name, nativeFunc);\n    }\n\n    nativeFunc.AddOpFuncForType(valType, op);\n  }\n\n  public static AddIntBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Int, op);\n  }\n  public static AddIntUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Int, op);\n  }\n\n  public static AddFloatBinaryOp(name: string, op: BinaryOp<number>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.Float, op);\n  }\n  public static AddFloatUnaryOp(name: string, op: UnaryOp<number>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.Float, op);\n  }\n\n  public static AddStringBinaryOp(name: string, op: BinaryOp<string>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.String, op);\n  }\n\n  public static AddListBinaryOp(name: string, op: BinaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 2, ValueType.List, op);\n  }\n  public static AddListUnaryOp(name: string, op: UnaryOp<InkList>) {\n    this.AddOpToNativeFunc(name, 1, ValueType.List, op);\n  }\n\n  public toString() {\n    return 'Native \"' + this.name + '\"';\n  }\n\n  public _prototype: NativeFunctionCall | null = null;\n  public _isPrototype: boolean = false;\n  public _operationFuncs: Map<ValueType, BinaryOp<any> | UnaryOp<any>> | null =\n    null;\n  public static _nativeFunctions: Map<string, NativeFunctionCall> | null = null;\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"./Expression\";\nimport { BoolValue, FloatValue, IntValue } from \"../../../../engine/Value\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\nimport { ParsedObject } from \"../Object\";\n\n// This class is named Number in the C# codebase\n// but this conflict with the built-in Number class\nexport class NumberExpression extends Expression {\n  public value: number | boolean;\n  public subtype: \"int\" | \"float\" | \"bool\";\n\n  constructor(value: number | boolean, subtype: \"int\" | \"float\" | \"bool\") {\n    super();\n\n    if (\n      (typeof value === \"number\" && !Number.isNaN(value)) ||\n      typeof value == \"boolean\"\n    ) {\n      this.value = value;\n      this.subtype = subtype;\n    } else {\n      throw new Error(\"Unexpected object type in NumberExpression.\");\n    }\n  }\n\n  get typeName(): string {\n    return \"Number\";\n  }\n\n  public isInt = (): boolean => this.subtype == \"int\";\n\n  public isFloat = (): boolean => this.subtype == \"float\";\n\n  public isBool = (): boolean => this.subtype == \"bool\";\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    if (this.isInt()) {\n      container.AddContent(new IntValue(this.value as number));\n    } else if (this.isFloat()) {\n      container.AddContent(new FloatValue(this.value as number));\n    } else if (this.isBool()) {\n      container.AddContent(new BoolValue(this.value as boolean));\n    }\n  };\n\n  public readonly toString = (): string => String(this.value);\n\n  public Equals(obj: ParsedObject): boolean {\n    const numberExpression = asOrNull(obj, NumberExpression);\n    if (!numberExpression) return false;\n\n    return (\n      numberExpression.subtype == this.subtype &&\n      numberExpression.value == this.value\n    );\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"./Expression\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { NumberExpression } from \"./NumberExpression\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class UnaryExpression extends Expression {\n  get nativeNameForOp(): string {\n    // Replace \"-\" with \"_\" to make it unique (compared to subtraction)\n    if (this.op === \"-\") {\n      return \"_\";\n    } else if (this.op === \"not\") {\n      return \"!\";\n    }\n\n    return this.op;\n  }\n\n  public innerExpression: Expression;\n\n  // Attempt to flatten inner expression immediately\n  // e.g. convert (-(5)) into (-5)\n  public static readonly WithInner = (\n    inner: Expression,\n    op: string\n  ): Expression => {\n    const innerNumber = asOrNull(inner, NumberExpression);\n\n    if (innerNumber) {\n      if (op === \"-\") {\n        if (innerNumber.isInt()) {\n          return new NumberExpression(-innerNumber.value, \"int\");\n        } else if (innerNumber.isFloat()) {\n          return new NumberExpression(-innerNumber.value, \"float\");\n        }\n      } else if (op == \"!\" || op == \"not\") {\n        if (innerNumber.isInt()) {\n          return new NumberExpression(innerNumber.value == 0, \"bool\");\n        } else if (innerNumber.isFloat()) {\n          return new NumberExpression(innerNumber.value == 0.0, \"bool\");\n        } else if (innerNumber.isBool()) {\n          return new NumberExpression(!innerNumber.value, \"bool\");\n        }\n      }\n\n      throw new Error(\"Unexpected operation or number type\");\n    }\n\n    // Normal fallback\n    const unary = new UnaryExpression(inner, op);\n\n    return unary;\n  };\n\n  constructor(\n    inner: Expression,\n    public readonly op: string\n  ) {\n    super();\n\n    this.innerExpression = this.AddContent(inner) as Expression;\n  }\n\n  get typeName(): string {\n    return \"UnaryExpression\";\n  }\n\n  public readonly GenerateIntoContainer = (container: RuntimeContainer) => {\n    this.innerExpression.GenerateIntoContainer(container);\n    container.AddContent(NativeFunctionCall.CallWithName(this.nativeNameForOp));\n  };\n\n  public readonly toString = (): string =>\n    this.nativeNameForOp + this.innerExpression;\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"./Expression\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { Story } from \"../Story\";\nimport { UnaryExpression } from \"./UnaryExpression\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class BinaryExpression extends Expression {\n  public readonly leftExpression: Expression;\n  public readonly rightExpression: Expression;\n\n  constructor(\n    left: Expression,\n    right: Expression,\n    public opName: string\n  ) {\n    super();\n\n    this.leftExpression = this.AddContent(left) as Expression;\n    this.rightExpression = this.AddContent(right) as Expression;\n\n    this.opName = opName;\n  }\n\n  get typeName(): string {\n    return \"BinaryExpression\";\n  }\n\n  public readonly GenerateIntoContainer = (container: RuntimeContainer) => {\n    this.leftExpression.GenerateIntoContainer(container);\n    this.rightExpression.GenerateIntoContainer(container);\n    this.opName = this.NativeNameForOp(this.opName);\n    container.AddContent(NativeFunctionCall.CallWithName(this.opName));\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // Check for the following case:\n    //\n    //    (not A) ? B\n    //\n    // Since this easy to accidentally do:\n    //\n    //    not A ? B\n    //\n    // when you intend:\n    //\n    //    not (A ? B)\n    if (this.NativeNameForOp(this.opName) === \"?\") {\n      const leftUnary = asOrNull(this.leftExpression, UnaryExpression);\n      if (\n        leftUnary !== null &&\n        (leftUnary.op === \"not\" || leftUnary.op === \"!\")\n      ) {\n        this.Error(\n          `Using 'not' or '!' here negates '${leftUnary.innerExpression}' rather than the result of the '?' or 'has' operator. You need to add parentheses around the (A ? B) expression.`\n        );\n      }\n    }\n  }\n\n  public readonly NativeNameForOp = (opName: string): string => {\n    if (opName === \"and\") {\n      return \"&&\";\n    } else if (opName === \"or\") {\n      return \"||\";\n    } else if (opName === \"mod\") {\n      return \"%\";\n    } else if (opName === \"has\") {\n      return \"?\";\n    } else if (opName === \"hasnt\") {\n      return \"!?\";\n    }\n\n    return opName;\n  };\n\n  public readonly toString = (): string =>\n    `(${this.leftExpression} ${this.opName} ${this.rightExpression})`;\n}\n","export class CharacterSet {\n  public static readonly FromRange = (\n    start: string,\n    end: string\n  ): CharacterSet => new CharacterSet().AddRange(start, end);\n\n  public set: Set<string> = new Set<string>();\n\n  constructor(arg?: string | string[] | CharacterSet) {\n    if (arg) {\n      this.AddCharacters(arg);\n    }\n  }\n\n  public readonly Add = (arg: string) => this.set.add(arg);\n\n  public readonly AddRange = (start: string, end: string): CharacterSet => {\n    for (let c = start.charCodeAt(0); c <= end.charCodeAt(0); ++c) {\n      this.Add(String.fromCharCode(c));\n    }\n\n    return this;\n  };\n\n  public readonly AddCharacters = (\n    chars: string | string[] | CharacterSet\n  ): CharacterSet => {\n    if (typeof chars === \"string\" || Array.isArray(chars)) {\n      for (const c of chars) {\n        this.Add(c);\n      }\n    } else {\n      for (const c of chars.set) {\n        this.Add(c);\n      }\n    }\n\n    return this;\n  };\n}\n","import { CharacterSet } from \"./CharacterSet\";\n\n/// <summary>\n/// A class representing a character range. Allows for lazy-loading a corresponding <see cref=\"CharacterSet\">character set</see>.\n/// </summary>\nexport class CharacterRange {\n  public static Define = (\n    start: string,\n    end: string,\n    excludes: string[] | CharacterSet = []\n  ): CharacterRange => new CharacterRange(start, end, excludes);\n\n  private _correspondingCharSet: CharacterSet = new CharacterSet();\n  private _excludes = new Set<string>();\n\n  constructor(\n    private _start: string,\n    private _end: string,\n    excludes: string[] | CharacterSet = []\n  ) {\n    if (excludes instanceof CharacterSet) {\n      this._excludes = excludes.set;\n    } else {\n      for (const item of excludes) {\n        this._excludes.add(item);\n      }\n    }\n  }\n\n  get start(): string {\n    return this._start;\n  }\n\n  get end(): string {\n    return this._end;\n  }\n\n  /// <summary>\n  /// Returns a <see cref=\"CharacterSet\">character set</see> instance corresponding to the character range\n  /// represented by the current instance.\n  /// </summary>\n  /// <remarks>\n  /// The internal character set is created once and cached in memory.\n  /// </remarks>\n  /// <returns>The char set.</returns>\n  public readonly ToCharacterSet = (): CharacterSet => {\n    if (this._correspondingCharSet.set.size === 0) {\n      for (\n        let ii = this.start.charCodeAt(0), c;\n        ii <= this.end.charCodeAt(0);\n        ii += 1\n      ) {\n        c = String.fromCharCode(ii);\n        if (!this._excludes.has(c)) {\n          this._correspondingCharSet.AddCharacters(c);\n        }\n      }\n    }\n\n    return this._correspondingCharSet;\n  };\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ChoicePoint extends InkObject {\n  public _pathOnChoice: Path | null = null;\n  public hasCondition: boolean = false;\n  public hasStartContent: boolean = false;\n  public hasChoiceOnlyContent: boolean = false;\n  public isInvisibleDefault: boolean = false;\n  public onceOnly: boolean = true;\n\n  constructor(onceOnly: boolean = true) {\n    super();\n    this.onceOnly = onceOnly;\n  }\n  get pathOnChoice(): Path | null {\n    if (this._pathOnChoice != null && this._pathOnChoice.isRelative) {\n      let choiceTargetObj = this.choiceTarget;\n      if (choiceTargetObj) {\n        this._pathOnChoice = choiceTargetObj.path;\n      }\n    }\n    return this._pathOnChoice;\n  }\n  set pathOnChoice(value: Path | null) {\n    this._pathOnChoice = value;\n  }\n  get choiceTarget(): Container | null {\n    if (this._pathOnChoice === null)\n      return throwNullException(\"ChoicePoint._pathOnChoice\");\n    return this.ResolvePath(this._pathOnChoice).container;\n  }\n  get pathStringOnChoice(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    return this.CompactPathString(this.pathOnChoice);\n  }\n  set pathStringOnChoice(value: string) {\n    this.pathOnChoice = new Path(value);\n  }\n  get flags(): number {\n    let flags = 0;\n    if (this.hasCondition) flags |= 1;\n    if (this.hasStartContent) flags |= 2;\n    if (this.hasChoiceOnlyContent) flags |= 4;\n    if (this.isInvisibleDefault) flags |= 8;\n    if (this.onceOnly) flags |= 16;\n    return flags;\n  }\n  set flags(value: number) {\n    this.hasCondition = (value & 1) > 0;\n    this.hasStartContent = (value & 2) > 0;\n    this.hasChoiceOnlyContent = (value & 4) > 0;\n    this.isInvisibleDefault = (value & 8) > 0;\n    this.onceOnly = (value & 16) > 0;\n  }\n  public toString(): string {\n    if (this.pathOnChoice === null)\n      return throwNullException(\"ChoicePoint.pathOnChoice\");\n    // int? targetLineNum = DebugLineNumberOfPath (pathOnChoice);\n    let targetLineNum = null;\n    let targetString = this.pathOnChoice.toString();\n\n    if (targetLineNum != null) {\n      targetString = \" line \" + targetLineNum + \"(\" + targetString + \")\";\n    }\n\n    return \"Choice: -> \" + targetString;\n  }\n}\n","import { Path } from \"./Path\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\n\nexport class Pointer {\n  public container: Container | null = null;\n  public index: number = -1;\n\n  constructor();\n  constructor(container: Container | null, index: number);\n  constructor() {\n    if (arguments.length === 2) {\n      this.container = arguments[0];\n      this.index = arguments[1];\n    }\n  }\n\n  public Resolve(): InkObject | null {\n    if (this.index < 0) return this.container;\n    if (this.container == null) return null;\n    if (this.container.content.length == 0) return this.container;\n    if (this.index >= this.container.content.length) return null;\n\n    return this.container.content[this.index];\n  }\n\n  get isNull(): boolean {\n    return this.container == null;\n  }\n\n  get path(): Path | null {\n    if (this.isNull) return null;\n\n    if (this.index >= 0)\n      return this.container!.path.PathByAppendingComponent(\n        new Path.Component(this.index)\n      );\n    else return this.container!.path;\n  }\n\n  public toString(): string {\n    if (!this.container) return \"Ink Pointer (null)\";\n\n    return (\n      \"Ink Pointer -> \" +\n      this.container.path.toString() +\n      \" -- index \" +\n      this.index\n    );\n  }\n\n  // This method does not exist in the original C# code, but is here to maintain the\n  // value semantics of Pointer.\n  public copy(): Pointer {\n    return new Pointer(this.container, this.index);\n  }\n\n  public static StartOf(container: Container | null): Pointer {\n    return new Pointer(container, 0);\n  }\n\n  public static get Null(): Pointer {\n    return new Pointer(null, -1);\n  }\n}\n","import { Path } from \"./Path\";\nimport { PushPopType } from \"./PushPop\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { InkObject } from \"./Object\";\nimport { Pointer } from \"./Pointer\";\nimport { Container } from \"./Container\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Divert extends InkObject {\n  get targetPath() {\n    if (this._targetPath != null && this._targetPath.isRelative) {\n      let targetObj = this.targetPointer.Resolve();\n      if (targetObj) {\n        this._targetPath = targetObj.path;\n      }\n    }\n\n    return this._targetPath;\n  }\n  set targetPath(value: Path | null) {\n    this._targetPath = value;\n    this._targetPointer = Pointer.Null;\n  }\n\n  public _targetPath: Path | null = null;\n\n  get targetPointer() {\n    if (this._targetPointer.isNull) {\n      let targetObj = this.ResolvePath(this._targetPath).obj;\n\n      if (this._targetPath === null)\n        return throwNullException(\"this._targetPath\");\n      if (this._targetPath.lastComponent === null)\n        return throwNullException(\"this._targetPath.lastComponent\");\n\n      if (this._targetPath.lastComponent.isIndex) {\n        if (targetObj === null) return throwNullException(\"targetObj\");\n        this._targetPointer.container =\n          targetObj.parent instanceof Container ? targetObj.parent : null;\n        this._targetPointer.index = this._targetPath.lastComponent.index;\n      } else {\n        this._targetPointer = Pointer.StartOf(\n          targetObj instanceof Container ? targetObj : null\n        );\n      }\n    }\n\n    return this._targetPointer.copy();\n  }\n\n  public _targetPointer: Pointer = Pointer.Null;\n\n  get targetPathString() {\n    if (this.targetPath == null) return null;\n\n    return this.CompactPathString(this.targetPath);\n  }\n  set targetPathString(value: string | null) {\n    if (value == null) {\n      this.targetPath = null;\n    } else {\n      this.targetPath = new Path(value);\n    }\n  }\n\n  public variableDivertName: string | null = null;\n  get hasVariableTarget() {\n    return this.variableDivertName != null;\n  }\n\n  public pushesToStack: boolean = false;\n  public stackPushType: PushPopType = 0;\n\n  public isExternal: boolean = false;\n  public externalArgs: number = 0;\n\n  public isConditional: boolean = false;\n\n  constructor(stackPushType?: PushPopType) {\n    super();\n    this.pushesToStack = false;\n\n    if (typeof stackPushType !== \"undefined\") {\n      this.pushesToStack = true;\n      this.stackPushType = stackPushType;\n    }\n  }\n\n  public Equals(obj: Divert | null) {\n    let otherDivert = obj;\n    if (otherDivert instanceof Divert) {\n      if (this.hasVariableTarget == otherDivert.hasVariableTarget) {\n        if (this.hasVariableTarget) {\n          return this.variableDivertName == otherDivert.variableDivertName;\n        } else {\n          if (this.targetPath === null)\n            return throwNullException(\"this.targetPath\");\n          return this.targetPath.Equals(otherDivert.targetPath);\n        }\n      }\n    }\n    return false;\n  }\n\n  public toString() {\n    if (this.hasVariableTarget) {\n      return \"Divert(variable: \" + this.variableDivertName + \")\";\n    } else if (this.targetPath == null) {\n      return \"Divert(null)\";\n    } else {\n      let sb = new StringBuilder();\n\n      let targetStr = this.targetPath.toString();\n      // int? targetLineNum = DebugLineNumberOfPath (targetPath);\n      let targetLineNum = null;\n      if (targetLineNum != null) {\n        targetStr = \"line \" + targetLineNum;\n      }\n\n      sb.Append(\"Divert\");\n\n      if (this.isConditional) sb.Append(\"?\");\n\n      if (this.pushesToStack) {\n        if (this.stackPushType == PushPopType.Function) {\n          sb.Append(\" function\");\n        } else {\n          sb.Append(\" tunnel\");\n        }\n      }\n\n      sb.Append(\" -> \");\n      sb.Append(this.targetPathString);\n\n      sb.Append(\" (\");\n      sb.Append(targetStr);\n      sb.Append(\")\");\n\n      return sb.toString();\n    }\n  }\n}\n","export enum SymbolType {\n  Knot = 0,\n  List = 1,\n  ListItem = 2,\n  Var = 3,\n  SubFlowAndWeave = 4,\n  Arg = 5,\n  Temp = 6,\n}\n","import { InkObject } from \"./Object\";\n\nexport class VariableAssignment extends InkObject {\n  public readonly variableName: string | null;\n  public readonly isNewDeclaration: boolean;\n  public isGlobal: boolean;\n\n  constructor(variableName: string | null, isNewDeclaration: boolean) {\n    super();\n    this.variableName = variableName || null;\n    this.isNewDeclaration = !!isNewDeclaration;\n    this.isGlobal = false;\n  }\n\n  public toString(): string {\n    return \"VarAssign to \" + this.variableName;\n  }\n}\n","import { ChoicePoint } from \"../../../engine/ChoicePoint\";\nimport { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ContentList } from \"./ContentList\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { Divert as RuntimeDivert } from \"../../../engine/Divert\";\nimport { DivertTargetValue } from \"../../../engine/Value\";\nimport { INamedContent } from \"../../../engine/INamedContent\";\nimport { IWeavePoint } from \"./IWeavePoint\";\nimport { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Path as RuntimePath } from \"../../../engine/Path\";\nimport { Story } from \"./Story\";\nimport { SymbolType } from \"./SymbolType\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../engine/VariableAssignment\";\nimport { Expression } from \"./Expression/Expression\";\nimport { Identifier } from \"./Identifier\";\n\nexport class Choice extends ParsedObject implements IWeavePoint, INamedContent {\n  private _condition: Expression | null = null;\n  private _innerContentContainer: RuntimeContainer | null = null;\n  private _outerContainer: RuntimeContainer | null = null;\n  private _runtimeChoice: ChoicePoint | null = null;\n  get runtimeChoice(): ChoicePoint {\n    if (!this._runtimeChoice) {\n      throw new Error();\n    }\n\n    return this._runtimeChoice;\n  }\n\n  private _returnToR1: DivertTargetValue | null = null;\n  private _returnToR2: DivertTargetValue | null = null;\n  private _r1Label: RuntimeContainer | null = null;\n  private _r2Label: RuntimeContainer | null = null;\n  private _divertToStartContentOuter: RuntimeDivert | null = null;\n  private _divertToStartContentInner: RuntimeDivert | null = null;\n  private _startContentRuntimeContainer: RuntimeContainer | null = null;\n\n  public startContent: ContentList;\n  public choiceOnlyContent: ContentList;\n  public innerContent: ContentList;\n  public identifier?: Identifier;\n  get name() {\n    return this.identifier?.name || null;\n  }\n  public onceOnly: boolean;\n  public isInvisibleDefault: boolean = false;\n  public indentationDepth: number;\n  public hasWeaveStyleInlineBrackets: boolean = false;\n\n  get condition() {\n    return this._condition;\n  }\n\n  set condition(value) {\n    this._condition = value;\n    if (value) {\n      this.AddContent(value as ParsedObject);\n    }\n  }\n\n  // Required for IWeavePoint interface\n  // Choice's target container. Used by weave to append any extra\n  // nested weave content into.\n  get runtimeContainer() {\n    return this._innerContentContainer;\n  }\n\n  get innerContentContainer() {\n    return this._innerContentContainer;\n  }\n\n  get containerForCounting() {\n    return this._innerContentContainer;\n  }\n\n  // Override runtimePath to point to the Choice's target content (after it's chosen),\n  // as opposed to the default implementation which would point to the choice itself\n  // (or it's outer container), which is what runtimeObject is.\n  get runtimePath(): RuntimePath {\n    if (!this.innerContentContainer || !this.innerContentContainer.path) {\n      throw new Error();\n    }\n\n    return this.innerContentContainer.path;\n  }\n\n  constructor(\n    startContent: ContentList,\n    choiceOnlyContent: ContentList,\n    innerContent: ContentList\n  ) {\n    super();\n\n    this.startContent = startContent;\n    this.choiceOnlyContent = choiceOnlyContent;\n    this.innerContent = innerContent;\n    this.indentationDepth = 1;\n\n    if (startContent) {\n      this.AddContent(this.startContent);\n    }\n\n    if (choiceOnlyContent) {\n      this.AddContent(this.choiceOnlyContent);\n    }\n\n    if (innerContent) {\n      this.AddContent(this.innerContent);\n    }\n\n    this.onceOnly = true; // default\n  }\n\n  get typeName(): string {\n    return \"Choice\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    this._outerContainer = new RuntimeContainer();\n\n    // Content names for different types of choice:\n    //  * start content [choice only content] inner content\n    //  * start content   -> divert\n    //  * start content\n    //  * [choice only content]\n\n    // Hmm, this structure has become slightly insane!\n    //\n    // [\n    //     EvalStart\n    //     assign $r = $r1   -- return target = return label 1\n    //     BeginString\n    //     -> s\n    //     [(r1)]            -- return label 1 (after start content)\n    //     EndString\n    //     BeginString\n    //     ... choice only content\n    //     EndEval\n    //     Condition expression\n    //     choice: -> \"c-0\"\n    //     (s) = [\n    //         start content\n    //         -> r          -- goto return label 1 or 2\n    //     ]\n    //  ]\n    //\n    //  in parent's container: (the inner content for the choice)\n    //\n    //  (c-0) = [\n    //      EvalStart\n    //      assign $r = $r2   -- return target = return label 2\n    //      EndEval\n    //      -> s\n    //      [(r2)]            -- return label 1 (after start content)\n    //      inner content\n    //  ]\n    //\n\n    this._runtimeChoice = new ChoicePoint(this.onceOnly);\n    this._runtimeChoice.isInvisibleDefault = this.isInvisibleDefault;\n\n    if (this.startContent || this.choiceOnlyContent || this.condition) {\n      this._outerContainer.AddContent(RuntimeControlCommand.EvalStart());\n    }\n\n    // Start content is put into a named container that's referenced both\n    // when displaying the choice initially, and when generating the text\n    // when the choice is chosen.\n    if (this.startContent) {\n      // Generate start content and return\n      //  - We can't use a function since it uses a call stack element, which would\n      //    put temporary values out of scope. Instead we manually divert around.\n      //  - $r is a variable divert target contains the return point\n      this._returnToR1 = new DivertTargetValue();\n      this._outerContainer.AddContent(this._returnToR1);\n\n      const varAssign = new RuntimeVariableAssignment(\"$r\", true);\n      this._outerContainer.AddContent(varAssign);\n\n      // Mark the start of the choice text generation, so that the runtime\n      // knows where to rewind to to extract the content from the output stream.\n      this._outerContainer.AddContent(RuntimeControlCommand.BeginString());\n\n      this._divertToStartContentOuter = new RuntimeDivert();\n      this._outerContainer.AddContent(this._divertToStartContentOuter);\n\n      // Start content itself in a named container\n      this._startContentRuntimeContainer =\n        this.startContent.GenerateRuntimeObject() as RuntimeContainer;\n      this._startContentRuntimeContainer.name = \"s\";\n\n      // Effectively, the \"return\" statement - return to the point specified by $r\n      const varDivert = new RuntimeDivert();\n      varDivert.variableDivertName = \"$r\";\n      this._startContentRuntimeContainer.AddContent(varDivert);\n\n      // Add the container\n      this._outerContainer.AddToNamedContentOnly(\n        this._startContentRuntimeContainer\n      );\n\n      // This is the label to return to\n      this._r1Label = new RuntimeContainer();\n      this._r1Label.name = \"$r1\";\n      this._outerContainer.AddContent(this._r1Label);\n\n      this._outerContainer.AddContent(RuntimeControlCommand.EndString());\n\n      this._runtimeChoice.hasStartContent = true;\n    }\n\n    // Choice only content - mark the start, then generate it directly into the outer container\n    if (this.choiceOnlyContent) {\n      this._outerContainer.AddContent(RuntimeControlCommand.BeginString());\n\n      const choiceOnlyRuntimeContent =\n        this.choiceOnlyContent.GenerateRuntimeObject() as RuntimeContainer;\n      this._outerContainer.AddContentsOfContainer(choiceOnlyRuntimeContent);\n\n      this._outerContainer.AddContent(RuntimeControlCommand.EndString());\n\n      this._runtimeChoice.hasChoiceOnlyContent = true;\n    }\n\n    // Generate any condition for this choice\n    if (this.condition) {\n      this.condition.GenerateIntoContainer(this._outerContainer);\n      this._runtimeChoice.hasCondition = true;\n    }\n\n    if (this.startContent || this.choiceOnlyContent || this.condition) {\n      this._outerContainer.AddContent(RuntimeControlCommand.EvalEnd());\n    }\n\n    // Add choice itself\n    this._outerContainer.AddContent(this._runtimeChoice);\n\n    // Container that choice points to for when it's chosen\n    this._innerContentContainer = new RuntimeContainer();\n\n    // Repeat start content by diverting to its container\n    if (this.startContent) {\n      // Set the return point when jumping back into the start content\n      //  - In this case, it's the $r2 point, within the choice content \"c\".\n      this._returnToR2 = new DivertTargetValue();\n      this._innerContentContainer.AddContent(RuntimeControlCommand.EvalStart());\n      this._innerContentContainer.AddContent(this._returnToR2);\n      this._innerContentContainer.AddContent(RuntimeControlCommand.EvalEnd());\n      const varAssign = new RuntimeVariableAssignment(\"$r\", true);\n      this._innerContentContainer.AddContent(varAssign);\n\n      // Main divert into start content\n      this._divertToStartContentInner = new RuntimeDivert();\n      this._innerContentContainer.AddContent(this._divertToStartContentInner);\n\n      // Define label to return to\n      this._r2Label = new RuntimeContainer();\n      this._r2Label.name = \"$r2\";\n      this._innerContentContainer.AddContent(this._r2Label);\n    }\n\n    // Choice's own inner content\n    if (this.innerContent) {\n      const innerChoiceOnlyContent =\n        this.innerContent.GenerateRuntimeObject() as RuntimeContainer;\n      this._innerContentContainer.AddContentsOfContainer(\n        innerChoiceOnlyContent\n      );\n    }\n\n    if (this.story.countAllVisits) {\n      this._innerContentContainer.visitsShouldBeCounted = true;\n    }\n\n    this._innerContentContainer.countingAtStartOnly = true;\n\n    return this._outerContainer;\n  };\n\n  public ResolveReferences(context: Story): void {\n    // Weave style choice - target own content container\n    if (this._innerContentContainer) {\n      this.runtimeChoice.pathOnChoice = this._innerContentContainer.path;\n\n      if (this.onceOnly) {\n        this._innerContentContainer.visitsShouldBeCounted = true;\n      }\n    }\n\n    if (this._returnToR1) {\n      if (!this._r1Label) {\n        throw new Error();\n      }\n\n      this._returnToR1.targetPath = this._r1Label.path;\n    }\n\n    if (this._returnToR2) {\n      if (!this._r2Label) {\n        throw new Error();\n      }\n\n      this._returnToR2.targetPath = this._r2Label.path;\n    }\n\n    if (this._divertToStartContentOuter) {\n      if (!this._startContentRuntimeContainer) {\n        throw new Error();\n      }\n\n      this._divertToStartContentOuter.targetPath =\n        this._startContentRuntimeContainer.path;\n    }\n\n    if (this._divertToStartContentInner) {\n      if (!this._startContentRuntimeContainer) {\n        throw new Error();\n      }\n\n      this._divertToStartContentInner.targetPath =\n        this._startContentRuntimeContainer.path;\n    }\n\n    super.ResolveReferences(context);\n\n    if (this.identifier && (this.identifier?.name || \"\").length > 0) {\n      context.CheckForNamingCollisions(\n        this as ParsedObject,\n        this.identifier,\n        SymbolType.SubFlowAndWeave\n      );\n    }\n  }\n\n  public readonly toString = () => {\n    if (this.choiceOnlyContent !== null) {\n      return `* ${this.startContent}[${this.choiceOnlyContent}]...`;\n    }\n\n    return `* ${this.startContent}...`;\n  };\n}\n","export class StringParserElement {\n  public static _uniqueIdCounter: number = 1000;\n\n  public characterIndex: number = 0;\n  public characterInLineIndex: number = 0;\n  public lineIndex: number = 0;\n  public reportedErrorInScope: boolean = false;\n  public uniqueId: number = 0;\n  public customFlags: number = 0;\n\n  public readonly CopyFrom = (fromElement: StringParserElement): void => {\n    StringParserElement._uniqueIdCounter++;\n    this.uniqueId = StringParserElement._uniqueIdCounter;\n    this.characterIndex = fromElement.characterIndex;\n    this.characterInLineIndex = fromElement.characterInLineIndex;\n    this.lineIndex = fromElement.lineIndex;\n    this.customFlags = fromElement.customFlags;\n    this.reportedErrorInScope = false;\n  };\n\n  // Squash is used when succeeding from a rule,\n  // so only the state information we wanted to carry forward is\n  // retained. e.g. characterIndex and lineIndex are global,\n  // however uniqueId is specific to the individual rule,\n  // and likewise, custom flags are designed for the temporary\n  // state of the individual rule too.\n  public readonly SquashFrom = (fromElement: StringParserElement): void => {\n    this.characterIndex = fromElement.characterIndex;\n    this.characterInLineIndex = fromElement.characterInLineIndex;\n    this.lineIndex = fromElement.lineIndex;\n    this.reportedErrorInScope = fromElement.reportedErrorInScope;\n    this.customFlags = fromElement.customFlags;\n  };\n}\n","import { StringParserElement } from \"./StringParserElement\";\n\nexport class StringParserState {\n  private _stack: StringParserElement[] = [];\n  private _numElements: number = 0;\n\n  get currentElement(): StringParserElement {\n    return this._stack[this._numElements - 1];\n  }\n\n  get lineIndex(): number {\n    return this.currentElement.lineIndex;\n  }\n\n  set lineIndex(value: number) {\n    this.currentElement.lineIndex = value;\n  }\n\n  get characterIndex(): number {\n    return this.currentElement.characterIndex;\n  }\n\n  set characterIndex(value: number) {\n    this.currentElement.characterIndex = value;\n  }\n\n  get characterInLineIndex(): number {\n    return this.currentElement.characterInLineIndex;\n  }\n\n  set characterInLineIndex(value: number) {\n    this.currentElement.characterInLineIndex = value;\n  }\n\n  get customFlags(): number {\n    return this.currentElement.customFlags;\n  }\n\n  set customFlags(value: number) {\n    this.currentElement.customFlags = value;\n  }\n\n  get errorReportedAlreadyInScope(): boolean {\n    return this.currentElement.reportedErrorInScope;\n  }\n\n  get stackHeight(): number {\n    return this._numElements;\n  }\n\n  constructor() {\n    const kExpectedMaxStackDepth = 200;\n    for (let i = 0; i < kExpectedMaxStackDepth; i++) {\n      this._stack[i] = new StringParserElement();\n    }\n    this._numElements = 1;\n  }\n\n  public readonly StringParserState = (): void => {\n    const kExpectedMaxStackDepth: number = 200;\n    this._stack = new Array(kExpectedMaxStackDepth);\n\n    for (let ii = 0; ii < kExpectedMaxStackDepth; ++ii) {\n      this._stack[ii] = new StringParserElement();\n    }\n\n    this._numElements = 1;\n  };\n\n  public readonly Push = (): number => {\n    if (this._numElements >= this._stack.length && this._numElements > 0) {\n      throw new Error(\"Stack overflow in parser state.\");\n    }\n\n    const prevElement = this._stack[this._numElements - 1];\n    const newElement = this._stack[this._numElements];\n    this._numElements++;\n\n    newElement.CopyFrom(prevElement);\n\n    return newElement.uniqueId;\n  };\n\n  public readonly Pop = (expectedRuleId: number): void => {\n    if (this._numElements == 1) {\n      throw new Error(\n        \"Attempting to remove final stack element is illegal! Mismatched Begin/Succceed/Fail?\"\n      );\n    }\n\n    if (this.currentElement.uniqueId != expectedRuleId) {\n      throw new Error(\n        \"Mismatched rule IDs while Poping - do you have mismatched Begin/Succeed/Fail?\"\n      );\n    }\n\n    // Restore state\n    this._numElements -= 1;\n  };\n\n  public Peek = (expectedRuleId: number) => {\n    if (this.currentElement.uniqueId != expectedRuleId) {\n      throw new Error(\n        \"Mismatched rule IDs while Peeking - do you have mismatched Begin/Succeed/Fail?\"\n      );\n    }\n\n    return this._stack[this._numElements - 1];\n  };\n\n  public readonly PeekPenultimate = (): StringParserElement | null => {\n    if (this._numElements >= 2) {\n      return this._stack[this._numElements - 2];\n    }\n\n    return null;\n  };\n\n  // Reduce stack height while maintaining currentElement\n  // Remove second last element: i.e. \"squash last two elements together\"\n  // Used when succeeding from a rule (and ONLY when succeeding, since\n  // the state of the top element is retained).\n  public readonly Squash = (): void => {\n    if (this._numElements < 2) {\n      throw new Error(\n        \"Attempting to remove final stack element is illegal! Mismatched Begin/Succceed/Fail?\"\n      );\n    }\n\n    const penultimateEl = this._stack[this._numElements - 2];\n    const lastEl = this._stack[this._numElements - 1];\n\n    penultimateEl.SquashFrom(lastEl);\n\n    this._numElements -= 1;\n  };\n\n  public readonly NoteErrorReported = (): void => {\n    for (const el of this._stack) {\n      el.reportedErrorInScope = true;\n    }\n  };\n}\n","import { CharacterSet } from \"../CharacterSet\";\nimport { ParsedObject } from \"../ParsedHierarchy/Object\";\nimport { StringParserState } from \"./StringParserState\";\nimport { StringParserElement } from \"./StringParserElement\";\n\nexport const ParseSuccess = Symbol(\"ParseSuccessStruct\");\n\nexport type ParseRule = () => ParseRuleReturn;\n\nexport type ParseRuleReturn =\n  | object\n  | string\n  | null\n  | number\n  | (typeof StringParser)[\"ParseSuccess\"];\n\nexport type SpecificParseRule<T extends ParseRule> = T;\n\nexport class StringParser {\n  public ParseRule: ParseRule | null = null;\n\n  public static readonly ParseSuccess: typeof ParseSuccess = ParseSuccess;\n  public static readonly numbersCharacterSet = new CharacterSet(\"0123456789\");\n\n  private _chars: string[];\n\n  public errorHandler:\n    | null\n    | ((\n        message: string,\n        index: number,\n        lineIndex?: number,\n        isWarning?: boolean\n      ) => void) = null;\n  public state: StringParserState;\n  public hadError: boolean = false;\n\n  constructor(str: string) {\n    const strPreProc = this.PreProcessInputString(str);\n    this.state = new StringParserState();\n\n    if (str) {\n      this._chars = strPreProc.split(\"\");\n    } else {\n      this._chars = [];\n    }\n\n    this.inputString = strPreProc;\n  }\n\n  get currentCharacter(): string {\n    if (this.index >= 0 && this.remainingLength > 0) {\n      return this._chars[this.index];\n    }\n\n    return \"0\";\n  }\n\n  // Don't do anything by default, but provide ability for subclasses\n  // to manipulate the string before it's used as input (converted to a char array)\n  public PreProcessInputString(str: string): string {\n    return str;\n  }\n\n  //--------------------------------\n  // Parse state\n  //--------------------------------\n\n  public readonly BeginRule = (): number => this.state.Push();\n\n  public readonly FailRule = (expectedRuleId: number): ParseRuleReturn => {\n    this.state.Pop(expectedRuleId);\n    return null;\n  };\n\n  public readonly CancelRule = (expectedRuleId: number): void => {\n    this.state.Pop(expectedRuleId);\n  };\n\n  public readonly SucceedRule = (\n    expectedRuleId: number,\n    result: ParseRuleReturn = null\n  ): ParseRuleReturn => {\n    // Get state at point where this rule stared evaluating\n    const stateAtSucceedRule = this.state.Peek(expectedRuleId);\n    const stateAtBeginRule = this.state.PeekPenultimate();\n\n    // Allow subclass to receive callback\n    if (this.RuleDidSucceed) {\n      this.RuleDidSucceed(result, stateAtBeginRule, stateAtSucceedRule);\n    }\n\n    // Flatten state stack so that we maintain the same values,\n    // but remove one level in the stack.\n    this.state.Squash();\n\n    let finalResult: ParseRuleReturn = result;\n    if (finalResult === null) {\n      finalResult = StringParser.ParseSuccess;\n    }\n\n    return finalResult;\n  };\n\n  public RuleDidSucceed?: (\n    result: ParseRuleReturn,\n    startState: StringParserElement | null,\n    endState: StringParserElement\n  ) => void;\n\n  public readonly Expect = (\n    rule: ParseRule,\n    message: string | null = null,\n    recoveryRule: ParseRule | null = null\n  ): ParseRuleReturn => {\n    let result: ParseRuleReturn = this.ParseObject(rule);\n    if (result === null) {\n      if (message === null) {\n        message = rule.name;\n      }\n\n      let butSaw: string;\n      const lineRemainder: string = this.LineRemainder();\n      if (lineRemainder === null || lineRemainder.length === 0) {\n        butSaw = \"end of line\";\n      } else {\n        butSaw = `'${lineRemainder}'`;\n      }\n\n      this.Error(`Expected ${message} but saw ${butSaw}`);\n\n      if (recoveryRule !== null) {\n        result = recoveryRule();\n      }\n    }\n\n    return result;\n  };\n\n  public Error = (message: string, isWarning: boolean = false): void => {\n    this.ErrorOnLine(message, this.lineIndex + 1, isWarning);\n  };\n\n  public readonly ErrorWithParsedObject = (\n    message: string,\n    result: ParsedObject,\n    isWarning: boolean = false\n  ): void => {\n    this.ErrorOnLine(\n      message,\n      result.debugMetadata ? result.debugMetadata.startLineNumber : -1,\n      isWarning\n    );\n  };\n\n  public readonly ErrorOnLine = (\n    message: string,\n    lineNumber: number,\n    isWarning: boolean\n  ): void => {\n    if (!this.state.errorReportedAlreadyInScope) {\n      const errorType = isWarning ? \"Warning\" : \"Error\";\n\n      if (!this.errorHandler) {\n        throw new Error(`${errorType} on line ${lineNumber}: ${message}`);\n      } else {\n        this.errorHandler(message, this.index, lineNumber - 1, isWarning);\n      }\n\n      this.state.NoteErrorReported();\n    }\n\n    if (!isWarning) {\n      this.hadError = true;\n    }\n  };\n\n  public readonly Warning = (message: string): void =>\n    this.Error(message, true);\n\n  get endOfInput(): boolean {\n    return this.index >= this._chars.length;\n  }\n\n  get remainingString(): string {\n    return this._chars\n      .slice(this.index, this.index + this.remainingLength)\n      .join(\"\");\n  }\n\n  public readonly LineRemainder = (): string =>\n    this.Peek(() => this.ParseUntilCharactersFromString(\"\\n\\r\")) as string;\n\n  get remainingLength() {\n    return this._chars.length - this.index;\n  }\n\n  public inputString: string;\n\n  get lineIndex() {\n    return this.state.lineIndex;\n  }\n\n  set lineIndex(value: number) {\n    this.state.lineIndex = value;\n  }\n\n  set characterInLineIndex(value: number) {\n    this.state.characterInLineIndex = value;\n  }\n\n  get characterInLineIndex() {\n    return this.state.characterInLineIndex;\n  }\n\n  get index(): number {\n    // If we want subclass parsers to be able to set the index directly,\n    // then we would need to know what the lineIndex of the new\n    // index would be - would we have to step through manually\n    // counting the newlines to do so?\n    return this.state.characterIndex;\n  }\n\n  set index(value: number) {\n    this.state.characterIndex = value;\n  }\n\n  public readonly SetFlag = (flag: number, trueOrFalse: boolean): void => {\n    if (trueOrFalse) {\n      this.state.customFlags |= flag;\n    } else {\n      this.state.customFlags &= ~flag;\n    }\n  };\n\n  public readonly GetFlag = (flag: number): boolean =>\n    Boolean(this.state.customFlags & flag);\n\n  //--------------------------------\n  // Structuring\n  //--------------------------------\n\n  public ParseObject = (rule: ParseRule): ParseRuleReturn => {\n    const ruleId: number = this.BeginRule();\n    const stackHeightBefore = this.state.stackHeight;\n    const result = rule();\n\n    if (stackHeightBefore !== this.state.stackHeight) {\n      throw new Error(\"Mismatched Begin/Fail/Succeed rules\");\n    }\n\n    if (result === null) {\n      return this.FailRule(ruleId);\n    }\n\n    this.SucceedRule(ruleId, result);\n\n    return result;\n  };\n\n  public readonly Parse = <T extends ParseRule>(\n    rule: SpecificParseRule<T>\n  ): ParseRuleReturn => {\n    const ruleId: number = this.BeginRule();\n\n    const result: ParseRuleReturn = rule();\n    if (result === null) {\n      this.FailRule(ruleId);\n      return null;\n    }\n\n    this.SucceedRule(ruleId, result);\n\n    return result;\n  };\n\n  public readonly OneOf = (array: ParseRule[]): ParseRuleReturn => {\n    for (const rule of array) {\n      const result = this.ParseObject(rule);\n      if (result !== null) {\n        return result;\n      }\n    }\n\n    return null;\n  };\n\n  public readonly OneOrMore = (rule: ParseRule): ParseRuleReturn[] | null => {\n    const results: ParseRuleReturn[] = [];\n    let result: ParseRuleReturn = null;\n\n    do {\n      result = this.ParseObject(rule);\n      if (result !== null) {\n        results.push(result);\n      }\n    } while (result !== null);\n\n    if (results.length > 0) {\n      return results;\n    }\n\n    return null;\n  };\n\n  public readonly Optional =\n    (rule: ParseRule): ParseRule =>\n    () => {\n      const result = this.ParseObject(rule);\n      if (result === null) return StringParser.ParseSuccess;\n      return result;\n    };\n\n  // Return ParseSuccess instead the real result so that it gets excluded\n  // from result arrays (e.g. Interleave)\n  public readonly Exclude =\n    (rule: ParseRule): ParseRule =>\n    () =>\n      this.ParseObject(rule) && StringParser.ParseSuccess;\n\n  // Combination of both of the above\n  public readonly OptionalExclude =\n    (rule: ParseRule): ParseRule =>\n    () => {\n      this.ParseObject(rule);\n      return StringParser.ParseSuccess;\n    };\n\n  // Convenience method for creating more readable ParseString rules that can be combined\n  // in other structuring rules (like OneOf etc)\n  // e.g. OneOf(String(\"one\"), String(\"two\"))\n  public readonly String =\n    (str: string): ParseRule =>\n    () =>\n      this.ParseString(str);\n\n  private readonly TryAddResultToList = <T>(\n    result: ParseRuleReturn,\n    list: T[],\n    flatten: boolean = true\n  ): void => {\n    if (result === StringParser.ParseSuccess) {\n      return;\n    }\n\n    if (flatten && Array.isArray(result)) {\n      const resultCollection = result as ParseRuleReturn[];\n      if (resultCollection !== null) {\n        for (const obj of resultCollection) {\n          list.push(obj as any);\n        }\n\n        return;\n      }\n    }\n\n    list.push(result as any);\n  };\n\n  public readonly Interleave = <T>(\n    ruleA: ParseRule,\n    ruleB: ParseRule,\n    untilTerminator: ParseRule | null = null,\n    flatten: boolean = true\n  ): T[] => {\n    const ruleId: number = this.BeginRule();\n    const results: T[] = [];\n\n    // First outer padding\n    const firstA = this.ParseObject(ruleA);\n    if (firstA === null) {\n      return this.FailRule(ruleId) as any;\n    } else {\n      this.TryAddResultToList(firstA, results, flatten);\n    }\n\n    let lastMainResult: ParseRuleReturn | null = null;\n    let outerResult: ParseRuleReturn | null = null;\n    do {\n      // \"until\" condition hit?\n      if (untilTerminator !== null && this.Peek(untilTerminator) !== null) {\n        break;\n      }\n\n      // Main inner\n      lastMainResult = this.ParseObject(ruleB);\n      if (lastMainResult === null) {\n        break;\n      } else {\n        this.TryAddResultToList(lastMainResult, results, flatten);\n      }\n\n      // Outer result (i.e. last A in ABA)\n      outerResult = null;\n      if (lastMainResult !== null) {\n        outerResult = this.ParseObject(ruleA);\n\n        if (outerResult === null) {\n          break;\n        } else {\n          this.TryAddResultToList(outerResult, results, flatten);\n        }\n      }\n\n      // Stop if there are no results, or if both are the placeholder \"ParseSuccess\" (i.e. Optional success rather than a true value)\n    } while (\n      (lastMainResult !== null || outerResult !== null) &&\n      !(\n        (lastMainResult as any) === StringParser.ParseSuccess &&\n        outerResult == StringParser.ParseSuccess\n      ) &&\n      this.remainingLength > 0\n    );\n\n    if (results.length === 0) {\n      return this.FailRule(ruleId) as T[];\n    }\n\n    return this.SucceedRule(ruleId, results) as T[];\n  };\n\n  //--------------------------------\n  // Basic string parsing\n  //--------------------------------\n\n  public readonly ParseString = (str: string): string | null => {\n    if (str.length > this.remainingLength) {\n      return null;\n    }\n\n    const ruleId: number = this.BeginRule();\n\n    // Optimisation from profiling:\n    // Store in temporary local variables\n    // since they're properties that would have to access\n    // the rule stack every time otherwise.\n    let i: number = this.index;\n    let cli: number = this.characterInLineIndex;\n    let li: number = this.lineIndex;\n\n    let success: boolean = true;\n    for (let tempIdx = 0; tempIdx < str.length; tempIdx += 1) {\n      const c = str[tempIdx];\n\n      if (this._chars[i] !== c) {\n        success = false;\n        break;\n      }\n      if (c === \"\\n\") {\n        li++;\n        cli = -1;\n      }\n\n      i++;\n      cli++;\n    }\n\n    this.index = i;\n    this.characterInLineIndex = cli;\n    this.lineIndex = li;\n\n    if (success) {\n      return this.SucceedRule(ruleId, str) as any;\n    }\n\n    return this.FailRule(ruleId) as any;\n  };\n\n  public readonly ParseSingleCharacter = (): string => {\n    if (this.remainingLength > 0) {\n      const c = this._chars[this.index];\n      if (c === \"\\n\") {\n        this.lineIndex += 1;\n        this.characterInLineIndex = -1;\n      }\n\n      this.index += 1;\n      this.characterInLineIndex += 1;\n\n      return c;\n    }\n\n    return \"0\";\n  };\n\n  public readonly ParseUntilCharactersFromString = (\n    str: string,\n    maxCount: number = -1\n  ): string | null => this.ParseCharactersFromString(str, false, maxCount);\n\n  public readonly ParseUntilCharactersFromCharSet = (\n    charSet: CharacterSet,\n    maxCount: number = -1\n  ): string | null => this.ParseCharactersFromCharSet(charSet, false, maxCount);\n\n  public readonly ParseCharactersFromString = (\n    str: string,\n    maxCountOrShouldIncludeStrChars: boolean | number = -1,\n    maxCount: number = -1\n  ): string | null => {\n    const charSet = new CharacterSet(str);\n    if (typeof maxCountOrShouldIncludeStrChars === \"number\") {\n      return this.ParseCharactersFromCharSet(\n        charSet,\n        true,\n        maxCountOrShouldIncludeStrChars\n      );\n    }\n\n    return this.ParseCharactersFromCharSet(\n      charSet,\n      maxCountOrShouldIncludeStrChars,\n      maxCount\n    );\n  };\n\n  public readonly ParseCharactersFromCharSet = (\n    charSet: CharacterSet,\n    shouldIncludeChars: boolean = true,\n    maxCount: number = -1\n  ): string | null => {\n    if (maxCount === -1) {\n      maxCount = Number.MAX_SAFE_INTEGER;\n    }\n\n    const startIndex: number = this.index;\n\n    // Optimisation from profiling:\n    // Store in temporary local variables\n    // since they're properties that would have to access\n    // the rule stack every time otherwise.\n    let ii: number = this.index;\n    let cli: number = this.characterInLineIndex;\n    let li: number = this.lineIndex;\n    let count: number = 0;\n    while (\n      ii < this._chars.length &&\n      charSet.set.has(this._chars[ii]) === shouldIncludeChars &&\n      count < maxCount\n    ) {\n      if (this._chars[ii] === \"\\n\") {\n        li += 1;\n        cli = -1;\n      }\n\n      ii += 1;\n      cli += 1;\n      count += 1;\n    }\n\n    this.index = ii;\n    this.characterInLineIndex = cli;\n    this.lineIndex = li;\n\n    const lastCharIndex: number = this.index;\n    if (lastCharIndex > startIndex) {\n      return this._chars.slice(startIndex, this.index).join(\"\");\n    }\n\n    return null;\n  };\n\n  public readonly Peek = (rule: ParseRule): ParseRuleReturn => {\n    const ruleId: number = this.BeginRule();\n    const result: ParseRuleReturn = rule();\n    this.CancelRule(ruleId);\n\n    return result;\n  };\n\n  public ParseUntil(\n    stopRule: ParseRule,\n    pauseCharacters: CharacterSet | null = null,\n    endCharacters: CharacterSet | null = null\n  ): string {\n    const ruleId: number = this.BeginRule();\n    const pauseAndEnd: CharacterSet = new CharacterSet();\n    if (pauseCharacters !== null) {\n      pauseAndEnd.set = new Set([\n        ...pauseAndEnd.set.values(),\n        ...pauseCharacters.set.values(),\n      ]);\n    }\n\n    if (endCharacters !== null) {\n      pauseAndEnd.set = new Set([\n        ...pauseAndEnd.set.values(),\n        ...endCharacters.set.values(),\n      ]);\n    }\n\n    let parsedString = \"\";\n    let ruleResultAtPause: ParseRuleReturn | null = null;\n\n    // Keep attempting to parse strings up to the pause (and end) points.\n    //  - At each of the pause points, attempt to parse according to the rule\n    //  - When the end point is reached (or EOF), we're done\n    do {\n      // TODO: Perhaps if no pause or end characters are passed, we should check *every* character for stopRule?\n      const partialParsedString: string | null =\n        this.ParseUntilCharactersFromCharSet(pauseAndEnd);\n\n      if (partialParsedString) {\n        parsedString += partialParsedString;\n      }\n\n      // Attempt to run the parse rule at this pause point\n      ruleResultAtPause = this.Peek(stopRule);\n\n      // Rule completed - we're done\n      if (ruleResultAtPause !== null) {\n        break;\n      } else {\n        if (this.endOfInput) {\n          break;\n        }\n\n        // Reached a pause point, but rule failed. Step past and continue parsing string\n        const pauseCharacter: string = this.currentCharacter;\n        if (\n          pauseCharacters !== null &&\n          pauseCharacters.set.has(pauseCharacter)\n        ) {\n          parsedString += pauseCharacter;\n          if (pauseCharacter === \"\\n\") {\n            this.lineIndex += 1;\n            this.characterInLineIndex = -1;\n          }\n\n          this.index += 1;\n          this.characterInLineIndex += 1;\n\n          continue;\n        } else {\n          break;\n        }\n      }\n    } while (true);\n\n    if (parsedString.length > 0) {\n      return this.SucceedRule(ruleId, String(parsedString)) as string;\n    }\n\n    return this.FailRule(ruleId) as string;\n  }\n\n  // No need to Begin/End rule since we never parse a newline, so keeping oldIndex is good enough\n  public readonly ParseInt = (): number | null => {\n    const oldIndex: number = this.index;\n    const oldCharacterInLineIndex: number = this.characterInLineIndex;\n    const negative: boolean = this.ParseString(\"-\") !== null;\n\n    // Optional whitespace\n    this.ParseCharactersFromString(\" \\t\");\n\n    const parsedString = this.ParseCharactersFromCharSet(\n      StringParser.numbersCharacterSet\n    );\n    if (parsedString === null) {\n      // Roll back and fail\n      this.index = oldIndex;\n      this.characterInLineIndex = oldCharacterInLineIndex;\n\n      return null;\n    }\n\n    let parsedInt: number;\n    if (!Number.isNaN(Number(parsedString))) {\n      parsedInt = Number(parsedString);\n      return negative ? -parsedInt : parsedInt;\n    }\n\n    this.Error(\n      \"Failed to read integer value: \" +\n        parsedString +\n        \". Perhaps it's out of the range of acceptable numbers ink supports? (\" +\n        Number.MIN_SAFE_INTEGER +\n        \" to \" +\n        Number.MAX_SAFE_INTEGER +\n        \")\"\n    );\n\n    return null;\n  };\n\n  // No need to Begin/End rule since we never parse a newline, so keeping oldIndex is good enough\n  public readonly ParseFloat = (): number | null => {\n    const oldIndex: number = this.index;\n    const oldCharacterInLineIndex: number = this.characterInLineIndex;\n\n    const leadingInt: number | null = this.ParseInt();\n    if (leadingInt !== null) {\n      if (this.ParseString(\".\") !== null) {\n        const afterDecimalPointStr = this.ParseCharactersFromCharSet(\n          StringParser.numbersCharacterSet\n        );\n\n        return Number(`${leadingInt}.${afterDecimalPointStr}`);\n      }\n    }\n\n    // Roll back and fail\n    this.index = oldIndex;\n    this.characterInLineIndex = oldCharacterInLineIndex;\n\n    return null;\n  };\n\n  public readonly ParseNewline = (): string => {\n    const ruleId: number = this.BeginRule();\n\n    // Optional \\r, definite \\n to support Windows (\\r\\n) and Mac/Unix (\\n)\n    // 2nd May 2016: Always collapse \\r\\n to just \\n\n    this.ParseString(\"\\r\");\n\n    if (this.ParseString(\"\\n\") === null) {\n      return this.FailRule(ruleId) as string;\n    }\n\n    return this.SucceedRule(ruleId, \"\\n\") as string;\n  };\n}\n","import { CharacterSet } from \"./CharacterSet\";\nimport { StringParser } from \"./StringParser/StringParser\";\n\n/// <summary>\n/// Pre-pass before main ink parser runs. It actually performs two main tasks:\n///  - comment elimination to simplify the parse rules in the main parser\n///  - Conversion of Windows line endings (\\r\\n) to the simpler Unix style (\\n), so\n///    we don't have to worry about them later.\n/// </summary>\nexport class CommentEliminator extends StringParser {\n  public _commentOrNewlineStartCharacter = new CharacterSet(\"/\\r\\n\");\n  public _commentBlockEndCharacter = new CharacterSet(\"*\");\n  public _newlineCharacters = new CharacterSet(\"\\n\\r\");\n\n  public readonly Process = (): string => {\n    // Make both comments and non-comments optional to handle trivial empty file case (or *only* comments)\n    const stringList: string[] = this.Interleave<string>(\n      this.Optional(this.CommentsAndNewlines),\n      this.Optional(this.MainInk)\n    );\n\n    if (stringList !== null) {\n      return stringList.join(\"\");\n    } else {\n      return \"\";\n    }\n  };\n\n  public readonly MainInk = () =>\n    this.ParseUntil(\n      this.CommentsAndNewlines,\n      this._commentOrNewlineStartCharacter,\n      null\n    );\n\n  public readonly CommentsAndNewlines = () => {\n    let newLines: string[] = this.Interleave<string>(\n      this.Optional(this.ParseNewline),\n      this.Optional(this.ParseSingleComment)\n    );\n\n    if (newLines !== null) {\n      return newLines.join(\"\");\n    }\n\n    return null;\n  };\n\n  // Valid comments always return either an empty string or pure newlines,\n  // which we want to keep so that line numbers stay the same\n  public readonly ParseSingleComment = () =>\n    this.OneOf([this.EndOfLineComment, this.BlockComment]);\n\n  public readonly EndOfLineComment = () => {\n    if (this.ParseString(\"//\") === null) {\n      return null;\n    }\n\n    this.ParseUntilCharactersFromCharSet(this._newlineCharacters);\n\n    return \"\";\n  };\n\n  public readonly BlockComment = () => {\n    if (this.ParseString(\"/*\") === null) {\n      return null;\n    }\n\n    const startLineIndex: number = this.lineIndex;\n    const commentResult = this.ParseUntil(\n      this.String(\"*/\"),\n      this._commentBlockEndCharacter,\n      null\n    );\n\n    if (!this.endOfInput) {\n      this.ParseString(\"*/\");\n    }\n\n    // Count the number of lines that were inside the block, and replicate them as newlines\n    // so that the line indexing still works from the original source\n    if (commentResult != null) {\n      return \"\\n\".repeat(this.lineIndex - startLineIndex);\n    }\n\n    // No comment at all\n    return null;\n  };\n\n  public PreProcessInputString(str: string): string {\n    return str;\n  }\n}\n","import { ConditionalSingleBranch } from \"./ConditionalSingleBranch\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Expression } from \"../Expression/Expression\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\n\nexport class Conditional extends ParsedObject {\n  private _reJoinTarget: RuntimeControlCommand | null = null;\n\n  constructor(\n    public initialCondition: Expression,\n    public branches: ConditionalSingleBranch[]\n  ) {\n    super();\n\n    if (this.initialCondition) {\n      this.AddContent(this.initialCondition);\n    }\n\n    if (this.branches !== null) {\n      this.AddContent(this.branches);\n    }\n  }\n\n  get typeName(): string {\n    return \"Conditional\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n\n    // Initial condition\n    if (this.initialCondition) {\n      container.AddContent(this.initialCondition.runtimeObject);\n    }\n\n    // Individual branches\n    for (const branch of this.branches) {\n      const branchContainer = branch.runtimeObject;\n      container.AddContent(branchContainer);\n    }\n\n    // If it's a switch-like conditional, each branch\n    // will have a \"duplicate\" operation for the original\n    // switched value. If there's no final else clause\n    // and we fall all the way through, we need to clean up.\n    // (An else clause doesn't dup but it *does* pop)\n    if (\n      this.initialCondition !== null &&\n      this.branches[0].ownExpression !== null &&\n      !this.branches[this.branches.length - 1].isElse\n    ) {\n      container.AddContent(RuntimeControlCommand.PopEvaluatedValue());\n    }\n\n    // Target for branches to rejoin to\n    this._reJoinTarget = RuntimeControlCommand.NoOp();\n    container.AddContent(this._reJoinTarget);\n\n    return container;\n  };\n\n  public ResolveReferences(context: Story): void {\n    const pathToReJoin = this._reJoinTarget!.path;\n\n    for (const branch of this.branches) {\n      if (!branch.returnDivert) {\n        throw new Error();\n      }\n\n      branch.returnDivert.targetPath = pathToReJoin;\n    }\n\n    super.ResolveReferences(context);\n  }\n}\n","import { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { StringValue } from \"../../../engine/Value\";\n\nexport class Text extends ParsedObject {\n  constructor(public text: string) {\n    super();\n  }\n  get typeName(): string {\n    return \"Text\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject =>\n    new StringValue(this.text);\n\n  public readonly toString = (): string => this.text;\n}\n","import { Expression } from \"../Expression/Expression\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { Identifier } from \"../Identifier\";\n\nexport class ConstantDeclaration extends ParsedObject {\n  get constantName(): string | undefined {\n    return this.constantIdentifier?.name;\n  }\n  public constantIdentifier: Identifier;\n\n  private _expression: Expression | null = null;\n\n  get expression(): Expression {\n    if (!this._expression) {\n      throw new Error();\n    }\n\n    return this._expression;\n  }\n\n  constructor(name: Identifier, assignedExpression: Expression) {\n    super();\n\n    this.constantIdentifier = name;\n\n    // Defensive programming in case parsing of assignedExpression failed\n    if (assignedExpression) {\n      this._expression = this.AddContent(assignedExpression) as Expression;\n    }\n  }\n\n  get typeName(): string {\n    return \"CONST\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject | null => {\n    // Global declarations don't generate actual procedural\n    // runtime objects, but instead add a global variable to the story itself.\n    // The story then initialises them all in one go at the start of the game.\n    return null;\n  };\n\n  public ResolveReferences(context: Story) {\n    super.ResolveReferences(context);\n    context.CheckForNamingCollisions(\n      this,\n      this.constantIdentifier,\n      SymbolType.Var\n    );\n  }\n}\n","export enum FlowLevel {\n  Story, // 0\n  Knot, // 1\n  Stitch, // 2\n  // not actually a FlowBase, but used for diverts\n  WeavePoint, // 3\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { INamedContent } from \"../../../../engine/INamedContent\";\nimport { IWeavePoint } from \"../IWeavePoint\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { Identifier } from \"../Identifier\";\n\nexport class Gather extends ParsedObject implements INamedContent, IWeavePoint {\n  get name(): string | null {\n    return this.identifier?.name || null;\n  }\n  public identifier?: Identifier;\n\n  get runtimeContainer(): RuntimeContainer {\n    return this.runtimeObject as RuntimeContainer;\n  }\n\n  constructor(\n    identifier: Identifier | null,\n    public readonly indentationDepth: number\n  ) {\n    super();\n\n    if (identifier) this.identifier = identifier;\n  }\n\n  get typeName(): string {\n    return \"Gather\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n    container.name = this.name;\n\n    if (this.story.countAllVisits) {\n      container.visitsShouldBeCounted = true;\n    }\n\n    container.countingAtStartOnly = true;\n\n    // A gather can have null content, e.g. it's just purely a line with \"-\"\n    if (this.content) {\n      for (const c of this.content) {\n        container.AddContent(c.runtimeObject);\n      }\n    }\n\n    return container;\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    if (this.identifier && (this.identifier.name || \"\").length > 0) {\n      context.CheckForNamingCollisions(\n        this,\n        this.identifier,\n        SymbolType.SubFlowAndWeave\n      );\n    }\n  }\n\n  public readonly toString = (): string =>\n    `- ${this.identifier?.name ? \"(\" + this.identifier?.name + \")\" : \"gather\"}`;\n}\n","import { asOrNull, filterUndef } from \"../../../engine/TypeAssertion\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { FlowLevel } from \"./Flow/FlowLevel\";\nimport { Identifier } from \"./Identifier\";\nimport { ParsedObject } from \"./Object\";\nimport { Weave } from \"./Weave\";\n\nexport class Path {\n  private _baseTargetLevel: FlowLevel | null;\n  private components: Identifier[] | null;\n\n  get baseTargetLevel() {\n    if (this.baseLevelIsAmbiguous) {\n      return FlowLevel.Story;\n    }\n\n    return this._baseTargetLevel;\n  }\n\n  get baseLevelIsAmbiguous(): boolean {\n    return !this._baseTargetLevel;\n  }\n\n  get firstComponent(): string | null {\n    if (this.components == null || !this.components.length) {\n      return null;\n    }\n\n    return this.components[0].name;\n  }\n\n  get numberOfComponents(): number {\n    return this.components ? this.components.length : 0;\n  }\n\n  private _dotSeparatedComponents: string | null = null;\n\n  get dotSeparatedComponents(): string {\n    if (this._dotSeparatedComponents == null) {\n      this._dotSeparatedComponents = (this.components ? this.components : [])\n        .map((c) => c.name)\n        .filter(filterUndef)\n        .join(\".\");\n    }\n    return this._dotSeparatedComponents;\n  }\n\n  constructor(\n    argOne: FlowLevel | Identifier[] | Identifier,\n    argTwo?: Identifier[]\n  ) {\n    if (Object.values(FlowLevel).includes(argOne as FlowLevel)) {\n      this._baseTargetLevel = argOne as FlowLevel;\n      this.components = argTwo || [];\n    } else if (Array.isArray(argOne)) {\n      this._baseTargetLevel = null;\n      this.components = argOne || [];\n    } else {\n      this._baseTargetLevel = null;\n      this.components = [argOne as Identifier];\n    }\n  }\n\n  get typeName(): string {\n    return \"Path\";\n  }\n\n  public readonly toString = (): string => {\n    if (this.components === null || this.components.length === 0) {\n      if (this.baseTargetLevel === FlowLevel.WeavePoint) {\n        return \"-> <next gather point>\";\n      }\n\n      return \"<invalid Path>\";\n    }\n\n    return `-> ${this.dotSeparatedComponents}`;\n  };\n\n  public readonly ResolveFromContext = (\n    context: ParsedObject\n  ): ParsedObject | null => {\n    if (this.components == null || this.components.length == 0) {\n      return null;\n    }\n\n    // Find base target of path from current context. e.g.\n    //   ==> BASE.sub.sub\n    let baseTargetObject = this.ResolveBaseTarget(context);\n    if (baseTargetObject === null) {\n      return null;\n    }\n\n    // Given base of path, resolve final target by working deeper into hierarchy\n    //  e.g. ==> base.mid.FINAL\n    if (this.components.length > 1) {\n      return this.ResolveTailComponents(baseTargetObject);\n    }\n\n    return baseTargetObject;\n  };\n\n  // Find the root object from the base, i.e. root from:\n  //    root.sub1.sub2\n  public readonly ResolveBaseTarget = (\n    originalContext: ParsedObject\n  ): ParsedObject | null => {\n    const firstComp = this.firstComponent;\n\n    // Work up the ancestry to find the node that has the named object\n    let ancestorContext: ParsedObject | null = originalContext;\n    while (ancestorContext) {\n      // Only allow deep search when searching deeper from original context.\n      // Don't allow search upward *then* downward, since that's searching *everywhere*!\n      // Allowed examples:\n      //  - From an inner gather of a stitch, you should search up to find a knot called 'x'\n      //    at the root of a story, but not a stitch called 'x' in that knot.\n      //  - However, from within a knot, you should be able to find a gather/choice\n      //    anywhere called 'x'\n      // (that latter example is quite loose, but we allow it)\n      const deepSearch: boolean = ancestorContext === originalContext;\n\n      const foundBase = this.GetChildFromContext(\n        ancestorContext,\n        firstComp,\n        null,\n        deepSearch\n      );\n\n      if (foundBase) {\n        return foundBase;\n      }\n\n      ancestorContext = ancestorContext.parent;\n    }\n\n    return null;\n  };\n\n  // Find the final child from path given root, i.e.:\n  //   root.sub.finalChild\n  public readonly ResolveTailComponents = (\n    rootTarget: ParsedObject\n  ): ParsedObject | null => {\n    let foundComponent: ParsedObject | null = rootTarget;\n\n    if (!this.components) return null;\n\n    for (let ii = 1; ii < this.components.length; ++ii) {\n      const compName = this.components[ii].name;\n\n      let minimumExpectedLevel: FlowLevel;\n      let foundFlow = asOrNull(foundComponent, FlowBase);\n      if (foundFlow !== null) {\n        minimumExpectedLevel = (foundFlow.flowLevel + 1) as FlowLevel;\n      } else {\n        minimumExpectedLevel = FlowLevel.WeavePoint;\n      }\n\n      foundComponent = this.GetChildFromContext(\n        foundComponent,\n        compName,\n        minimumExpectedLevel\n      );\n\n      if (foundComponent === null) {\n        break;\n      }\n    }\n\n    return foundComponent;\n  };\n\n  // See whether \"context\" contains a child with a given name at a given flow level\n  // Can either be a named knot/stitch (a FlowBase) or a weave point within a Weave (Choice or Gather)\n  // This function also ignores any other object types that are neither FlowBase nor Weave.\n  // Called from both ResolveBase (force deep) and ResolveTail for the individual components.\n  public readonly GetChildFromContext = (\n    context: ParsedObject,\n    childName: string | null,\n    minimumLevel: FlowLevel | null,\n    forceDeepSearch: boolean = false\n  ): ParsedObject | null => {\n    // null childLevel means that we don't know where to find it\n    const ambiguousChildLevel: boolean = minimumLevel === null;\n\n    // Search for WeavePoint within Weave\n    const weaveContext = asOrNull(context, Weave);\n    if (\n      childName &&\n      weaveContext !== null &&\n      (ambiguousChildLevel || minimumLevel === FlowLevel.WeavePoint)\n    ) {\n      return weaveContext.WeavePointNamed(childName) as ParsedObject;\n    }\n\n    // Search for content within Flow (either a sub-Flow or a WeavePoint)\n    let flowContext = asOrNull(context, FlowBase);\n    if (childName && flowContext !== null) {\n      // When searching within a Knot, allow a deep searches so that\n      // named weave points (choices and gathers) can be found within any stitch\n      // Otherwise, we just search within the immediate object.\n      const shouldDeepSearch =\n        forceDeepSearch || flowContext.flowLevel === FlowLevel.Knot;\n\n      return flowContext.ContentWithNameAtLevel(\n        childName,\n        minimumLevel,\n        shouldDeepSearch\n      );\n    }\n\n    return null;\n  };\n}\n","import { Expression } from \"./Expression/Expression\";\nimport { ParsedObject } from \"./Object\";\nimport { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Void } from \"../../../engine/Void\";\n\nexport class ReturnType extends ParsedObject {\n  public returnedExpression: Expression | null = null;\n\n  constructor(returnedExpression: Expression | null = null) {\n    super();\n\n    if (returnedExpression) {\n      this.returnedExpression = this.AddContent(\n        returnedExpression\n      ) as Expression;\n    }\n  }\n\n  get typeName(): string {\n    return \"ReturnType\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n\n    if (this.returnedExpression) {\n      // Evaluate expression\n      container.AddContent(this.returnedExpression.runtimeObject);\n    } else {\n      // Return Runtime.Void when there's no expression to evaluate\n      // (This evaluation will just add the Void object to the evaluation stack)\n      container.AddContent(RuntimeControlCommand.EvalStart());\n      container.AddContent(new Void());\n      container.AddContent(RuntimeControlCommand.EvalEnd());\n    }\n\n    // Then pop the call stack\n    // (the evaluated expression will leave the return value on the evaluation stack)\n    container.AddContent(RuntimeControlCommand.PopFunction());\n\n    return container;\n  };\n}\n","// import { FlowBase } from './FlowBase';\n\nexport function ClosestFlowBase(obj: any): any | null {\n  let ancestor = obj.parent;\n  while (ancestor) {\n    if (ancestor.hasOwnProperty(\"iamFlowbase\") && ancestor.iamFlowbase()) {\n      return ancestor as any;\n    }\n\n    ancestor = ancestor.parent;\n  }\n\n  return null;\n}\n","import { DebugMetadata } from \"../../../engine/DebugMetadata\";\n\nexport class Identifier {\n  public name: string;\n  public debugMetadata: DebugMetadata | null = null;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  get typeName(): string {\n    return \"Identifier\";\n  }\n\n  public static Done(): Identifier {\n    return new Identifier(\"DONE\");\n  }\n\n  public readonly toString = (): string => this.name || \"undefined identifer\";\n}\n","import { Argument } from \"../Argument\";\nimport { Choice } from \"../Choice\";\nimport { Divert } from \"../Divert/Divert\";\nimport { DivertTarget } from \"../Divert/DivertTarget\";\nimport { FlowLevel } from \"./FlowLevel\";\nimport { Gather } from \"../Gather/Gather\";\nimport { INamedContent } from \"../../../../engine/INamedContent\";\n// import { Knot } from '../Knot';\nimport { ParsedObject } from \"../Object\";\nimport { Path } from \"../Path\";\nimport { ReturnType } from \"../ReturnType\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../../engine/VariableAssignment\";\n//import { Story } from '../Story';\nimport { SymbolType } from \"../SymbolType\";\nimport { VariableAssignment } from \"../Variable/VariableAssignment\";\nimport { Weave } from \"../Weave\";\nimport { ClosestFlowBase } from \"./ClosestFlowBase\";\nimport { Identifier } from \"../Identifier\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\ntype VariableResolveResult = {\n  found: boolean;\n  isGlobal: boolean;\n  isArgument: boolean;\n  isTemporary: boolean;\n  ownerFlow: FlowBase;\n};\n\n// Base class for Knots and Stitches\nexport abstract class FlowBase extends ParsedObject implements INamedContent {\n  public abstract readonly flowLevel: FlowLevel;\n\n  public _rootWeave: Weave | null = null;\n  public _subFlowsByName: Map<string, FlowBase> = new Map();\n  public _startingSubFlowDivert: RuntimeDivert | null = null;\n  public _startingSubFlowRuntime: RuntimeObject | null = null;\n  public _firstChildFlow: FlowBase | null = null;\n  public variableDeclarations: Map<string, VariableAssignment> = new Map();\n\n  get hasParameters() {\n    return this.args !== null && this.args.length > 0;\n  }\n\n  get subFlowsByName() {\n    return this._subFlowsByName;\n  }\n\n  get typeName(): string {\n    if (this.isFunction) {\n      return \"Function\";\n    }\n\n    return String(this.flowLevel);\n  }\n\n  get name(): string | null {\n    return this.identifier?.name || null;\n  }\n\n  public identifier: Identifier | null = null;\n  public args: Argument[] | null = null;\n\n  constructor(\n    identifier: Identifier | null,\n    topLevelObjects: ParsedObject[] | null = null,\n    args: Argument[] | null = null,\n    public readonly isFunction: boolean = false,\n    isIncludedStory: boolean = false\n  ) {\n    super();\n\n    this.identifier = identifier;\n    this.args = args;\n\n    if (topLevelObjects === null) {\n      topLevelObjects = [];\n    }\n\n    // Used by story to add includes\n    this.PreProcessTopLevelObjects(topLevelObjects);\n\n    topLevelObjects = this.SplitWeaveAndSubFlowContent(\n      topLevelObjects,\n      this.GetType() == \"Story\" && !isIncludedStory\n    );\n\n    this.AddContent(topLevelObjects);\n  }\n\n  public iamFlowbase = () => true;\n\n  public readonly SplitWeaveAndSubFlowContent = (\n    contentObjs: ParsedObject[],\n    isRootStory: boolean\n  ): ParsedObject[] => {\n    const weaveObjs: ParsedObject[] = [];\n    const subFlowObjs: ParsedObject[] = [];\n\n    this._subFlowsByName = new Map();\n\n    for (const obj of contentObjs) {\n      const subFlow = asOrNull(obj, FlowBase);\n      if (subFlow) {\n        if (this._firstChildFlow === null) {\n          this._firstChildFlow = subFlow;\n        }\n\n        subFlowObjs.push(obj);\n        if (subFlow.identifier?.name) {\n          this._subFlowsByName.set(subFlow.identifier?.name, subFlow);\n        }\n      } else {\n        weaveObjs.push(obj);\n      }\n    }\n\n    // Implicit final gather in top level story for ending without warning that you run out of content\n    if (isRootStory) {\n      weaveObjs.push(\n        new Gather(null, 1),\n        new Divert(new Path(Identifier.Done()))\n      );\n    }\n\n    const finalContent: ParsedObject[] = [];\n\n    if (weaveObjs.length > 0) {\n      this._rootWeave = new Weave(weaveObjs, 0);\n      finalContent.push(this._rootWeave);\n    }\n\n    if (subFlowObjs.length > 0) {\n      finalContent.push(...subFlowObjs);\n    }\n    return finalContent;\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public PreProcessTopLevelObjects(_: ParsedObject[]): void {\n    // empty by default, used by Story to process included file references\n  }\n\n  public VariableResolveResult?: VariableResolveResult | null | undefined;\n\n  public ResolveVariableWithName = (\n    varName: string,\n    fromNode: ParsedObject\n  ): VariableResolveResult => {\n    const result: VariableResolveResult = {} as any;\n\n    // Search in the stitch / knot that owns the node first\n    const ownerFlow = fromNode === null ? this : ClosestFlowBase(fromNode);\n\n    if (ownerFlow) {\n      // Argument\n      if (ownerFlow.args !== null) {\n        for (const arg of ownerFlow.args) {\n          if (arg.identifier?.name === varName) {\n            result.found = true;\n            result.isArgument = true;\n            result.ownerFlow = ownerFlow;\n            return result;\n          }\n        }\n      }\n\n      // Temp\n      if (\n        ownerFlow !== this.story &&\n        ownerFlow.variableDeclarations.has(varName)\n      ) {\n        result.found = true;\n        result.ownerFlow = ownerFlow;\n        result.isTemporary = true;\n\n        return result;\n      }\n    }\n\n    // Global\n    if (this.story.variableDeclarations.has(varName)) {\n      result.found = true;\n      result.ownerFlow = this.story;\n      result.isGlobal = true;\n\n      return result;\n    }\n\n    result.found = false;\n\n    return result;\n  };\n\n  public AddNewVariableDeclaration = (varDecl: VariableAssignment): void => {\n    const varName = varDecl.variableName;\n    if (this.variableDeclarations.has(varName)) {\n      const varab = this.variableDeclarations.get(varName)!;\n      let prevDeclError = \"\";\n      const debugMetadata = varab.debugMetadata;\n      if (debugMetadata) {\n        prevDeclError = ` (${varab.debugMetadata})`;\n      }\n\n      this.Error(\n        `found declaration variable '${varName}' that was already declared${prevDeclError}`,\n        varDecl,\n        false\n      );\n\n      return;\n    }\n\n    this.variableDeclarations.set(varDecl.variableName, varDecl);\n  };\n\n  public ResolveWeavePointNaming = (): void => {\n    // Find all weave points and organise them by name ready for\n    // diverting. Also detect naming collisions.\n    if (this._rootWeave) {\n      this._rootWeave.ResolveWeavePointNaming();\n    }\n\n    for (const [, value] of this._subFlowsByName) {\n      if (value.hasOwnProperty(\"ResolveWeavePointNaming\")) {\n        value.ResolveWeavePointNaming();\n      }\n    }\n  };\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    let foundReturn: ReturnType | null = null;\n    if (this.isFunction) {\n      this.CheckForDisallowedFunctionFlowControl();\n    } else if (\n      this.flowLevel === FlowLevel.Knot ||\n      this.flowLevel === FlowLevel.Stitch\n    ) {\n      // Non-functon: Make sure knots and stitches don't attempt to use Return statement\n      foundReturn = this.Find(ReturnType)();\n\n      if (foundReturn !== null) {\n        this.Error(\n          `Return statements can only be used in knots that are declared as functions: == function ${this.identifier} ==`,\n          foundReturn\n        );\n      }\n    }\n\n    const container = new RuntimeContainer();\n    container.name = this.identifier?.name as string;\n\n    if (this.story.countAllVisits) {\n      container.visitsShouldBeCounted = true;\n    }\n\n    this.GenerateArgumentVariableAssignments(container);\n\n    // Run through content defined for this knot/stitch:\n    //  - First of all, any initial content before a sub-stitch\n    //    or any weave content is added to the main content container\n    //  - The first inner knot/stitch is automatically entered, while\n    //    the others are only accessible by an explicit divert\n    //       - The exception to this rule is if the knot/stitch takes\n    //         parameters, in which case it can't be auto-entered.\n    //  - Any Choices and Gathers (i.e. IWeavePoint) found are\n    //    processsed by GenerateFlowContent.\n    let contentIdx: number = 0;\n    while (this.content !== null && contentIdx < this.content.length) {\n      const obj: ParsedObject = this.content[contentIdx];\n\n      // Inner knots and stitches\n      if (obj instanceof FlowBase) {\n        const childFlow: FlowBase = obj;\n        const childFlowRuntime = childFlow.runtimeObject;\n\n        // First inner stitch - automatically step into it\n        // 20/09/2016 - let's not auto step into knots\n        if (\n          contentIdx === 0 &&\n          !childFlow.hasParameters &&\n          this.flowLevel === FlowLevel.Knot\n        ) {\n          this._startingSubFlowDivert = new RuntimeDivert();\n          container.AddContent(this._startingSubFlowDivert);\n          this._startingSubFlowRuntime = childFlowRuntime;\n        }\n\n        // Check for duplicate knots/stitches with same name\n        const namedChild = childFlowRuntime as RuntimeObject & INamedContent;\n        const existingChild: INamedContent | null =\n          container.namedContent.get(namedChild.name!) || null;\n\n        if (existingChild) {\n          const errorMsg = `${this.GetType()} already contains flow named '${\n            namedChild.name\n          }' (at ${(existingChild as any as RuntimeObject).debugMetadata})`;\n          this.Error(errorMsg, childFlow);\n        }\n\n        container.AddToNamedContentOnly(namedChild);\n      } else if (obj) {\n        // Other content (including entire Weaves that were grouped in the constructor)\n        // At the time of writing, all FlowBases have a maximum of one piece of \"other content\"\n        // and it's always the root Weave\n        container.AddContent(obj.runtimeObject);\n      }\n\n      contentIdx += 1;\n    }\n\n    // CHECK FOR FINAL LOOSE ENDS!\n    // Notes:\n    //  - Functions don't need to terminate - they just implicitly return\n    //  - If return statement was found, don't continue finding warnings for missing control flow,\n    // since it's likely that a return statement has been used instead of a ->-> or something,\n    // or the writer failed to mark the knot as a function.\n    //  - _rootWeave may be null if it's a knot that only has stitches\n    if (\n      this.flowLevel !== FlowLevel.Story &&\n      !this.isFunction &&\n      this._rootWeave !== null &&\n      foundReturn === null\n    ) {\n      this._rootWeave.ValidateTermination(this.WarningInTermination);\n    }\n\n    return container;\n  };\n\n  public readonly GenerateArgumentVariableAssignments = (\n    container: RuntimeContainer\n  ): void => {\n    if (this.args === null || this.args.length === 0) {\n      return;\n    }\n\n    // Assign parameters in reverse since they'll be popped off the evaluation stack\n    // No need to generate EvalStart and EvalEnd since there's nothing being pushed\n    // back onto the evaluation stack.\n    for (let ii = this.args.length - 1; ii >= 0; --ii) {\n      const paramName = this.args[ii].identifier?.name || null;\n      const assign = new RuntimeVariableAssignment(paramName, true);\n      container.AddContent(assign);\n    }\n  };\n\n  public readonly ContentWithNameAtLevel = (\n    name: string,\n    level: FlowLevel | null = null,\n    deepSearch: boolean = false\n  ): ParsedObject | null => {\n    // Referencing self?\n    if (level === this.flowLevel || level === null) {\n      if (name === this.identifier?.name) {\n        return this;\n      }\n    }\n\n    if (level === FlowLevel.WeavePoint || level === null) {\n      let weavePointResult: ParsedObject | null = null;\n\n      if (this._rootWeave) {\n        weavePointResult = this._rootWeave.WeavePointNamed(\n          name\n        ) as ParsedObject;\n        if (weavePointResult) {\n          return weavePointResult;\n        }\n      }\n\n      // Stop now if we only wanted a result if it's a weave point?\n      if (level === FlowLevel.WeavePoint) {\n        return deepSearch ? this.DeepSearchForAnyLevelContent(name) : null;\n      }\n    }\n\n    // If this flow would be incapable of containing the requested level, early out\n    // (e.g. asking for a Knot from a Stitch)\n    if (level !== null && level < this.flowLevel) {\n      return null;\n    }\n\n    let subFlow: FlowBase | null = this._subFlowsByName.get(name) || null;\n\n    if (subFlow && (level === null || level === subFlow.flowLevel)) {\n      return subFlow;\n    }\n\n    return deepSearch ? this.DeepSearchForAnyLevelContent(name) : null;\n  };\n\n  public readonly DeepSearchForAnyLevelContent = (name: string) => {\n    const weaveResultSelf = this.ContentWithNameAtLevel(\n      name,\n      FlowLevel.WeavePoint,\n      false\n    );\n\n    if (weaveResultSelf) {\n      return weaveResultSelf;\n    }\n\n    for (const [, value] of this._subFlowsByName) {\n      const deepResult = value.ContentWithNameAtLevel(name, null, true);\n\n      if (deepResult) {\n        return deepResult;\n      }\n    }\n\n    return null;\n  };\n\n  public ResolveReferences(context: any): void {\n    if (this._startingSubFlowDivert) {\n      if (!this._startingSubFlowRuntime) {\n        throw new Error();\n      }\n\n      this._startingSubFlowDivert.targetPath =\n        this._startingSubFlowRuntime.path;\n    }\n\n    super.ResolveReferences(context);\n\n    // Check validity of parameter names\n    if (this.args !== null) {\n      for (const arg of this.args) {\n        context.CheckForNamingCollisions(\n          this,\n          arg.identifier,\n          SymbolType.Arg,\n          \"argument\"\n        );\n      }\n\n      // Separately, check for duplicate arugment names, since they aren't Parsed.Objects,\n      // so have to be checked independently.\n      for (let ii = 0; ii < this.args.length; ii += 1) {\n        for (let jj = ii + 1; jj < this.args.length; jj += 1) {\n          if (\n            this.args[ii].identifier?.name == this.args[jj].identifier?.name\n          ) {\n            this.Error(\n              `Multiple arguments with the same name: '${this.args[ii].identifier}'`\n            );\n          }\n        }\n      }\n    }\n\n    // Check naming collisions for knots and stitches\n    if (this.flowLevel !== FlowLevel.Story) {\n      // Weave points aren't FlowBases, so this will only be knot or stitch\n      const symbolType =\n        this.flowLevel === FlowLevel.Knot\n          ? SymbolType.Knot\n          : SymbolType.SubFlowAndWeave;\n\n      context.CheckForNamingCollisions(this, this.identifier, symbolType);\n    }\n  }\n\n  public readonly CheckForDisallowedFunctionFlowControl = (): void => {\n    // if (!(this instanceof Knot)) { // cannont use Knot here because of circular dependancy\n    if (this.flowLevel !== FlowLevel.Knot) {\n      this.Error(\n        \"Functions cannot be stitches - i.e. they should be defined as '== function myFunc ==' rather than internal to another knot.\"\n      );\n    }\n\n    // Not allowed sub-flows\n    for (const [key, value] of this._subFlowsByName) {\n      this.Error(\n        `Functions may not contain stitches, but saw '${key}' within the function '${this.identifier}'`,\n        value\n      );\n    }\n\n    if (!this._rootWeave) {\n      throw new Error();\n    }\n\n    const allDiverts = this._rootWeave.FindAll<Divert>(Divert)();\n    for (const divert of allDiverts) {\n      if (!divert.isFunctionCall && !(divert.parent instanceof DivertTarget)) {\n        this.Error(\n          `Functions may not contain diverts, but saw '${divert}'`,\n          divert\n        );\n      }\n    }\n\n    const allChoices = this._rootWeave.FindAll<Choice>(Choice)();\n    for (const choice of allChoices) {\n      this.Error(\n        `Functions may not contain choices, but saw '${choice}'`,\n        choice\n      );\n    }\n  };\n\n  public readonly WarningInTermination = (terminatingObject: ParsedObject) => {\n    let message: string =\n      \"Apparent loose end exists where the flow runs out. Do you need a '-> DONE' statement, choice or divert?\";\n    if (terminatingObject.parent === this._rootWeave && this._firstChildFlow) {\n      message = `${message} Note that if you intend to enter '${this._firstChildFlow.identifier}' next, you need to divert to it explicitly.`;\n    }\n\n    const terminatingDivert = asOrNull(terminatingObject, Divert);\n    if (terminatingDivert && terminatingDivert.isTunnel) {\n      message += ` When final tunnel to '${terminatingDivert.target} ->' returns it won't have anywhere to go.`;\n    }\n\n    this.Warning(message, terminatingObject);\n  };\n\n  public readonly toString = (): string =>\n    `${this.typeName} '${this.identifier}'`;\n}\n","import { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Text } from \"./Text\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\n\nexport class ContentList extends ParsedObject {\n  public dontFlatten: boolean = false;\n\n  get runtimeContainer(): RuntimeContainer {\n    return this.runtimeObject as RuntimeContainer;\n  }\n\n  constructor(objects?: ParsedObject[], ...moreObjects: ParsedObject[]) {\n    super();\n\n    if (objects) {\n      this.AddContent(objects);\n    }\n\n    if (moreObjects) {\n      this.AddContent(moreObjects);\n    }\n  }\n\n  get typeName(): string {\n    return \"ContentList\";\n  }\n\n  public readonly TrimTrailingWhitespace = (): void => {\n    for (let ii = this.content.length - 1; ii >= 0; --ii) {\n      const text = asOrNull(this.content[ii], Text);\n      if (text === null) {\n        break;\n      }\n\n      text.text = text.text.replace(new RegExp(/[ \\t]/g), \"\");\n      if (text.text.length === 0) {\n        this.content.splice(ii, 1);\n      } else {\n        break;\n      }\n    }\n  };\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n    if (this.content !== null) {\n      for (const obj of this.content) {\n        const contentObjRuntime = obj.runtimeObject;\n\n        // Some objects (e.g. author warnings) don't generate runtime objects\n        if (contentObjRuntime) {\n          container.AddContent(contentObjRuntime);\n        }\n      }\n    }\n\n    if (this.dontFlatten) {\n      this.story.DontFlattenContainer(container);\n    }\n\n    return container;\n  };\n\n  public toString = (): string => `ContentList(${this.content.join(\", \")})`;\n}\n","import { InkObject } from \"./Object\";\nimport { Path } from \"./Path\";\n\nexport class VariableReference extends InkObject {\n  public name: string | null;\n  public pathForCount: Path | null = null;\n\n  get containerForCount() {\n    if (this.pathForCount === null) return null;\n    return this.ResolvePath(this.pathForCount).container;\n  }\n  get pathStringForCount() {\n    if (this.pathForCount === null) return null;\n\n    return this.CompactPathString(this.pathForCount);\n  }\n  set pathStringForCount(value: string | null) {\n    if (value === null) this.pathForCount = null;\n    else this.pathForCount = new Path(value);\n  }\n\n  constructor(name: string | null = null) {\n    super();\n    this.name = name;\n  }\n\n  public toString() {\n    if (this.name != null) {\n      return \"var(\" + this.name + \")\";\n    } else {\n      let pathStr = this.pathStringForCount;\n      return \"read_count(\" + pathStr + \")\";\n    }\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ContentList } from \"../ContentList\";\nimport { Expression } from \"../Expression/Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { ParsedObject } from \"../Object\";\nimport { Path } from \"../Path\";\nimport { Story } from \"../Story\";\nimport { VariableReference as RuntimeVariableReference } from \"../../../../engine/VariableReference\";\nimport { Weave } from \"../Weave\";\nimport { Identifier } from \"../Identifier\";\nimport { asOrNull, filterUndef } from \"../../../../engine/TypeAssertion\";\n\nexport class VariableReference extends Expression {\n  private _runtimeVarRef: RuntimeVariableReference | null = null;\n\n  // - Normal variables have a single item in their \"path\"\n  // - Knot/stitch names for read counts are actual dot-separated paths\n  //   (though this isn't actually used at time of writing)\n  // - List names are dot separated: listName.itemName (or just itemName)\n  get name() {\n    return this.path.join(\".\");\n  }\n\n  get path(): string[] {\n    return this.pathIdentifiers.map((id) => id.name!).filter(filterUndef);\n  }\n\n  get identifier(): Identifier | null {\n    if (!this.pathIdentifiers || this.pathIdentifiers.length == 0) {\n      return null;\n    }\n    const name = this.path.join(\".\");\n    const id = new Identifier(name);\n\n    return id;\n  }\n\n  // Only known after GenerateIntoContainer has run\n  public isConstantReference: boolean = false;\n  public isListItemReference: boolean = false;\n\n  get runtimeVarRef() {\n    return this._runtimeVarRef;\n  }\n\n  constructor(public readonly pathIdentifiers: Identifier[]) {\n    super();\n  }\n\n  get typeName(): string {\n    return \"ref\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    let constantValue: Expression | null | undefined = this.story.constants.get(\n      this.name\n    );\n\n    // If it's a constant reference, just generate the literal expression value\n    // It's okay to access the constants at code generation time, since the\n    // first thing the ExportRuntime function does it search for all the constants\n    // in the story hierarchy, so they're all available.\n    if (constantValue) {\n      constantValue.GenerateConstantIntoContainer(container);\n      this.isConstantReference = true;\n\n      return;\n    }\n\n    this._runtimeVarRef = new RuntimeVariableReference(this.name);\n\n    // List item reference?\n    // Path might be to a list (listName.listItemName or just listItemName)\n    if (this.path.length === 1 || this.path.length === 2) {\n      let listItemName: string = \"\";\n      let listName: string = \"\";\n\n      if (this.path.length === 1) {\n        listItemName = this.path[0];\n      } else {\n        listName = this.path[0];\n        listItemName = this.path[1];\n      }\n\n      const listItem = this.story.ResolveListItem(listName, listItemName, this);\n\n      if (listItem) {\n        this.isListItemReference = true;\n      }\n    }\n\n    container.AddContent(this._runtimeVarRef);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // Work is already done if it's a constant or list item reference\n    if (this.isConstantReference || this.isListItemReference) {\n      return;\n    }\n\n    // Is it a read count?\n    const parsedPath = new Path(this.pathIdentifiers);\n    const targetForCount: ParsedObject | null =\n      parsedPath.ResolveFromContext(this);\n    if (targetForCount) {\n      if (!targetForCount.containerForCounting) {\n        throw new Error();\n      }\n\n      targetForCount.containerForCounting.visitsShouldBeCounted = true;\n\n      // If this is an argument to a function that wants a variable to be\n      // passed by reference, then the Parsed.Divert will have generated a\n      // Runtime.VariablePointerValue instead of allowing this object\n      // to generate its RuntimeVariableReference. This only happens under\n      // error condition since we shouldn't be passing a read count by\n      // reference, but we don't want it to crash!\n      if (this._runtimeVarRef === null) {\n        return;\n      }\n\n      this._runtimeVarRef.pathForCount = targetForCount.runtimePath;\n      this._runtimeVarRef.name = null;\n\n      // Check for very specific writer error: getting read count and\n      // printing it as content rather than as a piece of logic\n      // e.g. Writing {myFunc} instead of {myFunc()}\n      let targetFlow = asOrNull(targetForCount, FlowBase);\n      if (targetFlow && targetFlow.isFunction) {\n        // Is parent context content rather than logic?\n        if (\n          this.parent instanceof Weave ||\n          this.parent instanceof ContentList ||\n          this.parent instanceof FlowBase\n        ) {\n          this.Warning(\n            `'${targetFlow.identifier}' being used as read count rather than being called as function. Perhaps you intended to write ${targetFlow.identifier}()`\n          );\n        }\n      }\n\n      return;\n    }\n\n    // Couldn't find this multi-part path at all, whether as a divert\n    // target or as a list item reference.\n    if (this.path.length > 1) {\n      let errorMsg = `Could not find target for read count: ${parsedPath}`;\n      if (this.path.length <= 2) {\n        errorMsg += `, or couldn't find list item with the name ${this.path.join(\n          \",\"\n        )}`;\n      }\n\n      this.Error(errorMsg);\n\n      return;\n    }\n\n    if (!context.ResolveVariableWithName(this.name, this).found) {\n      this.Error(`Unresolved variable: ${this.name}`, this);\n    }\n  }\n\n  public readonly toString = (): string => `{${this.path.join(\".\")}}`;\n}\n","import { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { Divert } from \"./Divert/Divert\";\nimport { Divert as RuntimeDivert } from \"../../../engine/Divert\";\nimport { DivertTarget } from \"./Divert/DivertTarget\";\nimport { Expression } from \"./Expression/Expression\";\nimport { InkList as RuntimeInkList } from \"../../../engine/InkList\";\nimport { ListValue } from \"../../../engine/Value\";\nimport { NativeFunctionCall } from \"../../../engine/NativeFunctionCall\";\nimport { NumberExpression } from \"./Expression/NumberExpression\";\nimport { Path } from \"./Path\";\nimport { Story } from \"./Story\";\nimport { StringValue } from \"../../../engine/Value\";\nimport { VariableReference } from \"./Variable/VariableReference\";\nimport { Identifier } from \"./Identifier\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\n\nexport class FunctionCall extends Expression {\n  public static readonly IsBuiltIn = (name: string): boolean => {\n    if (NativeFunctionCall.CallExistsWithName(name)) {\n      return true;\n    }\n\n    return (\n      name === \"CHOICE_COUNT\" ||\n      name === \"TURNS_SINCE\" ||\n      name === \"TURNS\" ||\n      name === \"RANDOM\" ||\n      name === \"SEED_RANDOM\" ||\n      name === \"LIST_VALUE\" ||\n      name === \"LIST_RANDOM\" ||\n      name === \"READ_COUNT\"\n    );\n  };\n\n  private _proxyDivert: Divert;\n  get proxyDivert(): Divert {\n    return this._proxyDivert;\n  }\n  private _divertTargetToCount: DivertTarget | null = null;\n  private _variableReferenceToCount: VariableReference | null = null;\n\n  get name(): string {\n    return (this._proxyDivert.target as Path).firstComponent || \"\";\n  }\n\n  get args(): Expression[] {\n    return this._proxyDivert.args;\n  }\n\n  get runtimeDivert(): RuntimeDivert {\n    return this._proxyDivert.runtimeDivert;\n  }\n\n  get isChoiceCount(): boolean {\n    return this.name === \"CHOICE_COUNT\";\n  }\n\n  get isTurns(): boolean {\n    return this.name === \"TURNS\";\n  }\n\n  get isTurnsSince(): boolean {\n    return this.name === \"TURNS_SINCE\";\n  }\n\n  get isRandom(): boolean {\n    return this.name === \"RANDOM\";\n  }\n\n  get isSeedRandom(): boolean {\n    return this.name === \"SEED_RANDOM\";\n  }\n\n  get isListRange(): boolean {\n    return this.name === \"LIST_RANGE\";\n  }\n\n  get isListRandom(): boolean {\n    return this.name === \"LIST_RANDOM\";\n  }\n\n  get isReadCount(): boolean {\n    return this.name === \"READ_COUNT\";\n  }\n\n  public shouldPopReturnedValue: boolean = false;\n\n  constructor(functionName: Identifier, args: Expression[]) {\n    super();\n\n    this._proxyDivert = new Divert(new Path(functionName), args);\n    this._proxyDivert.isFunctionCall = true;\n    this.AddContent(this._proxyDivert);\n  }\n\n  get typeName(): string {\n    return \"FunctionCall\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    const foundList = this.story.ResolveList(this.name);\n\n    let usingProxyDivert: boolean = false;\n\n    if (this.isChoiceCount) {\n      if (this.args.length > 0) {\n        this.Error(\"The CHOICE_COUNT() function shouldn't take any arguments\");\n      }\n\n      container.AddContent(RuntimeControlCommand.ChoiceCount());\n    } else if (this.isTurns) {\n      if (this.args.length > 0) {\n        this.Error(\"The TURNS() function shouldn't take any arguments\");\n      }\n\n      container.AddContent(RuntimeControlCommand.Turns());\n    } else if (this.isTurnsSince || this.isReadCount) {\n      const divertTarget = asOrNull(this.args[0], DivertTarget);\n      const variableDivertTarget = asOrNull(this.args[0], VariableReference);\n\n      if (\n        this.args.length !== 1 ||\n        (divertTarget === null && variableDivertTarget === null)\n      ) {\n        this.Error(\n          `The ${this.name}() function should take one argument: a divert target to the target knot, stitch, gather or choice you want to check. e.g. TURNS_SINCE(-> myKnot)`\n        );\n        return;\n      }\n\n      if (divertTarget) {\n        this._divertTargetToCount = divertTarget;\n        this.AddContent(this._divertTargetToCount);\n\n        this._divertTargetToCount.GenerateIntoContainer(container);\n      } else if (variableDivertTarget) {\n        this._variableReferenceToCount = variableDivertTarget;\n        this.AddContent(this._variableReferenceToCount);\n\n        this._variableReferenceToCount.GenerateIntoContainer(container);\n      }\n\n      if (this.isTurnsSince) {\n        container.AddContent(RuntimeControlCommand.TurnsSince());\n      } else {\n        container.AddContent(RuntimeControlCommand.ReadCount());\n      }\n    } else if (this.isRandom) {\n      if (this.args.length !== 2) {\n        this.Error(\n          \"RANDOM should take 2 parameters: a minimum and a maximum integer\"\n        );\n      }\n\n      // We can type check single values, but not complex expressions\n      for (let ii = 0; ii < this.args.length; ii += 1) {\n        const num = asOrNull(this.args[ii], NumberExpression);\n        if (num && !num.isInt()) {\n          const paramName: string = ii === 0 ? \"minimum\" : \"maximum\";\n          this.Error(`RANDOM's ${paramName} parameter should be an integer`);\n        }\n\n        this.args[ii].GenerateIntoContainer(container);\n      }\n\n      container.AddContent(RuntimeControlCommand.Random());\n    } else if (this.isSeedRandom) {\n      if (this.args.length !== 1) {\n        this.Error(\"SEED_RANDOM should take 1 parameter - an integer seed\");\n      }\n\n      const num = asOrNull(this.args[0], NumberExpression);\n      if (num && !num.isInt()) {\n        this.Error(\"SEED_RANDOM's parameter should be an integer seed\");\n      }\n\n      this.args[0].GenerateIntoContainer(container);\n\n      container.AddContent(RuntimeControlCommand.SeedRandom());\n    } else if (this.isListRange) {\n      if (this.args.length !== 3) {\n        this.Error(\n          \"LIST_RANGE should take 3 parameters - a list, a min and a max\"\n        );\n      }\n\n      for (let ii = 0; ii < this.args.length; ii += 1) {\n        this.args[ii].GenerateIntoContainer(container);\n      }\n\n      container.AddContent(RuntimeControlCommand.ListRange());\n    } else if (this.isListRandom) {\n      if (this.args.length !== 1) {\n        this.Error(\"LIST_RANDOM should take 1 parameter - a list\");\n      }\n\n      this.args[0].GenerateIntoContainer(container);\n\n      container.AddContent(RuntimeControlCommand.ListRandom());\n    } else if (NativeFunctionCall.CallExistsWithName(this.name)) {\n      const nativeCall = NativeFunctionCall.CallWithName(this.name);\n      if (nativeCall.numberOfParameters !== this.args.length) {\n        let msg = `${FunctionCall.name} should take ${nativeCall.numberOfParameters} parameter`;\n        if (nativeCall.numberOfParameters > 1) {\n          msg += \"s\";\n        }\n\n        this.Error(msg);\n      }\n\n      for (let ii = 0; ii < this.args.length; ii += 1) {\n        this.args[ii].GenerateIntoContainer(container);\n      }\n\n      container.AddContent(NativeFunctionCall.CallWithName(this.name));\n    } else if (foundList !== null) {\n      if (this.args.length > 1) {\n        this.Error(\n          \"Can currently only construct a list from one integer (or an empty list from a given list definition)\"\n        );\n      }\n\n      // List item from given int\n      if (this.args.length === 1) {\n        container.AddContent(new StringValue(this.name));\n        this.args[0].GenerateIntoContainer(container);\n        container.AddContent(RuntimeControlCommand.ListFromInt());\n      } else {\n        // Empty list with given origin.\n        const list = new RuntimeInkList();\n        list.SetInitialOriginName(this.name);\n        container.AddContent(new ListValue(list));\n      }\n    } else {\n      // Normal function call\n      container.AddContent(this._proxyDivert.runtimeObject);\n      usingProxyDivert = true;\n    }\n\n    // Don't attempt to resolve as a divert if we're not doing a normal function call\n    if (!usingProxyDivert) {\n      this.content.splice(this.content.indexOf(this._proxyDivert), 1);\n    }\n\n    // Function calls that are used alone on a tilda-based line:\n    //  ~ func()\n    // Should tidy up any returned value from the evaluation stack,\n    // since it's unused.\n    if (this.shouldPopReturnedValue) {\n      container.AddContent(RuntimeControlCommand.PopEvaluatedValue());\n    }\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // If we aren't using the proxy divert after all (e.g. if\n    // it's a native function call), but we still have arguments,\n    // we need to make sure they get resolved since the proxy divert\n    // is no longer in the content array.\n    if (!this.content.includes(this._proxyDivert) && this.args !== null) {\n      for (const arg of this.args) {\n        arg.ResolveReferences(context);\n      }\n    }\n\n    if (this._divertTargetToCount) {\n      const divert = this._divertTargetToCount.divert;\n      const attemptingTurnCountOfVariableTarget =\n        divert.runtimeDivert.variableDivertName != null;\n\n      if (attemptingTurnCountOfVariableTarget) {\n        this.Error(\n          `When getting the TURNS_SINCE() of a variable target, remove the '->' - i.e. it should just be TURNS_SINCE(${divert.runtimeDivert.variableDivertName})`\n        );\n\n        return;\n      }\n\n      const targetObject = divert.targetContent;\n      if (targetObject === null) {\n        if (!attemptingTurnCountOfVariableTarget) {\n          this.Error(\n            `Failed to find target for TURNS_SINCE: '${divert.target}'`\n          );\n        }\n      } else {\n        if (!targetObject.containerForCounting) {\n          throw new Error();\n        }\n\n        targetObject.containerForCounting.turnIndexShouldBeCounted = true;\n      }\n    } else if (this._variableReferenceToCount) {\n      const runtimeVarRef = this._variableReferenceToCount.runtimeVarRef;\n      if (!runtimeVarRef) {\n        throw new Error();\n      }\n\n      if (runtimeVarRef.pathForCount !== null) {\n        this.Error(\n          `Should be '${FunctionCall.name}'(-> '${this._variableReferenceToCount.name}). Usage without the '->' only makes sense for variable targets.`\n        );\n      }\n    }\n  }\n\n  public readonly toString = (): string => {\n    const strArgs = this.args.join(\", \");\n    return `${this.name}(${strArgs})`;\n  };\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"./Expression\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\n\nexport class MultipleConditionExpression extends Expression {\n  get subExpressions(): Expression[] {\n    return this.content as Expression[];\n  }\n\n  constructor(conditionExpressions: Expression[]) {\n    super();\n\n    this.AddContent(conditionExpressions);\n  }\n\n  get typeName(): string {\n    return \"MultipleConditionExpression\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    //    A && B && C && D\n    // => (((A B &&) C &&) D &&) etc\n    let isFirst: boolean = true;\n    for (const conditionExpr of this.subExpressions) {\n      conditionExpr.GenerateIntoContainer(container);\n\n      if (!isFirst) {\n        container.AddContent(NativeFunctionCall.CallWithName(\"&&\"));\n      }\n\n      isFirst = false;\n    }\n  };\n}\n","import { BinaryExpression } from \"../Expression/BinaryExpression\";\nimport { Choice } from \"../Choice\";\nimport { Conditional } from \"../Conditional/Conditional\";\nimport { ConditionalSingleBranch } from \"../Conditional/ConditionalSingleBranch\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ParsedObject } from \"../Object\";\nimport { Divert } from \"./Divert\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { DivertTargetValue } from \"../../../../engine/Value\";\nimport { Expression } from \"../Expression/Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { FunctionCall } from \"../FunctionCall\";\nimport { MultipleConditionExpression } from \"../Expression/MultipleConditionExpression\";\nimport { Story } from \"../Story\";\nimport { VariableReference } from \"../Variable/VariableReference\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class DivertTarget extends Expression {\n  private _runtimeDivert: RuntimeDivert | null = null;\n  get runtimeDivert(): RuntimeDivert {\n    if (!this._runtimeDivert) {\n      throw new Error();\n    }\n\n    return this._runtimeDivert;\n  }\n\n  private _runtimeDivertTargetValue: DivertTargetValue | null = null;\n  get runtimeDivertTargetValue(): DivertTargetValue {\n    if (!this._runtimeDivertTargetValue) {\n      throw new Error();\n    }\n\n    return this._runtimeDivertTargetValue;\n  }\n\n  public divert: Divert;\n\n  constructor(divert: Divert) {\n    super();\n\n    this.divert = this.AddContent(divert) as Divert;\n  }\n\n  get typeName(): string {\n    return \"DivertTarget\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    this.divert.GenerateRuntimeObject();\n\n    this._runtimeDivert = this.divert.runtimeDivert as RuntimeDivert;\n    this._runtimeDivertTargetValue = new DivertTargetValue();\n\n    container.AddContent(this.runtimeDivertTargetValue);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    if (this.divert.isDone || this.divert.isEnd) {\n      this.Error(\n        `Can't use -> DONE or -> END as variable divert targets`,\n        this\n      );\n\n      return;\n    }\n\n    let usageContext: ParsedObject | null = this;\n    while (usageContext && usageContext instanceof Expression) {\n      let badUsage: boolean = false;\n      let foundUsage: boolean = false;\n\n      const usageParent: any = (usageContext as Expression).parent;\n      if (usageParent instanceof BinaryExpression) {\n        // Only allowed to compare for equality\n\n        const binaryExprParent = usageParent;\n        if (\n          binaryExprParent.opName !== \"==\" &&\n          binaryExprParent.opName !== \"!=\"\n        ) {\n          badUsage = true;\n        } else {\n          if (\n            !(\n              binaryExprParent.leftExpression instanceof DivertTarget ||\n              binaryExprParent.leftExpression instanceof VariableReference\n            )\n          ) {\n            badUsage = true;\n          } else if (\n            !(\n              binaryExprParent.rightExpression instanceof DivertTarget ||\n              binaryExprParent.rightExpression instanceof VariableReference\n            )\n          ) {\n            badUsage = true;\n          }\n        }\n\n        foundUsage = true;\n      } else if (usageParent instanceof FunctionCall) {\n        const funcCall = usageParent;\n        if (!funcCall.isTurnsSince && !funcCall.isReadCount) {\n          badUsage = true;\n        }\n\n        foundUsage = true;\n      } else if (usageParent instanceof Expression) {\n        badUsage = true;\n        foundUsage = true;\n      } else if (usageParent instanceof MultipleConditionExpression) {\n        badUsage = true;\n        foundUsage = true;\n      } else if (\n        usageParent instanceof Choice &&\n        (usageParent as Choice).condition === usageContext\n      ) {\n        badUsage = true;\n        foundUsage = true;\n      } else if (\n        usageParent instanceof Conditional ||\n        usageParent instanceof ConditionalSingleBranch\n      ) {\n        badUsage = true;\n        foundUsage = true;\n      }\n\n      if (badUsage) {\n        this.Error(\n          `Can't use a divert target like that. Did you intend to call '${this.divert.target}' as a function: likeThis(), or check the read count: likeThis, with no arrows?`,\n          this\n        );\n      }\n\n      if (foundUsage) {\n        break;\n      }\n\n      usageContext = usageParent;\n    }\n\n    // Example ink for this case:\n    //\n    //     VAR x = -> blah\n    //\n    // ...which means that \"blah\" is expected to be a literal stitch target rather\n    // than a variable name. We can't really intelligently recover from this (e.g. if blah happens to\n    // contain a divert target itself) since really we should be generating a variable reference\n    // rather than a concrete DivertTarget, so we list it as an error.\n    if (this.runtimeDivert.hasVariableTarget) {\n      if (!this.divert.target) {\n        throw new Error();\n      }\n\n      this.Error(\n        `Since '${this.divert.target.dotSeparatedComponents}' is a variable, it shouldn't be preceded by '->' here.`\n      );\n    }\n\n    // Main resolve\n    this.runtimeDivert.targetPath &&\n      (this.runtimeDivertTargetValue.targetPath =\n        this.runtimeDivert.targetPath);\n\n    // Tell hard coded (yet variable) divert targets that they also need to be counted\n    // TODO: Only detect DivertTargets that are values rather than being used directly for\n    // read or turn counts. Should be able to detect this by looking for other uses of containerForCounting\n    let targetContent = this.divert.targetContent;\n    if (targetContent !== null) {\n      let target = targetContent.containerForCounting;\n      if (target !== null) {\n        // Purpose is known: used directly in TURNS_SINCE(-> divTarg)\n        const parentFunc = asOrNull(this.parent, FunctionCall);\n        if (parentFunc && parentFunc.isTurnsSince) {\n          target.turnIndexShouldBeCounted = true;\n        } else {\n          // Unknown purpose, count everything\n          target.visitsShouldBeCounted = true;\n          target.turnIndexShouldBeCounted = true;\n        }\n      }\n\n      // Unfortunately not possible:\n      // https://github.com/inkle/ink/issues/538\n      //\n      // VAR func = -> double\n      //\n      // === function double(ref x)\n      //    ~ x = x * 2\n      //\n      // Because when generating the parameters for a function\n      // to be called, it needs to know ahead of time when\n      // compiling whether to pass a variable reference or value.\n      //\n      let targetFlow = asOrNull(targetContent, FlowBase);\n      if (targetFlow != null && targetFlow.args !== null) {\n        for (const arg of targetFlow.args) {\n          if (arg.isByReference) {\n            this.Error(\n              `Can't store a divert target to a knot or function that has by-reference arguments ('${targetFlow.identifier}' has 'ref ${arg.identifier}').`\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // Equals override necessary in order to check for CONST multiple definition equality\n  public readonly Equals = (obj: ParsedObject): boolean => {\n    const otherDivTarget = asOrNull(obj, DivertTarget);\n    if (\n      !otherDivTarget ||\n      !this.divert.target ||\n      !otherDivTarget.divert.target\n    ) {\n      return false;\n    }\n\n    const targetStr = this.divert.target.dotSeparatedComponents;\n    const otherTargetStr = otherDivTarget.divert.target.dotSeparatedComponents;\n\n    return targetStr === otherTargetStr;\n  };\n}\n","import { Argument } from \"../Argument\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { DivertTarget } from \"./DivertTarget\";\nimport { Expression } from \"../Expression/Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { FunctionCall } from \"../FunctionCall\";\nimport { ParsedObject } from \"../Object\";\nimport { Path } from \"../Path\";\nimport { Path as RuntimePath } from \"../../../../engine/Path\";\nimport { PushPopType } from \"../../../../engine/PushPop\";\nimport { Story } from \"../Story\";\nimport { VariablePointerValue } from \"../../../../engine/Value\";\nimport { VariableReference } from \"../Variable/VariableReference\";\nimport { ClosestFlowBase } from \"../Flow/ClosestFlowBase\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class Divert extends ParsedObject {\n  public readonly args: Expression[] = [];\n\n  public readonly target: Path | null = null;\n  public targetContent: ParsedObject | null = null;\n  private _runtimeDivert: RuntimeDivert | null = null;\n  get runtimeDivert(): RuntimeDivert {\n    if (!this._runtimeDivert) {\n      throw new Error();\n    }\n\n    return this._runtimeDivert;\n  }\n\n  set runtimeDivert(value: RuntimeDivert) {\n    this._runtimeDivert = value;\n  }\n\n  public isFunctionCall: boolean = false;\n  public isEmpty: boolean = false;\n  public isTunnel: boolean = false;\n  public isThread: boolean = false;\n\n  get isEnd(): boolean {\n    return Boolean(this.target && this.target.dotSeparatedComponents === \"END\");\n  }\n\n  get isDone(): boolean {\n    return Boolean(\n      this.target && this.target.dotSeparatedComponents === \"DONE\"\n    );\n  }\n\n  constructor(target?: Path | null | undefined, args?: Expression[]) {\n    super();\n\n    if (target) {\n      this.target = target;\n    }\n\n    if (args) {\n      this.args = args;\n      this.AddContent(args);\n    }\n  }\n\n  get typeName(): string {\n    return \"Divert\";\n  }\n\n  public readonly GenerateRuntimeObject = () => {\n    // End = end flow immediately\n    // Done = return from thread or instruct the flow that it's safe to exit\n    if (this.isEnd) {\n      return RuntimeControlCommand.End();\n    } else if (this.isDone) {\n      return RuntimeControlCommand.Done();\n    }\n\n    this.runtimeDivert = new RuntimeDivert();\n\n    // Normally we resolve the target content during the\n    // Resolve phase, since we expect all runtime objects to\n    // be available in order to find the final runtime path for\n    // the destination. However, we need to resolve the target\n    // (albeit without the runtime target) early so that\n    // we can get information about the arguments - whether\n    // they're by reference - since it affects the code we\n    // generate here.\n    this.ResolveTargetContent();\n\n    this.CheckArgumentValidity();\n\n    // Passing arguments to the knot\n    const requiresArgCodeGen = this.args !== null && this.args.length > 0;\n    if (\n      requiresArgCodeGen ||\n      this.isFunctionCall ||\n      this.isTunnel ||\n      this.isThread\n    ) {\n      const container = new RuntimeContainer();\n\n      // Generate code for argument evaluation\n      // This argument generation is coded defensively - it should\n      // attempt to generate the code for all the parameters, even if\n      // they don't match the expected arguments. This is so that the\n      // parameter objects themselves are generated correctly and don't\n      // get into a state of attempting to resolve references etc\n      // without being generated.\n      if (requiresArgCodeGen) {\n        // Function calls already in an evaluation context\n        if (!this.isFunctionCall) {\n          container.AddContent(RuntimeControlCommand.EvalStart());\n        }\n\n        let targetArguments: Argument[] | null = null;\n        if (this.targetContent) {\n          targetArguments = (this.targetContent as FlowBase).args;\n        }\n\n        for (let ii = 0; ii < this.args.length; ++ii) {\n          const argToPass: Expression = this.args[ii];\n          let argExpected: Argument | null = null;\n          if (targetArguments && ii < targetArguments.length) {\n            argExpected = targetArguments[ii];\n          }\n\n          // Pass by reference: argument needs to be a variable reference\n          if (argExpected && argExpected.isByReference) {\n            const varRef = asOrNull(argToPass, VariableReference);\n            if (!varRef) {\n              this.Error(\n                `Expected variable name to pass by reference to 'ref ${argExpected.identifier}' but saw ${argToPass}`\n              );\n\n              break;\n            }\n\n            // Check that we're not attempting to pass a read count by reference\n            const targetPath = new Path(varRef.pathIdentifiers);\n            const targetForCount: ParsedObject | null =\n              targetPath.ResolveFromContext(this);\n            if (targetForCount) {\n              this.Error(\n                `can't pass a read count by reference. '${\n                  targetPath.dotSeparatedComponents\n                }' is a knot/stitch/label, but '${\n                  this.target!.dotSeparatedComponents\n                }' requires the name of a VAR to be passed.`\n              );\n\n              break;\n            }\n\n            const varPointer = new VariablePointerValue(varRef.name);\n            container.AddContent(varPointer);\n          } else {\n            // Normal value being passed: evaluate it as normal\n            argToPass.GenerateIntoContainer(container);\n          }\n        }\n\n        // Function calls were already in an evaluation context\n        if (!this.isFunctionCall) {\n          container.AddContent(RuntimeControlCommand.EvalEnd());\n        }\n      }\n\n      // Starting a thread? A bit like a push to the call stack below... but not.\n      // It sort of puts the call stack on a thread stack (argh!) - forks the full flow.\n      if (this.isThread) {\n        container.AddContent(RuntimeControlCommand.StartThread());\n      } else if (this.isFunctionCall || this.isTunnel) {\n        // If this divert is a function call, tunnel, we push to the call stack\n        // so we can return again\n        this.runtimeDivert.pushesToStack = true;\n        this.runtimeDivert.stackPushType = this.isFunctionCall\n          ? PushPopType.Function\n          : PushPopType.Tunnel;\n      }\n\n      // Jump into the \"function\" (knot/stitch)\n      container.AddContent(this.runtimeDivert);\n\n      return container;\n    }\n\n    // Simple divert\n    return this.runtimeDivert;\n  };\n\n  // When the divert is to a target that's actually a variable name\n  // rather than an explicit knot/stitch name, try interpretting it\n  // as such by getting the variable name.\n  public readonly PathAsVariableName = () =>\n    this.target ? this.target.firstComponent : null;\n\n  public readonly ResolveTargetContent = (): void => {\n    if (this.isEmpty || this.isEnd) {\n      return;\n    }\n\n    if (this.targetContent === null) {\n      // Is target of this divert a variable name that will be de-referenced\n      // at runtime? If so, there won't be any further reference resolution\n      // we can do at this point.\n      let variableTargetName = this.PathAsVariableName();\n      if (variableTargetName !== null) {\n        const flowBaseScope = asOrNull(ClosestFlowBase(this), FlowBase);\n        if (flowBaseScope) {\n          const resolveResult = flowBaseScope.ResolveVariableWithName(\n            variableTargetName,\n            this\n          );\n\n          if (resolveResult.found) {\n            // Make sure that the flow was typed correctly, given that we know that this\n            // is meant to be a divert target\n            if (\n              resolveResult.isArgument &&\n              resolveResult.ownerFlow &&\n              resolveResult.ownerFlow.args\n            ) {\n              let argument = resolveResult.ownerFlow.args.find(\n                (a) => a.identifier?.name == variableTargetName\n              );\n\n              if (argument && !argument.isDivertTarget) {\n                this.Error(\n                  `Since '${argument.identifier}' is used as a variable divert target (on ${this.debugMetadata}), it should be marked as: -> ${argument.identifier}`,\n                  resolveResult.ownerFlow\n                );\n              }\n            }\n\n            this.runtimeDivert.variableDivertName = variableTargetName;\n            return;\n          }\n        }\n      }\n\n      if (!this.target) {\n        throw new Error();\n      }\n\n      this.targetContent = this.target.ResolveFromContext(this);\n    }\n  };\n\n  public ResolveReferences(context: Story): void {\n    if (this.isEmpty || this.isEnd || this.isDone) {\n      return;\n    } else if (!this.runtimeDivert) {\n      throw new Error();\n    }\n\n    if (this.targetContent) {\n      this.runtimeDivert.targetPath = this.targetContent.runtimePath;\n    }\n\n    // Resolve children (the arguments)\n    super.ResolveReferences(context);\n\n    // May be null if it's a built in function (e.g. TURNS_SINCE)\n    // or if it's a variable target.\n    let targetFlow = asOrNull(this.targetContent, FlowBase);\n    if (targetFlow) {\n      if (!targetFlow.isFunction && this.isFunctionCall) {\n        super.Error(\n          `${targetFlow.identifier} hasn't been marked as a function, but it's being called as one. Do you need to declare the knot as '== function ${targetFlow.identifier} =='?`\n        );\n      } else if (\n        targetFlow.isFunction &&\n        !this.isFunctionCall &&\n        !(this.parent instanceof DivertTarget)\n      ) {\n        super.Error(\n          targetFlow.identifier +\n            \" can't be diverted to. It can only be called as a function since it's been marked as such: '\" +\n            targetFlow.identifier +\n            \"(...)'\"\n        );\n      }\n    }\n\n    // Check validity of target content\n    const targetWasFound = this.targetContent !== null;\n    let isBuiltIn: boolean = false;\n    let isExternal: boolean = false;\n\n    if (!this.target) {\n      throw new Error();\n    } else if (this.target.numberOfComponents === 1) {\n      if (!this.target.firstComponent) {\n        throw new Error();\n      }\n\n      // BuiltIn means TURNS_SINCE, CHOICE_COUNT, RANDOM or SEED_RANDOM\n      isBuiltIn = FunctionCall.IsBuiltIn(this.target.firstComponent);\n\n      // Client-bound function?\n      isExternal = context.IsExternal(this.target.firstComponent);\n\n      if (isBuiltIn || isExternal) {\n        if (!this.isFunctionCall) {\n          super.Error(\n            `${this.target.firstComponent} must be called as a function: ~ ${this.target.firstComponent}()`\n          );\n        }\n\n        if (isExternal) {\n          this.runtimeDivert.isExternal = true;\n          if (this.args !== null) {\n            this.runtimeDivert.externalArgs = this.args.length;\n          }\n\n          this.runtimeDivert.pushesToStack = false;\n          this.runtimeDivert.targetPath = new RuntimePath(\n            this.target.firstComponent\n          );\n\n          this.CheckExternalArgumentValidity(context);\n        }\n\n        return;\n      }\n    }\n\n    // Variable target?\n    if (this.runtimeDivert.variableDivertName != null) {\n      return;\n    }\n\n    if (!targetWasFound && !isBuiltIn && !isExternal) {\n      this.Error(`target not found: '${this.target}'`);\n    }\n  }\n\n  // Returns false if there's an error\n  public readonly CheckArgumentValidity = (): void => {\n    if (this.isEmpty) {\n      return;\n    }\n\n    // Argument passing: Check for errors in number of arguments\n    let numArgs = 0;\n    if (this.args !== null && this.args.length > 0) {\n      numArgs = this.args.length;\n    }\n\n    // Missing content?\n    // Can't check arguments properly. It'll be due to some\n    // other error though, so although there's a problem and\n    // we report false, we don't need to report a specific error.\n    // It may also be because it's a valid call to an external\n    // function, that we check at the resolve stage.\n    if (this.targetContent === null) {\n      return;\n    }\n\n    const targetFlow = asOrNull(this.targetContent, FlowBase);\n\n    // No error, crikey!\n    if (numArgs === 0 && (targetFlow === null || !targetFlow.hasParameters)) {\n      return;\n    } else if (targetFlow === null && numArgs > 0) {\n      this.Error(\n        \"target needs to be a knot or stitch in order to pass arguments\"\n      );\n      return;\n    } else if (\n      targetFlow !== null &&\n      (targetFlow.args === null || (!targetFlow.args && numArgs > 0))\n    ) {\n      this.Error(`target (${targetFlow.name}) doesn't take parameters`);\n      return;\n    } else if (this.parent instanceof DivertTarget) {\n      if (numArgs > 0) {\n        this.Error(`can't store arguments in a divert target variable`);\n      }\n\n      return;\n    }\n\n    const paramCount = targetFlow!.args!.length;\n    if (paramCount !== numArgs) {\n      let butClause: string;\n      if (numArgs === 0) {\n        butClause = \"but there weren't any passed to it\";\n      } else if (numArgs < paramCount) {\n        butClause = `but only got ${numArgs}`;\n      } else {\n        butClause = `but got ${numArgs}`;\n      }\n\n      this.Error(\n        `to '${\n          targetFlow!.identifier\n        }' requires ${paramCount} arguments, ${butClause}`\n      );\n\n      return;\n    }\n\n    // Light type-checking for divert target arguments\n    for (let ii = 0; ii < paramCount; ++ii) {\n      const flowArg: Argument = targetFlow!.args![ii];\n      const divArgExpr: Expression = this.args[ii];\n\n      // Expecting a divert target as an argument, let's do some basic type checking\n      if (flowArg.isDivertTarget) {\n        // Not passing a divert target or any kind of variable reference?\n        let varRef = asOrNull(divArgExpr, VariableReference);\n        if (!(divArgExpr instanceof DivertTarget) && varRef === null) {\n          this.Error(\n            `Target '${\n              targetFlow!.identifier\n            }' expects a divert target for the parameter named -> ${\n              flowArg.identifier\n            } but saw ${divArgExpr}`,\n            divArgExpr\n          );\n        } else if (varRef) {\n          // Passing 'a' instead of '-> a'?\n          // i.e. read count instead of divert target\n          // Unfortunately have to manually resolve here since we're still in code gen\n          const knotCountPath = new Path(varRef.pathIdentifiers);\n          const targetForCount: ParsedObject | null =\n            knotCountPath.ResolveFromContext(varRef);\n          if (targetForCount) {\n            this.Error(\n              `Passing read count of '${knotCountPath.dotSeparatedComponents}' instead of a divert target. You probably meant '${knotCountPath}'`\n            );\n          }\n        }\n      }\n    }\n\n    if (targetFlow === null) {\n      this.Error(\n        \"Can't call as a function or with arguments unless it's a knot or stitch\"\n      );\n      return;\n    }\n\n    return;\n  };\n\n  public readonly CheckExternalArgumentValidity = (context: Story): void => {\n    const externalName: string | null = this.target\n      ? this.target.firstComponent\n      : null;\n    const external = context.externals.get(externalName as string);\n    if (!external) {\n      throw new Error(\"external not found\");\n    }\n\n    const externalArgCount: number = external.argumentNames.length;\n    let ownArgCount = 0;\n    if (this.args) {\n      ownArgCount = this.args.length;\n    }\n\n    if (ownArgCount !== externalArgCount) {\n      this.Error(\n        `incorrect number of arguments sent to external function '${externalName}'. Expected ${externalArgCount} but got ${ownArgCount}`\n      );\n    }\n  };\n\n  public Error(\n    message: string,\n    source: ParsedObject | null = null,\n    isWarning: boolean = false\n  ): void {\n    // Could be getting an error from a nested Divert\n    if (source !== this && source) {\n      super.Error(message, source);\n      return;\n    }\n\n    if (this.isFunctionCall) {\n      super.Error(`Function call ${message}`, source, isWarning);\n    } else {\n      super.Error(`Divert ${message}`, source, isWarning);\n    }\n  }\n\n  public toString = (): string => {\n    let returnString = \"\";\n    if (this.target !== null) {\n      returnString += this.target.toString();\n    } else {\n      return \"-> <empty divert>\";\n    }\n\n    if (this.isTunnel) {\n      returnString += \" ->\";\n    }\n    if (this.isFunctionCall) {\n      returnString += \" ()\";\n    }\n\n    return returnString;\n  };\n}\n","import { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\n\nexport class GatherPointToResolve {\n  constructor(\n    public divert: RuntimeDivert,\n    public targetRuntimeObj: RuntimeObject\n  ) {}\n}\n","import { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\n\nexport class SequenceDivertToResolve {\n  constructor(\n    public divert: RuntimeDivert,\n    public targetContent: RuntimeObject\n  ) {}\n}\n","export enum SequenceType {\n  Stopping = 1, // default\n  Cycle = 2,\n  Shuffle = 4,\n  Once = 8,\n}\n","import { ContentList } from \"../ContentList\";\nimport { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { IntValue } from \"../../../../engine/Value\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { SequenceDivertToResolve } from \"./SequenceDivertToResolve\";\nimport { SequenceType } from \"./SequenceType\";\nimport { Story } from \"../Story\";\nimport { Weave } from \"../Weave\";\n\nexport class Sequence extends ParsedObject {\n  private _sequenceDivertsToResolve: SequenceDivertToResolve[] = [];\n\n  public sequenceElements: ParsedObject[];\n\n  constructor(\n    elementContentLists: ContentList[],\n    public readonly sequenceType: SequenceType\n  ) {\n    super();\n\n    this.sequenceType = sequenceType;\n    this.sequenceElements = [];\n\n    for (const elementContentList of elementContentLists) {\n      const contentObjs = elementContentList.content;\n      let seqElObject: ParsedObject | null = null;\n\n      // Don't attempt to create a weave for the sequence element\n      // if the content list is empty. Weaves don't like it!\n      if (contentObjs === null || contentObjs.length === 0) {\n        seqElObject = elementContentList;\n      } else {\n        seqElObject = new Weave(contentObjs);\n      }\n\n      this.sequenceElements.push(seqElObject);\n      this.AddContent(seqElObject);\n    }\n  }\n\n  get typeName(): string {\n    return \"Sequence\";\n  }\n\n  // Generate runtime code that looks like:\n  //\n  //   chosenIndex = MIN(sequence counter, num elements) e.g. for \"Stopping\"\n  //   if chosenIndex == 0, divert to s0\n  //   if chosenIndex == 1, divert to s1  [etc]\n  //\n  //   - s0:\n  //      <content for sequence element>\n  //      divert to no-op\n  //   - s1:\n  //      <content for sequence element>\n  //      divert to no-op\n  //   - s2:\n  //      empty branch if using \"once\"\n  //      divert to no-op\n  //\n  //    no-op\n  //\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n    container.visitsShouldBeCounted = true;\n    container.countingAtStartOnly = true;\n\n    this._sequenceDivertsToResolve = [];\n\n    // Get sequence read count\n    container.AddContent(RuntimeControlCommand.EvalStart());\n    container.AddContent(RuntimeControlCommand.VisitIndex());\n\n    const once: boolean = (this.sequenceType & SequenceType.Once) > 0;\n    const cycle: boolean = (this.sequenceType & SequenceType.Cycle) > 0;\n    const stopping: boolean = (this.sequenceType & SequenceType.Stopping) > 0;\n    const shuffle: boolean = (this.sequenceType & SequenceType.Shuffle) > 0;\n\n    let seqBranchCount = this.sequenceElements.length;\n    if (once) {\n      seqBranchCount += 1;\n    }\n\n    // Chosen sequence index:\n    //  - Stopping: take the MIN(read count, num elements - 1)\n    //  - Once: take the MIN(read count, num elements)\n    //    (the last one being empty)\n    if (stopping || once) {\n      //var limit = stopping ? seqBranchCount-1 : seqBranchCount;\n      container.AddContent(new IntValue(seqBranchCount - 1));\n      container.AddContent(NativeFunctionCall.CallWithName(\"MIN\"));\n    } else if (cycle) {\n      // - Cycle: take (read count % num elements)\n      container.AddContent(new IntValue(this.sequenceElements.length));\n      container.AddContent(NativeFunctionCall.CallWithName(\"%\"));\n    }\n\n    // Shuffle\n    if (shuffle) {\n      // Create point to return to when sequence is complete\n      const postShuffleNoOp = RuntimeControlCommand.NoOp();\n\n      // When visitIndex == lastIdx, we skip the shuffle\n      if (once || stopping) {\n        // if( visitIndex == lastIdx ) -> skipShuffle\n        const lastIdx = stopping\n          ? this.sequenceElements.length - 1\n          : this.sequenceElements.length;\n\n        container.AddContent(RuntimeControlCommand.Duplicate());\n        container.AddContent(new IntValue(lastIdx));\n        container.AddContent(NativeFunctionCall.CallWithName(\"==\"));\n\n        const skipShuffleDivert = new RuntimeDivert();\n        skipShuffleDivert.isConditional = true;\n        container.AddContent(skipShuffleDivert);\n\n        this.AddDivertToResolve(skipShuffleDivert, postShuffleNoOp);\n      }\n\n      // This one's a bit more complex! Choose the index at runtime.\n      let elementCountToShuffle = this.sequenceElements.length;\n      if (stopping) {\n        elementCountToShuffle -= 1;\n      }\n\n      container.AddContent(new IntValue(elementCountToShuffle));\n      container.AddContent(RuntimeControlCommand.SequenceShuffleIndex());\n      if (once || stopping) {\n        container.AddContent(postShuffleNoOp);\n      }\n    }\n\n    container.AddContent(RuntimeControlCommand.EvalEnd());\n\n    // Create point to return to when sequence is complete\n    const postSequenceNoOp = RuntimeControlCommand.NoOp();\n\n    // Each of the main sequence branches, and one extra empty branch if\n    // we have a \"once\" sequence.\n    for (let elIndex = 0; elIndex < seqBranchCount; elIndex += 1) {\n      // This sequence element:\n      //  if( chosenIndex == this index ) divert to this sequence element\n      // duplicate chosen sequence index, since it'll be consumed by \"==\"\n      container.AddContent(RuntimeControlCommand.EvalStart());\n      container.AddContent(RuntimeControlCommand.Duplicate());\n      container.AddContent(new IntValue(elIndex));\n      container.AddContent(NativeFunctionCall.CallWithName(\"==\"));\n      container.AddContent(RuntimeControlCommand.EvalEnd());\n\n      // Divert branch for this sequence element\n      const sequenceDivert = new RuntimeDivert();\n      sequenceDivert.isConditional = true;\n      container.AddContent(sequenceDivert);\n\n      let contentContainerForSequenceBranch: RuntimeContainer;\n\n      // Generate content for this sequence element\n      if (elIndex < this.sequenceElements.length) {\n        const el = this.sequenceElements[elIndex];\n        contentContainerForSequenceBranch =\n          el.runtimeObject as RuntimeContainer;\n      } else {\n        // Final empty branch for \"once\" sequences\n        contentContainerForSequenceBranch = new RuntimeContainer();\n      }\n\n      contentContainerForSequenceBranch.name = `s${elIndex}`;\n      contentContainerForSequenceBranch.InsertContent(\n        RuntimeControlCommand.PopEvaluatedValue(),\n        0\n      );\n\n      // When sequence element is complete, divert back to end of sequence\n      const seqBranchCompleteDivert = new RuntimeDivert();\n      contentContainerForSequenceBranch.AddContent(seqBranchCompleteDivert);\n      container.AddToNamedContentOnly(contentContainerForSequenceBranch);\n\n      // Save the diverts for reference resolution later (in ResolveReferences)\n      this.AddDivertToResolve(\n        sequenceDivert,\n        contentContainerForSequenceBranch\n      );\n      this.AddDivertToResolve(seqBranchCompleteDivert, postSequenceNoOp);\n    }\n\n    container.AddContent(postSequenceNoOp);\n\n    return container;\n  };\n\n  public readonly AddDivertToResolve = (\n    divert: RuntimeDivert,\n    targetContent: RuntimeObject\n  ) => {\n    this._sequenceDivertsToResolve.push(\n      new SequenceDivertToResolve(divert, targetContent)\n    );\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    for (const toResolve of this._sequenceDivertsToResolve) {\n      toResolve.divert.targetPath = toResolve.targetContent.path;\n    }\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { Divert } from \"./Divert/Divert\";\nimport { Divert as RuntimeDivert } from \"../../../engine/Divert\";\nimport { DivertTargetValue } from \"../../../engine/Value\";\nimport { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Story } from \"./Story\";\nimport { Void } from \"../../../engine/Void\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\nimport { VariableReference } from \"../../../engine/VariableReference\";\n\nexport class TunnelOnwards extends ParsedObject {\n  private _overrideDivertTarget: DivertTargetValue | null = null;\n\n  private _divertAfter: Divert | null = null;\n  get divertAfter() {\n    return this._divertAfter;\n  }\n\n  set divertAfter(value) {\n    this._divertAfter = value;\n    if (this._divertAfter) {\n      this.AddContent(this._divertAfter);\n    }\n  }\n\n  get typeName(): string {\n    return \"TunnelOnwards\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    const container = new RuntimeContainer();\n\n    // Set override path for tunnel onwards (or nothing)\n    container.AddContent(RuntimeControlCommand.EvalStart());\n\n    if (this.divertAfter) {\n      // Generate runtime object's generated code and steal the arguments runtime code\n      const returnRuntimeObj = this.divertAfter.GenerateRuntimeObject();\n      const returnRuntimeContainer = returnRuntimeObj as RuntimeContainer;\n      if (returnRuntimeContainer) {\n        // Steal all code for generating arguments from the divert\n        const args = this.divertAfter.args;\n        if (args !== null && args.length > 0) {\n          // Steal everything betwen eval start and eval end\n          let evalStart = -1;\n          let evalEnd = -1;\n          for (\n            let ii = 0;\n            ii < returnRuntimeContainer.content.length;\n            ii += 1\n          ) {\n            const cmd = returnRuntimeContainer.content[\n              ii\n            ] as RuntimeControlCommand;\n            if (cmd) {\n              if (\n                evalStart == -1 &&\n                cmd.commandType === RuntimeControlCommand.CommandType.EvalStart\n              ) {\n                evalStart = ii;\n              } else if (\n                cmd.commandType === RuntimeControlCommand.CommandType.EvalEnd\n              ) {\n                evalEnd = ii;\n              }\n            }\n          }\n\n          for (let ii = evalStart + 1; ii < evalEnd; ii += 1) {\n            const obj = returnRuntimeContainer.content[ii];\n            obj.parent = null; // prevent error of being moved between owners\n            container.AddContent(returnRuntimeContainer.content[ii]);\n          }\n        }\n      }\n      // Supply the divert target for the tunnel onwards target, either variable or more commonly, the explicit name\n      // var returnDivertObj = returnRuntimeObj as Runtime.Divert;\n      let returnDivertObj = asOrNull(returnRuntimeObj, RuntimeDivert);\n      if (returnDivertObj != null && returnDivertObj.hasVariableTarget) {\n        let runtimeVarRef = new VariableReference(\n          returnDivertObj.variableDivertName\n        );\n        container.AddContent(runtimeVarRef);\n      } else {\n        this._overrideDivertTarget = new DivertTargetValue();\n        container.AddContent(this._overrideDivertTarget);\n      }\n    } else {\n      // No divert after tunnel onwards\n      container.AddContent(new Void());\n    }\n\n    container.AddContent(RuntimeControlCommand.EvalEnd());\n    container.AddContent(RuntimeControlCommand.PopTunnel());\n\n    return container;\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    if (this.divertAfter && this.divertAfter.targetContent) {\n      this._overrideDivertTarget!.targetPath =\n        this.divertAfter.targetContent.runtimePath;\n    }\n  }\n\n  public toString = (): string => {\n    return ` -> ${this._divertAfter}`;\n  };\n}\n","import { InkListItem, SerializedInkListItem } from \"./InkList\";\nimport { TryGetResult } from \"./TryGetResult\";\n\nexport class ListDefinition {\n  public _name: string;\n  public _items: Map<SerializedInkListItem, number> | null;\n  public _itemNameToValues: Map<string, number>;\n\n  constructor(name: string, items: Map<string, number> | null) {\n    this._name = name || \"\";\n    this._items = null;\n    this._itemNameToValues = items || new Map();\n  }\n  get name() {\n    return this._name;\n  }\n  get items() {\n    if (this._items == null) {\n      this._items = new Map();\n      for (let [key, value] of this._itemNameToValues) {\n        let item = new InkListItem(this.name, key);\n        this._items.set(item.serialized(), value);\n      }\n    }\n\n    return this._items;\n  }\n\n  public ValueForItem(item: InkListItem) {\n    if (!item.itemName) return 0;\n\n    let intVal = this._itemNameToValues.get(item.itemName);\n    if (typeof intVal !== \"undefined\") return intVal;\n    else return 0;\n  }\n  public ContainsItem(item: InkListItem) {\n    if (!item.itemName) return false;\n    if (item.originName != this.name) return false;\n\n    return this._itemNameToValues.has(item.itemName);\n  }\n  public ContainsItemWithName(itemName: string) {\n    return this._itemNameToValues.has(itemName);\n  }\n  public TryGetItemWithValue(\n    val: number,\n    /* out */ item: InkListItem\n  ): TryGetResult<InkListItem> {\n    for (let [key, value] of this._itemNameToValues) {\n      if (value == val) {\n        item = new InkListItem(this.name, key);\n        return { result: item, exists: true };\n      }\n    }\n\n    item = InkListItem.Null;\n    return { result: item, exists: false };\n  }\n\n  public TryGetValueForItem(\n    item: InkListItem,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    /* out */ intVal: number\n  ): TryGetResult<number> {\n    if (!item.itemName) return { result: 0, exists: false };\n    let value = this._itemNameToValues.get(item.itemName);\n\n    if (!value) return { result: 0, exists: false };\n    return { result: value, exists: true };\n  }\n}\n","import { InkList as RuntimeInkList } from \"../../../../engine/InkList\";\nimport { InkListItem as RuntimeInkListItem } from \"../../../../engine/InkList\";\nimport { ListDefinition as RuntimeListDefinition } from \"../../../../engine/ListDefinition\";\nimport { ListElementDefinition } from \"./ListElementDefinition\";\nimport { ListValue } from \"../../../../engine/Value\";\nimport { ParsedObject } from \"../Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { VariableAssignment } from \"../Variable/VariableAssignment\";\nimport { Identifier } from \"../Identifier\";\n\nexport class ListDefinition extends ParsedObject {\n  public identifier: Identifier | null = null;\n  public variableAssignment: VariableAssignment | null = null;\n\n  get typeName() {\n    return \"ListDefinition\";\n  }\n\n  private _elementsByName: Map<string, ListElementDefinition> | null = null;\n\n  get runtimeListDefinition(): RuntimeListDefinition {\n    const allItems: Map<string, number> = new Map();\n    for (const e of this.itemDefinitions) {\n      if (!allItems.has(e.name!)) {\n        allItems.set(e.name!, e.seriesValue);\n      } else {\n        this.Error(\n          `List '${this.identifier}' contains duplicate items called '${e.name}'`\n        );\n      }\n    }\n\n    return new RuntimeListDefinition(this.identifier?.name || \"\", allItems);\n  }\n\n  public readonly ItemNamed = (\n    itemName: string\n  ): ListElementDefinition | null => {\n    if (this._elementsByName === null) {\n      this._elementsByName = new Map();\n\n      for (const el of this.itemDefinitions) {\n        this._elementsByName.set(el.name!, el);\n      }\n    }\n\n    const foundElement = this._elementsByName.get(itemName) || null;\n\n    return foundElement;\n  };\n\n  constructor(public itemDefinitions: ListElementDefinition[]) {\n    super();\n\n    let currentValue = 1;\n    for (const e of this.itemDefinitions) {\n      if (e.explicitValue !== null) {\n        currentValue = e.explicitValue;\n      }\n\n      e.seriesValue = currentValue;\n\n      currentValue += 1;\n    }\n\n    this.AddContent(itemDefinitions as any);\n  }\n\n  public readonly GenerateRuntimeObject = (): ListValue => {\n    const initialValues = new RuntimeInkList();\n    for (const itemDef of this.itemDefinitions) {\n      if (itemDef.inInitialList) {\n        const item = new RuntimeInkListItem(\n          this.identifier?.name || null,\n          itemDef.name || null\n        );\n        initialValues.Add(item, itemDef.seriesValue);\n      }\n    }\n\n    // Set origin name, so\n    initialValues.SetInitialOriginName(this.identifier?.name || \"\");\n\n    return new ListValue(initialValues);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n    context.CheckForNamingCollisions(this, this.identifier!, SymbolType.List);\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"../Expression/Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { ClosestFlowBase } from \"../Flow/ClosestFlowBase\";\nimport { ListDefinition } from \"../List/ListDefinition\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../../engine/VariableAssignment\";\nimport { VariableReference } from \"./VariableReference\";\nimport { Identifier } from \"../Identifier\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class VariableAssignment extends ParsedObject {\n  private _runtimeAssignment: RuntimeVariableAssignment | null = null;\n\n  get variableName(): string {\n    return this.variableIdentifier.name!;\n  }\n  public readonly variableIdentifier: Identifier;\n  public readonly expression: Expression | null = null;\n  public readonly listDefinition: ListDefinition | null = null;\n  public readonly isGlobalDeclaration: boolean;\n  public readonly isNewTemporaryDeclaration: boolean;\n\n  get typeName() {\n    if (this.isNewTemporaryDeclaration) {\n      return \"temp\";\n    } else if (this.isGlobalDeclaration) {\n      if (this.listDefinition !== null) {\n        return \"LIST\";\n      }\n      return \"VAR\";\n    }\n\n    return \"variable assignment\";\n  }\n\n  get isDeclaration(): boolean {\n    return this.isGlobalDeclaration || this.isNewTemporaryDeclaration;\n  }\n\n  constructor({\n    assignedExpression,\n    isGlobalDeclaration,\n    isTemporaryNewDeclaration,\n    listDef,\n    variableIdentifier,\n  }: {\n    readonly assignedExpression?: Expression;\n    readonly isGlobalDeclaration?: boolean;\n    readonly isTemporaryNewDeclaration?: boolean;\n    readonly listDef?: ListDefinition;\n    readonly variableIdentifier: Identifier;\n  }) {\n    super();\n\n    this.variableIdentifier = variableIdentifier;\n    this.isGlobalDeclaration = Boolean(isGlobalDeclaration);\n    this.isNewTemporaryDeclaration = Boolean(isTemporaryNewDeclaration);\n\n    // Defensive programming in case parsing of assignedExpression failed\n    if (listDef instanceof ListDefinition) {\n      this.listDefinition = this.AddContent(listDef) as ListDefinition;\n      this.listDefinition.variableAssignment = this;\n\n      // List definitions are always global\n      this.isGlobalDeclaration = true;\n    } else if (assignedExpression) {\n      this.expression = this.AddContent(assignedExpression) as Expression;\n    }\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject | null => {\n    let newDeclScope: FlowBase | null | undefined = null;\n    if (this.isGlobalDeclaration) {\n      newDeclScope = this.story;\n    } else if (this.isNewTemporaryDeclaration) {\n      newDeclScope = ClosestFlowBase(this);\n    }\n\n    if (newDeclScope) {\n      newDeclScope.AddNewVariableDeclaration(this);\n    }\n\n    // Global declarations don't generate actual procedural\n    // runtime objects, but instead add a global variable to the story itself.\n    // The story then initialises them all in one go at the start of the game.\n    if (this.isGlobalDeclaration) {\n      return null;\n    }\n\n    const container = new RuntimeContainer();\n\n    // The expression's runtimeObject is actually another nested container\n    if (this.expression) {\n      container.AddContent(this.expression.runtimeObject);\n    } else if (this.listDefinition) {\n      container.AddContent(this.listDefinition.runtimeObject);\n    }\n\n    this._runtimeAssignment = new RuntimeVariableAssignment(\n      this.variableName,\n      this.isNewTemporaryDeclaration\n    );\n\n    container.AddContent(this._runtimeAssignment);\n\n    return container;\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // List definitions are checked for conflicts separately\n    if (this.isDeclaration && this.listDefinition === null) {\n      context.CheckForNamingCollisions(\n        this,\n        this.variableIdentifier,\n        this.isGlobalDeclaration ? SymbolType.Var : SymbolType.Temp\n      );\n    }\n\n    // Initial VAR x = [intialValue] declaration, not re-assignment\n    if (this.isGlobalDeclaration) {\n      const variableReference = asOrNull(this.expression, VariableReference);\n      if (\n        variableReference &&\n        !variableReference.isConstantReference &&\n        !variableReference.isListItemReference\n      ) {\n        this.Error(\n          \"global variable assignments cannot refer to other variables, only literal values, constants and list items\"\n        );\n      }\n    }\n\n    if (!this.isNewTemporaryDeclaration) {\n      const resolvedVarAssignment = context.ResolveVariableWithName(\n        this.variableName,\n        this\n      );\n\n      if (!resolvedVarAssignment.found) {\n        if (this.variableName in this.story.constants) {\n          this.Error(\n            `Can't re-assign to a constant (do you need to use VAR when declaring '${this.variableName}'?)`,\n            this\n          );\n        } else {\n          this.Error(\n            `Variable could not be found to assign to: '${this.variableName}'`,\n            this\n          );\n        }\n      }\n\n      // A runtime assignment may not have been generated if it's the initial global declaration,\n      // since these are hoisted out and handled specially in Story.ExportRuntime.\n      if (this._runtimeAssignment) {\n        this._runtimeAssignment.isGlobal = resolvedVarAssignment.isGlobal;\n      }\n    }\n  }\n\n  public readonly toString = (): string =>\n    `${\n      this.isGlobalDeclaration\n        ? \"VAR\"\n        : this.isNewTemporaryDeclaration\n          ? \"~ temp\"\n          : \"\"\n    } ${this.variableName}`;\n}\n","import { AuthorWarning } from \"./AuthorWarning\";\nimport { Choice } from \"./Choice\";\nimport { Conditional } from \"./Conditional/Conditional\";\nimport { ConstantDeclaration } from \"./Declaration/ConstantDeclaration\";\nimport { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { Divert } from \"./Divert/Divert\";\nimport { Divert as RuntimeDivert } from \"../../../engine/Divert\";\nimport { DivertTarget } from \"./Divert/DivertTarget\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { Gather } from \"./Gather/Gather\";\nimport { GatherPointToResolve } from \"./Gather/GatherPointToResolve\";\nimport { IWeavePoint } from \"./IWeavePoint\";\nimport { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Sequence } from \"./Sequence/Sequence\";\nimport { Story } from \"./Story\";\nimport { Text } from \"./Text\";\nimport { TunnelOnwards } from \"./TunnelOnwards\";\nimport { VariableAssignment } from \"./Variable/VariableAssignment\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\n\ntype BadTerminationHandler = (terminatingObj: ParsedObject) => void;\n\n// Used by the FlowBase when constructing the weave flow from\n// a flat list of content objects.\nexport class Weave extends ParsedObject {\n  // Containers can be chained as multiple gather points\n  // get created as the same indentation level.\n  // rootContainer is always the first in the chain, while\n  // currentContainer is the latest.\n  get rootContainer(): RuntimeContainer {\n    if (!this._rootContainer) {\n      this._rootContainer = this.GenerateRuntimeObject();\n    }\n\n    return this._rootContainer;\n  }\n\n  // Keep track of previous weave point (Choice or Gather)\n  // at the current indentation level:\n  //  - to add ordinary content to be nested under it\n  //  - to add nested content under it when it's indented\n  //  - to remove it from the list of loose ends when\n  //     - it has indented content since it's no longer a loose end\n  //     - it's a gather and it has a choice added to it\n  public previousWeavePoint: IWeavePoint | null = null;\n  public addContentToPreviousWeavePoint: boolean = false;\n\n  // Used for determining whether the next Gather should auto-enter\n  public hasSeenChoiceInSection: boolean = false;\n\n  public currentContainer: RuntimeContainer | null = null;\n  public baseIndentIndex: number;\n\n  private _unnamedGatherCount: number = 0;\n  private _choiceCount: number = 0;\n  private _rootContainer: RuntimeContainer | null = null;\n  private _namedWeavePoints: Map<string, IWeavePoint> = new Map();\n  get namedWeavePoints() {\n    return this._namedWeavePoints;\n  }\n\n  // Loose ends are:\n  //  - Choices or Gathers that need to be joined up\n  //  - Explicit Divert to gather points (i.e. \"->\" without a target)\n  public looseEnds: IWeavePoint[] = [];\n\n  public gatherPointsToResolve: GatherPointToResolve[] = [];\n\n  get lastParsedSignificantObject(): ParsedObject | null {\n    if (this.content.length === 0) {\n      return null;\n    }\n\n    // Don't count extraneous newlines or VAR/CONST declarations,\n    // since they're \"empty\" statements outside of the main flow.\n    let lastObject: ParsedObject | null = null;\n    for (let ii = this.content.length - 1; ii >= 0; --ii) {\n      lastObject = this.content[ii];\n\n      let lastText = asOrNull(lastObject, Text);\n      if (lastText && lastText.text === \"\\n\") {\n        continue;\n      }\n\n      if (this.IsGlobalDeclaration(lastObject)) {\n        continue;\n      }\n\n      break;\n    }\n\n    const lastWeave = asOrNull(lastObject, Weave);\n    if (lastWeave) {\n      lastObject = lastWeave.lastParsedSignificantObject;\n    }\n\n    return lastObject;\n  }\n\n  constructor(cont: ParsedObject[], indentIndex: number = -1) {\n    super();\n\n    if (indentIndex == -1) {\n      this.baseIndentIndex = this.DetermineBaseIndentationFromContent(cont);\n    } else {\n      this.baseIndentIndex = indentIndex;\n    }\n\n    this.AddContent(cont);\n\n    this.ConstructWeaveHierarchyFromIndentation();\n  }\n\n  get typeName(): string {\n    return \"Weave\";\n  }\n\n  public readonly ResolveWeavePointNaming = (): void => {\n    const namedWeavePoints = [\n      ...this.FindAll<IWeavePoint>(Gather)(\n        (w) => !(w.name === null || w.name === undefined)\n      ),\n      ...this.FindAll<IWeavePoint>(Choice)(\n        (w) => !(w.name === null || w.name === undefined)\n      ),\n    ];\n    this._namedWeavePoints = new Map();\n\n    for (const weavePoint of namedWeavePoints) {\n      // Check for weave point naming collisions\n      const existingWeavePoint: IWeavePoint | null | undefined =\n        this.namedWeavePoints.get(weavePoint.identifier?.name || \"\");\n\n      if (existingWeavePoint) {\n        const typeName =\n          existingWeavePoint instanceof Gather ? \"gather\" : \"choice\";\n        const existingObj: ParsedObject = existingWeavePoint;\n\n        this.Error(\n          `A ${typeName} with the same label name '${\n            weavePoint.name\n          }' already exists in this context on line ${\n            existingObj.debugMetadata\n              ? existingObj.debugMetadata.startLineNumber\n              : \"NO DEBUG METADATA AVAILABLE\"\n          }`,\n          weavePoint as ParsedObject\n        );\n      }\n      if (weavePoint.identifier?.name) {\n        this.namedWeavePoints.set(weavePoint.identifier?.name, weavePoint);\n      }\n    }\n  };\n\n  public readonly ConstructWeaveHierarchyFromIndentation = (): void => {\n    // Find nested indentation and convert to a proper object hierarchy\n    // (i.e. indented content is replaced with a Weave object that contains\n    // that nested content)\n    let contentIdx = 0;\n    while (contentIdx < this.content.length) {\n      const obj: ParsedObject = this.content[contentIdx];\n\n      // Choice or Gather\n      if (obj instanceof Choice || obj instanceof Gather) {\n        const weavePoint: IWeavePoint = obj;\n        const weaveIndentIdx = weavePoint.indentationDepth - 1;\n\n        // Inner level indentation - recurse\n        if (weaveIndentIdx > this.baseIndentIndex) {\n          // Step through content until indent jumps out again\n          let innerWeaveStartIdx = contentIdx;\n          while (contentIdx < this.content.length) {\n            const innerWeaveObj =\n              asOrNull(this.content[contentIdx], Choice) ||\n              asOrNull(this.content[contentIdx], Gather);\n            if (innerWeaveObj !== null) {\n              const innerIndentIdx = innerWeaveObj.indentationDepth - 1;\n              if (innerIndentIdx <= this.baseIndentIndex) {\n                break;\n              }\n            }\n\n            contentIdx += 1;\n          }\n\n          const weaveContentCount = contentIdx - innerWeaveStartIdx;\n          const weaveContent = this.content.slice(\n            innerWeaveStartIdx,\n            innerWeaveStartIdx + weaveContentCount\n          );\n\n          this.content.splice(innerWeaveStartIdx, weaveContentCount);\n\n          const weave = new Weave(weaveContent, weaveIndentIdx);\n          this.InsertContent(innerWeaveStartIdx, weave);\n\n          // Continue iteration from this point\n          contentIdx = innerWeaveStartIdx;\n        }\n      }\n\n      contentIdx += 1;\n    }\n  };\n\n  // When the indentation wasn't told to us at construction time using\n  // a choice point with a known indentation level, we may be told to\n  // determine the indentation level by incrementing from our closest ancestor.\n  public readonly DetermineBaseIndentationFromContent = (\n    contentList: ParsedObject[]\n  ): number => {\n    for (const obj of contentList) {\n      if (obj instanceof Choice || obj instanceof Gather) {\n        return obj.indentationDepth - 1;\n      }\n    }\n\n    // No weave points, so it doesn't matter\n    return 0;\n  };\n\n  public readonly GenerateRuntimeObject = (): RuntimeContainer => {\n    this._rootContainer = new RuntimeContainer();\n    this.currentContainer = this._rootContainer;\n    this.looseEnds = [];\n    this.gatherPointsToResolve = [];\n\n    // Iterate through content for the block at this level of indentation\n    //  - Normal content is nested under Choices and Gathers\n    //  - Blocks that are further indented cause recursion\n    //  - Keep track of loose ends so that they can be diverted to Gathers\n    for (const obj of this.content) {\n      // Choice or Gather\n      if (obj instanceof Choice || obj instanceof Gather) {\n        this.AddRuntimeForWeavePoint(obj as IWeavePoint);\n      } else {\n        // Non-weave point\n        if (obj instanceof Weave) {\n          // Nested weave\n          const weave = obj;\n          this.AddRuntimeForNestedWeave(weave);\n          this.gatherPointsToResolve.splice(\n            0,\n            0,\n            ...weave.gatherPointsToResolve\n          );\n        } else {\n          // Other object\n          // May be complex object that contains statements - e.g. a multi-line conditional\n          this.AddGeneralRuntimeContent(obj.runtimeObject);\n        }\n      }\n    }\n\n    // Pass any loose ends up the hierarhcy\n    this.PassLooseEndsToAncestors();\n\n    return this._rootContainer;\n  };\n\n  // Found gather point:\n  //  - gather any loose ends\n  //  - set the gather as the main container to dump new content in\n  public readonly AddRuntimeForGather = (gather: Gather): void => {\n    // Determine whether this Gather should be auto-entered:\n    //  - It is auto-entered if there were no choices in the last section\n    //  - A section is \"since the previous gather\" - so reset now\n    const autoEnter = !this.hasSeenChoiceInSection;\n    this.hasSeenChoiceInSection = false;\n\n    const gatherContainer = gather.runtimeContainer;\n\n    if (!gather.name) {\n      // Use disallowed character so it's impossible to have a name collision\n      gatherContainer.name = `g-${this._unnamedGatherCount}`;\n      this._unnamedGatherCount += 1;\n    }\n\n    if (autoEnter) {\n      if (!this.currentContainer) {\n        throw new Error();\n      }\n\n      // Auto-enter: include in main content\n      this.currentContainer.AddContent(gatherContainer);\n    } else {\n      // Don't auto-enter:\n      // Add this gather to the main content, but only accessible\n      // by name so that it isn't stepped into automatically, but only via\n      // a divert from a loose end.\n      this.rootContainer.AddToNamedContentOnly(gatherContainer);\n    }\n\n    // Consume loose ends: divert them to this gather\n    for (const looseEndWeavePoint of this.looseEnds) {\n      const looseEnd = looseEndWeavePoint as ParsedObject;\n\n      // Skip gather loose ends that are at the same level\n      // since they'll be handled by the auto-enter code below\n      // that only jumps into the gather if (current runtime choices == 0)\n      if (looseEnd instanceof Gather) {\n        const prevGather = looseEnd;\n        if (prevGather.indentationDepth == gather.indentationDepth) {\n          continue;\n        }\n      }\n\n      let divert: RuntimeDivert | null = null;\n      if (looseEnd instanceof Divert) {\n        divert = looseEnd.runtimeObject as RuntimeDivert;\n      } else {\n        divert = new RuntimeDivert();\n        const looseWeavePoint = looseEnd as IWeavePoint;\n        if (!looseWeavePoint.runtimeContainer) {\n          throw new Error();\n        }\n\n        looseWeavePoint.runtimeContainer.AddContent(divert);\n      }\n\n      // Pass back knowledge of this loose end being diverted\n      // to the FlowBase so that it can maintain a list of them,\n      // and resolve the divert references later\n      this.gatherPointsToResolve.push(\n        new GatherPointToResolve(divert, gatherContainer)\n      );\n    }\n\n    this.looseEnds = [];\n\n    // Replace the current container itself\n    this.currentContainer = gatherContainer;\n  };\n\n  public readonly AddRuntimeForWeavePoint = (weavePoint: IWeavePoint): void => {\n    // Current level Gather\n    if (weavePoint instanceof Gather) {\n      this.AddRuntimeForGather(weavePoint);\n    }\n\n    // Current level choice\n    else if (weavePoint instanceof Choice) {\n      if (!this.currentContainer) {\n        throw new Error();\n      }\n\n      // Gathers that contain choices are no longer loose ends\n      // (same as when weave points get nested content)\n      if (this.previousWeavePoint instanceof Gather) {\n        this.looseEnds.splice(\n          this.looseEnds.indexOf(this.previousWeavePoint),\n          1\n        );\n      }\n\n      // Add choice point content\n      const choice = weavePoint; //, Choice);\n\n      this.currentContainer.AddContent(choice.runtimeObject);\n      if (!choice.innerContentContainer) {\n        throw new Error();\n      } //guaranteed not to happen\n\n      // Add choice's inner content to self\n      choice.innerContentContainer.name = `c-${this._choiceCount}`;\n      this.currentContainer.AddToNamedContentOnly(choice.innerContentContainer);\n      this._choiceCount += 1;\n\n      this.hasSeenChoiceInSection = true;\n    }\n\n    // Keep track of loose ends\n    this.addContentToPreviousWeavePoint = false; // default\n    if (this.WeavePointHasLooseEnd(weavePoint)) {\n      this.looseEnds.push(weavePoint);\n\n      const looseChoice = asOrNull(weavePoint, Choice);\n      if (looseChoice) {\n        this.addContentToPreviousWeavePoint = true;\n      }\n    }\n\n    this.previousWeavePoint = weavePoint;\n  };\n\n  // Add nested block at a greater indentation level\n  public readonly AddRuntimeForNestedWeave = (nestedResult: Weave): void => {\n    // Add this inner block to current container\n    // (i.e. within the main container, or within the last defined Choice/Gather)\n    this.AddGeneralRuntimeContent(nestedResult.rootContainer);\n\n    // Now there's a deeper indentation level, the previous weave point doesn't\n    // count as a loose end (since it will have content to go to)\n    if (this.previousWeavePoint !== null) {\n      this.looseEnds.splice(this.looseEnds.indexOf(this.previousWeavePoint), 1);\n\n      this.addContentToPreviousWeavePoint = false;\n    }\n  };\n\n  // Normal content gets added into the latest Choice or Gather by default,\n  // unless there hasn't been one yet.\n  public readonly AddGeneralRuntimeContent = (content: RuntimeObject): void => {\n    // Content is allowed to evaluate runtimeObject to null\n    // (e.g. AuthorWarning, which doesn't make it into the runtime)\n    if (content === null) {\n      return;\n    }\n\n    if (this.addContentToPreviousWeavePoint) {\n      if (\n        !this.previousWeavePoint ||\n        !this.previousWeavePoint.runtimeContainer\n      ) {\n        throw new Error();\n      }\n\n      this.previousWeavePoint.runtimeContainer.AddContent(content);\n    } else {\n      if (!this.currentContainer) {\n        throw new Error();\n      }\n\n      this.currentContainer.AddContent(content);\n    }\n  };\n\n  public readonly PassLooseEndsToAncestors = () => {\n    if (this.looseEnds.length === 0) {\n      return;\n    }\n\n    // Search for Weave ancestor to pass loose ends to for gathering.\n    // There are two types depending on whether the current weave\n    // is separated by a conditional or sequence.\n    //  - An \"inner\" weave is one that is directly connected to the current\n    //    weave - i.e. you don't have to pass through a conditional or\n    //    sequence to get to it. We're allowed to pass all loose ends to\n    //    one of these.\n    //  - An \"outer\" weave is one that is outside of a conditional/sequence\n    //    that the current weave is nested within. We're only allowed to\n    //    pass gathers (i.e. 'normal flow') loose ends up there, not normal\n    //    choices. The rule is that choices have to be diverted explicitly\n    //    by the author since it's ambiguous where flow should go otherwise.\n    //\n    // e.g.:\n    //\n    //   - top                       <- e.g. outer weave\n    //   {true:\n    //       * choice                <- e.g. inner weave\n    //         * * choice 2\n    //             more content      <- e.g. current weave\n    //       * choice 2\n    //   }\n    //   - more of outer weave\n    //\n    let closestInnerWeaveAncestor: Weave | null = null;\n    let closestOuterWeaveAncestor: Weave | null = null;\n\n    // Find inner and outer ancestor weaves as defined above.\n    let nested = false;\n    for (\n      let ancestor = this.parent;\n      ancestor !== null;\n      ancestor = ancestor.parent\n    ) {\n      // Found ancestor?\n      const weaveAncestor = asOrNull(ancestor, Weave);\n      if (weaveAncestor) {\n        if (!nested && closestInnerWeaveAncestor === null) {\n          closestInnerWeaveAncestor = weaveAncestor;\n        }\n\n        if (nested && closestOuterWeaveAncestor === null) {\n          closestOuterWeaveAncestor = weaveAncestor;\n        }\n      }\n\n      // Weaves nested within Sequences or Conditionals are\n      // \"sealed\" - any loose ends require explicit diverts.\n      if (ancestor instanceof Sequence || ancestor instanceof Conditional) {\n        nested = true;\n      }\n    }\n\n    // No weave to pass loose ends to at all?\n    if (\n      closestInnerWeaveAncestor === null &&\n      closestOuterWeaveAncestor === null\n    ) {\n      return;\n    }\n\n    // Follow loose end passing logic as defined above\n    for (let ii = this.looseEnds.length - 1; ii >= 0; ii -= 1) {\n      const looseEnd = this.looseEnds[ii];\n      let received = false;\n\n      if (nested) {\n        // This weave is nested within a conditional or sequence:\n        //  - choices can only be passed up to direct ancestor (\"inner\") weaves\n        //  - gathers can be passed up to either, but favour the closer (inner) weave\n        //    if there is one\n        if (looseEnd instanceof Choice && closestInnerWeaveAncestor !== null) {\n          closestInnerWeaveAncestor.ReceiveLooseEnd(looseEnd);\n          received = true;\n        } else if (!(looseEnd instanceof Choice)) {\n          const receivingWeave =\n            closestInnerWeaveAncestor || closestOuterWeaveAncestor;\n          if (receivingWeave !== null) {\n            receivingWeave.ReceiveLooseEnd(looseEnd);\n            received = true;\n          }\n        }\n      } else {\n        // No nesting, all loose ends can be safely passed up\n        if (closestInnerWeaveAncestor?.hasOwnProperty(\"ReceiveLooseEnd\")) {\n          closestInnerWeaveAncestor!.ReceiveLooseEnd(looseEnd);\n        }\n        received = true;\n      }\n\n      if (received) {\n        this.looseEnds.splice(ii, 1);\n      }\n    }\n  };\n\n  public readonly ReceiveLooseEnd = (childWeaveLooseEnd: IWeavePoint): void => {\n    this.looseEnds.push(childWeaveLooseEnd);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    // Check that choices nested within conditionals and sequences are terminated\n    if (this.looseEnds !== null && this.looseEnds.length > 0) {\n      let isNestedWeave = false;\n      for (\n        let ancestor = this.parent;\n        ancestor !== null;\n        ancestor = ancestor.parent\n      ) {\n        if (ancestor instanceof Sequence || ancestor instanceof Conditional) {\n          isNestedWeave = true;\n          break;\n        }\n      }\n\n      if (isNestedWeave) {\n        this.ValidateTermination(this.BadNestedTerminationHandler);\n      }\n    }\n\n    for (const gatherPoint of this.gatherPointsToResolve) {\n      gatherPoint.divert.targetPath = gatherPoint.targetRuntimeObj.path;\n    }\n\n    this.CheckForWeavePointNamingCollisions();\n  }\n\n  public readonly WeavePointNamed = (name: string): IWeavePoint | null => {\n    if (!this.namedWeavePoints) {\n      return null;\n    }\n\n    let weavePointResult: IWeavePoint | null | undefined =\n      this.namedWeavePoints.get(name);\n    if (weavePointResult) {\n      return weavePointResult;\n    }\n\n    return null;\n  };\n\n  // Global VARs and CONSTs are treated as \"outside of the flow\"\n  // when iterating over content that follows loose ends\n  public readonly IsGlobalDeclaration = (obj: ParsedObject) => {\n    const varAss = asOrNull(obj, VariableAssignment);\n    if (varAss && varAss.isGlobalDeclaration && varAss.isDeclaration) {\n      return true;\n    }\n\n    const constDecl = asOrNull(obj, ConstantDeclaration);\n    if (constDecl) {\n      return true;\n    }\n\n    return false;\n  };\n\n  // While analysing final loose ends, we look to see whether there\n  // are any diverts etc which choices etc divert from\n  public readonly ContentThatFollowsWeavePoint = (\n    weavePoint: IWeavePoint\n  ): ParsedObject[] => {\n    const returned = [];\n    const obj = weavePoint as ParsedObject;\n\n    // Inner content first (e.g. for a choice)\n    if (obj.content !== null) {\n      for (const contentObj of obj.content) {\n        // Global VARs and CONSTs are treated as \"outside of the flow\"\n        if (this.IsGlobalDeclaration(contentObj)) {\n          continue;\n        }\n\n        returned.push(contentObj);\n      }\n    }\n\n    const parentWeave = asOrNull(obj.parent, Weave);\n    if (parentWeave === null) {\n      throw new Error(\"Expected weave point parent to be weave?\");\n    }\n\n    const weavePointIdx = parentWeave.content.indexOf(obj);\n    for (let ii = weavePointIdx + 1; ii < parentWeave.content.length; ii += 1) {\n      const laterObj = parentWeave.content[ii];\n\n      // Global VARs and CONSTs are treated as \"outside of the flow\"\n      if (this.IsGlobalDeclaration(laterObj)) {\n        continue;\n      }\n\n      // End of the current flow\n      // if (laterObj instanceof IWeavePoint) // cannot test on interface in ts\n      if (laterObj instanceof Choice || laterObj instanceof Gather) {\n        break;\n      }\n\n      // Other weaves will be have their own loose ends\n      if (laterObj instanceof Weave) {\n        break;\n      }\n\n      returned.push(laterObj);\n    }\n\n    return returned;\n  };\n\n  public readonly ValidateTermination = (\n    badTerminationHandler: BadTerminationHandler\n  ): void => {\n    // Don't worry if the last object in the flow is a \"TODO\",\n    // even if there are other loose ends in other places\n    if (this.lastParsedSignificantObject instanceof AuthorWarning) {\n      return;\n    }\n\n    // By now, any sub-weaves will have passed loose ends up to the root weave (this).\n    // So there are 2 possible situations:\n    //  - There are loose ends from somewhere in the flow.\n    //    These aren't necessarily \"real\" loose ends - they're weave points\n    //    that don't connect to any lower weave points, so we just\n    //    have to check that they terminate properly.\n    //  - This weave is just a list of content with no actual weave points,\n    //    so we just need to check that the list of content terminates.\n\n    const hasLooseEnds: boolean =\n      this.looseEnds !== null && this.looseEnds.length > 0;\n\n    if (hasLooseEnds) {\n      for (const looseEnd of this.looseEnds) {\n        const looseEndFlow = this.ContentThatFollowsWeavePoint(looseEnd);\n        this.ValidateFlowOfObjectsTerminates(\n          looseEndFlow,\n          looseEnd as ParsedObject,\n          badTerminationHandler\n        );\n      }\n    } else {\n      // No loose ends... is there any inner weaving at all?\n      // If not, make sure the single content stream is terminated correctly\n      //\n      // If there's any actual weaving, assume that content is\n      // terminated correctly since we would've had a loose end otherwise\n      for (const obj of this.content) {\n        if (obj instanceof Choice || obj instanceof Divert) {\n          return;\n        }\n      }\n\n      // Straight linear flow? Check it terminates\n      this.ValidateFlowOfObjectsTerminates(\n        this.content,\n        this,\n        badTerminationHandler\n      );\n    }\n  };\n\n  readonly BadNestedTerminationHandler: BadTerminationHandler = (\n    terminatingObj\n  ) => {\n    let conditional: Conditional | null = null;\n    for (\n      let ancestor = terminatingObj.parent;\n      ancestor !== null;\n      ancestor = ancestor.parent\n    ) {\n      if (ancestor instanceof Sequence || ancestor instanceof Conditional) {\n        conditional = asOrNull(ancestor, Conditional);\n        break;\n      }\n    }\n\n    let errorMsg =\n      \"Choices nested in conditionals or sequences need to explicitly divert afterwards.\";\n\n    // Tutorialise proper choice syntax if this looks like a single choice within a condition, e.g.\n    // { condition:\n    //      * choice\n    // }\n    if (conditional !== null) {\n      let numChoices = conditional.FindAll<Choice>(Choice)().length;\n      if (numChoices === 1) {\n        errorMsg = `Choices with conditions should be written: '* {condition} choice'. Otherwise, ${errorMsg.toLowerCase()}`;\n      }\n    }\n\n    this.Error(errorMsg, terminatingObj);\n  };\n\n  public readonly ValidateFlowOfObjectsTerminates = (\n    objFlow: ParsedObject[],\n    defaultObj: ParsedObject,\n    badTerminationHandler: BadTerminationHandler\n  ) => {\n    let terminated = false;\n    let terminatingObj: ParsedObject = defaultObj;\n    for (const flowObj of objFlow) {\n      const divert = flowObj.Find(Divert)(\n        (d) =>\n          !d.isThread &&\n          !d.isTunnel &&\n          !d.isFunctionCall &&\n          !(d.parent instanceof DivertTarget)\n      );\n\n      if (divert !== null) {\n        terminated = true;\n      }\n\n      if (flowObj.Find(TunnelOnwards)() != null) {\n        terminated = true;\n        break;\n      }\n\n      terminatingObj = flowObj;\n    }\n\n    if (!terminated) {\n      // Author has left a note to self here - clearly we don't need\n      // to leave them with another warning since they know what they're doing.\n      if (terminatingObj instanceof AuthorWarning) {\n        return;\n      }\n\n      badTerminationHandler(terminatingObj);\n    }\n  };\n\n  public readonly WeavePointHasLooseEnd = (\n    weavePoint: IWeavePoint\n  ): boolean => {\n    // No content, must be a loose end.\n    if (weavePoint.content === null) {\n      return true;\n    }\n\n    // If a weave point is diverted from, it doesn't have a loose end.\n    // Detect a divert object within a weavePoint's main content\n    // Work backwards since we're really interested in the end,\n    // although it doesn't actually make a difference!\n    // (content after a divert will simply be inaccessible)\n    for (let ii = weavePoint.content.length - 1; ii >= 0; --ii) {\n      let innerDivert = asOrNull(weavePoint.content[ii], Divert);\n      if (innerDivert) {\n        const willReturn =\n          innerDivert.isThread ||\n          innerDivert.isTunnel ||\n          innerDivert.isFunctionCall;\n        if (!willReturn) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  // Enforce rule that weave points must not have the same\n  // name as any stitches or knots upwards in the hierarchy\n  public readonly CheckForWeavePointNamingCollisions = (): void => {\n    if (!this.namedWeavePoints) {\n      return;\n    }\n\n    const ancestorFlows = [];\n    for (const obj of this.ancestry) {\n      const flow = asOrNull(obj, FlowBase);\n      if (flow) {\n        ancestorFlows.push(flow);\n      } else {\n        break;\n      }\n    }\n\n    for (const [weavePointName, weavePoint] of this.namedWeavePoints) {\n      for (const flow of ancestorFlows) {\n        // Shallow search\n        const otherContentWithName =\n          flow.ContentWithNameAtLevel(weavePointName);\n        if (otherContentWithName && otherContentWithName !== weavePoint) {\n          const errorMsg = `${weavePoint.GetType()} '${weavePointName}' has the same label name as a ${otherContentWithName.GetType()} (on ${\n            otherContentWithName.debugMetadata\n          })`;\n          this.Error(errorMsg, weavePoint);\n        }\n      }\n    }\n  };\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Divert as RuntimeDivert } from \"../../../../engine/Divert\";\nimport { Expression } from \"../Expression/Expression\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { StringValue } from \"../../../../engine/Value\";\nimport { Story } from \"../Story\";\nimport { Text } from \"../Text\";\nimport { Weave } from \"../Weave\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class ConditionalSingleBranch extends ParsedObject {\n  public _contentContainer: RuntimeContainer | null = null;\n  public _conditionalDivert: RuntimeDivert | null = null;\n  public _ownExpression: Expression | null = null;\n  public _innerWeave: Weave | null = null;\n  // bool condition, e.g.:\n  // { 5 == 4:\n  //   - the true branch\n  //   - the false branch\n  // }\n  public isTrueBranch: boolean = false;\n\n  // When each branch has its own expression like a switch statement,\n  // this is non-null. e.g.\n  // { x:\n  //    - 4: the value of x is four (ownExpression is the value 4)\n  //    - 3: the value of x is three\n  // }\n  get ownExpression() {\n    return this._ownExpression;\n  }\n\n  set ownExpression(value) {\n    this._ownExpression = value;\n    if (this._ownExpression) {\n      this.AddContent(this._ownExpression);\n    }\n  }\n\n  // In the above example, match equality of x with 4 for the first branch.\n  // This is as opposed to simply evaluating boolean equality for each branch,\n  // example when shouldMatchEquality is FALSE:\n  // {\n  //    3 > 2:  This will happen\n  //    2 > 3:  This won't happen\n  // }\n  public matchingEquality: boolean = false;\n\n  public isElse: boolean = false;\n  public isInline: boolean = false;\n\n  public returnDivert: RuntimeDivert | null = null;\n\n  constructor(content?: ParsedObject[] | null | undefined) {\n    super();\n\n    // Branches are allowed to be empty\n    if (content) {\n      this._innerWeave = new Weave(content);\n      this.AddContent(this._innerWeave);\n    }\n  }\n\n  get typeName(): string {\n    return \"ConditionalSingleBranch\";\n  }\n\n  // Runtime content can be summarised as follows:\n  //  - Evaluate an expression if necessary to branch on\n  //  - Branch to a named container if true\n  //       - Divert back to main flow\n  //         (owner Conditional is in control of this target point)\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    // Check for common mistake, of putting \"else:\" instead of \"- else:\"\n    if (this._innerWeave) {\n      for (const c of this._innerWeave.content) {\n        const text = asOrNull(c, Text);\n        if (text) {\n          // Don't need to trim at the start since the parser handles that already\n          if (text.text.startsWith(\"else:\")) {\n            this.Warning(\n              \"Saw the text 'else:' which is being treated as content. Did you mean '- else:'?\",\n              text\n            );\n          }\n        }\n      }\n    }\n\n    const container = new RuntimeContainer();\n\n    // Are we testing against a condition that's used for more than just this\n    // branch? If so, the first thing we need to do is replicate the value that's\n    // on the evaluation stack so that we don't fully consume it, in case other\n    // branches need to use it.\n    const duplicatesStackValue: boolean = this.matchingEquality && !this.isElse;\n\n    if (duplicatesStackValue) {\n      container.AddContent(RuntimeControlCommand.Duplicate());\n    }\n\n    this._conditionalDivert = new RuntimeDivert();\n\n    // else clause is unconditional catch-all, otherwise the divert is conditional\n    this._conditionalDivert.isConditional = !this.isElse;\n\n    // Need extra evaluation?\n    if (!this.isTrueBranch && !this.isElse) {\n      const needsEval: boolean = this.ownExpression !== null;\n      if (needsEval) {\n        container.AddContent(RuntimeControlCommand.EvalStart());\n      }\n\n      if (this.ownExpression) {\n        this.ownExpression.GenerateIntoContainer(container);\n      }\n\n      // Uses existing duplicated value\n      if (this.matchingEquality) {\n        container.AddContent(NativeFunctionCall.CallWithName(\"==\"));\n      }\n\n      if (needsEval) {\n        container.AddContent(RuntimeControlCommand.EvalEnd());\n      }\n    }\n\n    // Will pop from stack if conditional\n    container.AddContent(this._conditionalDivert);\n\n    this._contentContainer = this.GenerateRuntimeForContent();\n    this._contentContainer.name = \"b\";\n\n    // Multi-line conditionals get a newline at the start of each branch\n    // (as opposed to the start of the multi-line conditional since the condition\n    //  may evaluate to false.)\n    if (!this.isInline) {\n      this._contentContainer.InsertContent(new StringValue(\"\\n\"), 0);\n    }\n\n    if (duplicatesStackValue || (this.isElse && this.matchingEquality)) {\n      this._contentContainer.InsertContent(\n        RuntimeControlCommand.PopEvaluatedValue(),\n        0\n      );\n    }\n\n    container.AddToNamedContentOnly(this._contentContainer);\n\n    this.returnDivert = new RuntimeDivert();\n    this._contentContainer.AddContent(this.returnDivert);\n\n    return container;\n  };\n\n  public readonly GenerateRuntimeForContent = (): RuntimeContainer => {\n    // Empty branch - create empty container\n    if (this._innerWeave === null) {\n      return new RuntimeContainer();\n    }\n\n    return this._innerWeave.rootContainer;\n  };\n\n  public ResolveReferences(context: Story): void {\n    if (!this._conditionalDivert || !this._contentContainer) {\n      throw new Error();\n    }\n\n    this._conditionalDivert.targetPath = this._contentContainer.path;\n    super.ResolveReferences(context);\n  }\n}\n","export enum CustomFlags {\n  ParsingString = 0x1,\n  TagActive = 0x2,\n}\n","export class DebugMetadata {\n  public startLineNumber: number = 0;\n  public endLineNumber: number = 0;\n  public startCharacterNumber: number = 0;\n  public endCharacterNumber: number = 0;\n  public fileName: string | null = null;\n  public sourceName: string | null = null;\n\n  public Merge(dm: DebugMetadata) {\n    let newDebugMetadata = new DebugMetadata();\n\n    newDebugMetadata.fileName = this.fileName;\n    newDebugMetadata.sourceName = this.sourceName;\n\n    if (this.startLineNumber < dm.startLineNumber) {\n      newDebugMetadata.startLineNumber = this.startLineNumber;\n      newDebugMetadata.startCharacterNumber = this.startCharacterNumber;\n    } else if (this.startLineNumber > dm.startLineNumber) {\n      newDebugMetadata.startLineNumber = dm.startLineNumber;\n      newDebugMetadata.startCharacterNumber = dm.startCharacterNumber;\n    } else {\n      newDebugMetadata.startLineNumber = this.startLineNumber;\n      newDebugMetadata.startCharacterNumber = Math.min(\n        this.startCharacterNumber,\n        dm.startCharacterNumber\n      );\n    }\n\n    if (this.endLineNumber > dm.endLineNumber) {\n      newDebugMetadata.endLineNumber = this.endLineNumber;\n      newDebugMetadata.endCharacterNumber = this.endCharacterNumber;\n    } else if (this.endLineNumber < dm.endLineNumber) {\n      newDebugMetadata.endLineNumber = dm.endLineNumber;\n      newDebugMetadata.endCharacterNumber = dm.endCharacterNumber;\n    } else {\n      newDebugMetadata.endLineNumber = this.endLineNumber;\n      newDebugMetadata.endCharacterNumber = Math.max(\n        this.endCharacterNumber,\n        dm.endCharacterNumber\n      );\n    }\n\n    return newDebugMetadata;\n  }\n\n  public toString() {\n    if (this.fileName !== null) {\n      return `line ${this.startLineNumber} of ${this.fileName}\"`;\n    } else {\n      return \"line \" + this.startLineNumber;\n    }\n  }\n}\n","import { INamedContent } from \"../../../../engine/INamedContent\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Identifier } from \"../Identifier\";\n\nexport class ExternalDeclaration extends ParsedObject implements INamedContent {\n  public get name(): string | null {\n    return this.identifier?.name || null;\n  }\n\n  constructor(\n    public readonly identifier: Identifier,\n    public readonly argumentNames: string[]\n  ) {\n    super();\n  }\n\n  get typeName(): string {\n    return \"EXTERNAL\";\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject | null => {\n    this.story.AddExternal(this);\n\n    // No runtime code exists for an external, only metadata\n    return null;\n  };\n\n  public toString(): string {\n    return `EXTERNAL ${this.identifier?.name}`;\n  }\n}\n","import { Argument } from \"./ParsedHierarchy/Argument\";\nimport { Identifier } from \"./ParsedHierarchy/Identifier\";\n\nexport class FlowDecl {\n  constructor(\n    public readonly name: Identifier,\n    public readonly args: Argument[],\n    public readonly isFunction: boolean\n  ) {}\n}\n","import { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\n\nexport class Wrap<T extends RuntimeObject> extends ParsedObject {\n  constructor(private _objToWrap: T) {\n    super();\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => this._objToWrap;\n}\n","import { Glue as RuntimeGlue } from \"../../../engine/Glue\";\nimport { Wrap } from \"./Wrap\";\n\nexport class Glue extends Wrap<RuntimeGlue> {\n  constructor(glue: RuntimeGlue) {\n    super(glue);\n  }\n\n  get typeName(): string {\n    return \"Glue\";\n  }\n}\n","import { InkObject } from \"./Object\";\n\nexport class Glue extends InkObject {\n  public toString() {\n    return \"Glue\";\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ContentList } from \"../ContentList\";\nimport { Expression } from \"./Expression\";\nimport { FlowBase } from \"../Flow/FlowBase\";\nimport { NativeFunctionCall } from \"../../../../engine/NativeFunctionCall\";\nimport { IntValue } from \"../../../../engine/Value\";\nimport { Story } from \"../Story\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../../engine/VariableAssignment\";\nimport { VariableReference as RuntimeVariableReference } from \"../../../../engine/VariableReference\";\nimport { Weave } from \"../Weave\";\nimport { Identifier } from \"../Identifier\";\n\nexport class IncDecExpression extends Expression {\n  private _runtimeAssignment: RuntimeVariableAssignment | null = null;\n\n  public isInc: boolean;\n  public expression: Expression | null = null;\n\n  constructor(\n    public readonly varIdentifier: Identifier | null,\n    isIncOrExpression: boolean | Expression,\n    isInc?: boolean\n  ) {\n    super();\n\n    if (isIncOrExpression instanceof Expression) {\n      this.expression = isIncOrExpression;\n      this.AddContent(this.expression);\n      this.isInc = Boolean(isInc);\n    } else {\n      this.isInc = isIncOrExpression as boolean;\n    }\n  }\n\n  get typeName(): string {\n    return \"IncDecExpression\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    // x = x + y\n    // ^^^ ^ ^ ^\n    //  4  1 3 2\n    // Reverse polish notation: (x 1 +) (assign to x)\n\n    // 1.\n    container.AddContent(\n      new RuntimeVariableReference(this.varIdentifier?.name || null)\n    );\n\n    // 2.\n    // - Expression used in the form ~ x += y\n    // - Simple version: ~ x++\n    if (this.expression) {\n      this.expression.GenerateIntoContainer(container);\n    } else {\n      container.AddContent(new IntValue(1));\n    }\n\n    // 3.\n    container.AddContent(\n      NativeFunctionCall.CallWithName(this.isInc ? \"+\" : \"-\")\n    );\n\n    // 4.\n    this._runtimeAssignment = new RuntimeVariableAssignment(\n      this.varIdentifier?.name || null,\n      false\n    );\n    container.AddContent(this._runtimeAssignment);\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    const varResolveResult = context.ResolveVariableWithName(\n      this.varIdentifier?.name || \"\",\n      this\n    );\n\n    if (!varResolveResult.found) {\n      this.Error(\n        `variable for ${this.incrementDecrementWord} could not be found: '${this.varIdentifier}' after searching: {this.descriptionOfScope}`\n      );\n    }\n\n    if (!this._runtimeAssignment) {\n      throw new Error();\n    }\n\n    this._runtimeAssignment.isGlobal = varResolveResult.isGlobal;\n\n    if (\n      !(this.parent instanceof Weave) &&\n      !(this.parent instanceof FlowBase) &&\n      !(this.parent instanceof ContentList)\n    ) {\n      this.Error(`Can't use ${this.incrementDecrementWord} as sub-expression`);\n    }\n  }\n\n  get incrementDecrementWord(): \"increment\" | \"decrement\" {\n    if (this.isInc) {\n      return \"increment\";\n    }\n\n    return \"decrement\";\n  }\n\n  public readonly toString = (): string => {\n    if (this.expression) {\n      return `${this.varIdentifier?.name}${this.isInc ? \" += \" : \" -= \"}${\n        this.expression\n      }`;\n    }\n\n    return `${this.varIdentifier?.name}` + (this.isInc ? \"++\" : \"--\");\n  };\n}\n","import { ParsedObject } from \"./Object\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\nimport { Story } from \"./Story\";\n\nexport class IncludedFile extends ParsedObject {\n  constructor(public readonly includedStory: Story | null) {\n    super();\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject | null => {\n    // Left to the main story to process\n    return null;\n  };\n\n  get typeName(): string {\n    return \"IncludedFile\";\n  }\n}\n","export class InfixOperator {\n  constructor(\n    public readonly type: string,\n    public readonly precedence: number,\n    public readonly requireWhitespace: boolean\n  ) {}\n\n  public readonly toString = (): string => this.type;\n}\n","import { Argument } from \"./Argument\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { FlowLevel } from \"./Flow/FlowLevel\";\nimport { Identifier } from \"./Identifier\";\nimport { ParsedObject } from \"./Object\";\nimport { Story } from \"./Story\";\n\nexport class Knot extends FlowBase {\n  get flowLevel(): FlowLevel {\n    return FlowLevel.Knot;\n  }\n\n  constructor(\n    name: Identifier,\n    topLevelObjects: ParsedObject[],\n    args: Argument[],\n    isFunction: boolean\n  ) {\n    super(name, topLevelObjects, args, isFunction);\n  }\n\n  get typeName(): string {\n    return this.isFunction ? \"Function\" : \"Knot\";\n  }\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n\n    let parentStory = this.story;\n\n    // Enforce rule that stitches must not have the same\n    // name as any knots that exist in the story\n    for (const stitchName in this.subFlowsByName) {\n      const knotWithStitchName = parentStory.ContentWithNameAtLevel(\n        stitchName,\n        FlowLevel.Knot,\n        false\n      );\n\n      if (knotWithStitchName) {\n        const stitch = this.subFlowsByName.get(stitchName);\n        const errorMsg = `Stitch '${\n          stitch ? stitch.name : \"NO STITCH FOUND\"\n        }' has the same name as a knot (on ${\n          knotWithStitchName.debugMetadata\n        })`;\n        this.Error(errorMsg, stitch);\n      }\n    }\n  }\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { Expression } from \"../Expression/Expression\";\nimport { InkList as RuntimeInkList } from \"../../../../engine/InkList\";\nimport { InkListItem as RuntimeInkListItem } from \"../../../../engine/InkList\";\nimport { ListElementDefinition } from \"./ListElementDefinition\";\nimport { ListValue } from \"../../../../engine/Value\";\nimport { Identifier } from \"../Identifier\";\n\nexport class List extends Expression {\n  constructor(public readonly itemIdentifierList: Identifier[]) {\n    super();\n  }\n\n  get typeName(): string {\n    return \"List\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    const runtimeRawList = new RuntimeInkList();\n\n    if (this.itemIdentifierList != null) {\n      for (const itemIdentifier of this.itemIdentifierList) {\n        const nameParts = itemIdentifier?.name?.split(\".\") || [];\n\n        let listName: string | null = null;\n        let listItemName: string = \"\";\n        if (nameParts.length > 1) {\n          listName = nameParts[0];\n          listItemName = nameParts[1];\n        } else {\n          listItemName = nameParts[0];\n        }\n\n        const listItem = this.story.ResolveListItem(\n          listName,\n          listItemName,\n          this\n        ) as ListElementDefinition;\n\n        if (listItem === null) {\n          if (listName === null) {\n            this.Error(\n              `Could not find list definition that contains item '${itemIdentifier}'`\n            );\n          } else {\n            this.Error(`Could not find list item ${itemIdentifier}`);\n          }\n        } else {\n          if (listItem.parent == null) {\n            this.Error(\n              `Could not find list definition for item ${itemIdentifier}`\n            );\n            return;\n          }\n          if (!listName) {\n            listName = listItem.parent.identifier?.name || null;\n          }\n\n          const item = new RuntimeInkListItem(listName, listItem.name || null);\n\n          if (runtimeRawList.has(item.serialized())) {\n            this.Warning(`Duplicate of item '${itemIdentifier}' in list.`);\n          } else {\n            runtimeRawList.Add(item, listItem.seriesValue);\n          }\n        }\n      }\n    }\n\n    container.AddContent(new ListValue(runtimeRawList));\n  };\n}\n","import { ListDefinition } from \"./ListDefinition\";\nimport { ParsedObject } from \"../Object\";\nimport { InkObject as RuntimeObject } from \"../../../../engine/Object\";\nimport { Story } from \"../Story\";\nimport { SymbolType } from \"../SymbolType\";\nimport { Identifier } from \"../Identifier\";\n\nexport class ListElementDefinition extends ParsedObject {\n  public seriesValue: number = 0;\n\n  public parent: ListDefinition | null = null;\n\n  get fullName(): string {\n    const parentList = this.parent;\n    if (parentList === null) {\n      throw new Error(\"Can't get full name without a parent list.\");\n    }\n\n    return `${parentList.identifier?.name}.${this.name}`;\n  }\n\n  get typeName(): string {\n    return \"ListElement\";\n  }\n\n  get name(): string | null {\n    return this.indentifier?.name || null;\n  }\n\n  constructor(\n    public readonly indentifier: Identifier,\n    public readonly inInitialList: boolean,\n    public readonly explicitValue: number | null = null\n  ) {\n    super();\n    this.parent = this.parent as ListDefinition;\n  }\n\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    throw new Error(\"Not implemented.\");\n  };\n\n  public ResolveReferences(context: Story): void {\n    super.ResolveReferences(context);\n    context.CheckForNamingCollisions(\n      this,\n      this.indentifier,\n      SymbolType.ListItem\n    );\n  }\n\n  public readonly toString = (): string => this.fullName;\n}\n","export enum StatementLevel {\n  InnerBlock,\n  Stitch,\n  Knot,\n  Top,\n}\n","import { Argument } from \"./Argument\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { FlowLevel } from \"./Flow/FlowLevel\";\nimport { Identifier } from \"./Identifier\";\nimport { ParsedObject } from \"./Object\";\n\nexport class Stitch extends FlowBase {\n  get flowLevel(): FlowLevel {\n    return FlowLevel.Stitch;\n  }\n\n  constructor(\n    name: Identifier,\n    topLevelObjects: ParsedObject[],\n    args: Argument[],\n    isFunction: boolean\n  ) {\n    super(name, topLevelObjects, args, isFunction);\n  }\n\n  get typeName(): string {\n    return \"Stitch\";\n  }\n\n  // Fixes TS issue with not being able to access the prototype via `super` in functions\n  // attached to the class as properties.\n  private baseToString = this.toString;\n\n  public toString = (): string => {\n    return `${\n      this.parent !== null ? this.parent + \" > \" : \"\"\n    }${this.baseToString()}`;\n  };\n}\n","import { InkObject } from \"./Object\";\n\n// New version of tags is dynamic - it constructs the tags\n// at runtime based on BeginTag and EndTag control commands.\n// Plain text that's in the output stream is turned into tags\n// when you do story.currentTags.\n// The only place this is used is when flattening tags down\n// to string in advance, during dynamic string generation if\n// there's a tag embedded in it. See how ControlCommand.EndString\n// is implemented in Story.cs for more details + comment\nexport class Tag extends InkObject {\n  public readonly text: string;\n\n  constructor(tagText: string) {\n    super();\n    this.text = tagText.toString() || \"\";\n  }\n\n  public toString(): string {\n    return \"# \" + this.text;\n  }\n}\n","import { Path } from \"./Path\";\nimport { CallStack } from \"./CallStack\";\nimport { throwNullException } from \"./NullException\";\nimport { InkObject } from \"./Object\";\n\nexport class Choice extends InkObject {\n  public text: string = \"\";\n  public index: number = 0;\n  public threadAtGeneration: CallStack.Thread | null = null;\n  public sourcePath: string = \"\";\n  public targetPath: Path | null = null;\n  public isInvisibleDefault: boolean = false;\n  public tags: string[] | null = null;\n  public originalThreadIndex: number = 0;\n\n  get pathStringOnChoice(): string {\n    if (this.targetPath === null)\n      return throwNullException(\"Choice.targetPath\");\n    return this.targetPath.toString();\n  }\n  set pathStringOnChoice(value: string) {\n    this.targetPath = new Path(value);\n  }\n\n  public Clone() {\n    let copy = new Choice();\n    copy.text = this.text;\n    copy.sourcePath = this.sourcePath;\n    copy.index = this.index;\n    copy.targetPath = this.targetPath;\n    copy.originalThreadIndex = this.originalThreadIndex;\n    copy.isInvisibleDefault = this.isInvisibleDefault;\n    if (this.threadAtGeneration !== null)\n      copy.threadAtGeneration = this.threadAtGeneration.Copy();\n\n    return copy;\n  }\n}\n","import { InkListItem } from \"./InkList\";\nimport { ListValue } from \"./Value\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { TryGetResult } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\n\nexport class ListDefinitionsOrigin {\n  protected _lists: Map<string, ListDefinition>;\n  protected _allUnambiguousListValueCache: Map<string, ListValue>;\n\n  constructor(lists: ListDefinition[]) {\n    this._lists = new Map();\n    this._allUnambiguousListValueCache = new Map();\n\n    for (let list of lists) {\n      this._lists.set(list.name, list);\n\n      for (let [key, val] of list.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        let listValue = new ListValue(item, val);\n\n        if (!item.itemName) {\n          throw new Error(\"item.itemName is null or undefined.\");\n        }\n\n        this._allUnambiguousListValueCache.set(item.itemName, listValue);\n        this._allUnambiguousListValueCache.set(item.fullName, listValue);\n      }\n    }\n  }\n  get lists(): ListDefinition[] {\n    let listOfLists: ListDefinition[] = [];\n\n    for (let [, value] of this._lists) {\n      listOfLists.push(value);\n    }\n\n    return listOfLists;\n  }\n  public TryListGetDefinition(\n    name: string | null,\n    /* out */ def: ListDefinition | null\n  ): TryGetResult<ListDefinition | null> {\n    if (name === null) {\n      return { result: def, exists: false };\n    }\n    // initially, this function returns a boolean and the second parameter is an out.\n    let definition = this._lists.get(name);\n    if (!definition) return { result: def, exists: false };\n\n    return { result: definition, exists: true };\n  }\n  public FindSingleItemListWithName(name: string | null) {\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let val = this._allUnambiguousListValueCache.get(name);\n\n    if (typeof val !== \"undefined\") {\n      return val;\n    }\n\n    return null;\n  }\n}\n","import { Container } from \"./Container\";\nimport {\n  Value,\n  IntValue,\n  FloatValue,\n  StringValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n  BoolValue,\n} from \"./Value\";\nimport { Glue } from \"./Glue\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { Divert } from \"./Divert\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { VariableReference } from \"./VariableReference\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { Path } from \"./Path\";\nimport { Choice } from \"./Choice\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { InkListItem, InkList } from \"./InkList\";\nimport { InkObject } from \"./Object\";\nimport { asOrNull } from \"./TypeAssertion\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class JsonSerialisation {\n  public static JArrayToRuntimeObjList(\n    jArray: any[],\n    skipLast: boolean = false\n  ) {\n    let count = jArray.length;\n    if (skipLast) count--;\n\n    let list: InkObject[] = [];\n\n    for (let i = 0; i < count; i++) {\n      let jTok = jArray[i];\n      let runtimeObj = this.JTokenToRuntimeObject(jTok);\n      if (runtimeObj === null) {\n        return throwNullException(\"runtimeObj\");\n      }\n      list.push(runtimeObj);\n    }\n\n    return list;\n  }\n\n  public static WriteDictionaryRuntimeObjs(\n    writer: SimpleJson.Writer,\n    dictionary: Map<string, InkObject>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dictionary) {\n      writer.WritePropertyStart(key);\n      this.WriteRuntimeObject(writer, value);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteListRuntimeObjs(\n    writer: SimpleJson.Writer,\n    list: InkObject[]\n  ) {\n    writer.WriteArrayStart();\n    for (let value of list) {\n      this.WriteRuntimeObject(writer, value);\n    }\n    writer.WriteArrayEnd();\n  }\n\n  public static WriteIntDictionary(\n    writer: SimpleJson.Writer,\n    dict: Map<string, number>\n  ) {\n    writer.WriteObjectStart();\n    for (let [key, value] of dict) {\n      writer.WriteIntProperty(key, value);\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteRuntimeObject(\n    writer: SimpleJson.Writer,\n    obj: InkObject\n  ): void {\n    let container = asOrNull(obj, Container);\n    if (container) {\n      this.WriteRuntimeContainer(writer, container);\n      return;\n    }\n\n    let divert = asOrNull(obj, Divert);\n    if (divert) {\n      let divTypeKey = \"->\";\n      if (divert.isExternal) {\n        divTypeKey = \"x()\";\n      } else if (divert.pushesToStack) {\n        if (divert.stackPushType == PushPopType.Function) {\n          divTypeKey = \"f()\";\n        } else if (divert.stackPushType == PushPopType.Tunnel) {\n          divTypeKey = \"->t->\";\n        }\n      }\n\n      let targetStr;\n      if (divert.hasVariableTarget) {\n        targetStr = divert.variableDivertName;\n      } else {\n        targetStr = divert.targetPathString;\n      }\n\n      writer.WriteObjectStart();\n      writer.WriteProperty(divTypeKey, targetStr);\n\n      if (divert.hasVariableTarget) {\n        writer.WriteProperty(\"var\", true);\n      }\n\n      if (divert.isConditional) {\n        writer.WriteProperty(\"c\", true);\n      }\n\n      if (divert.externalArgs > 0) {\n        writer.WriteIntProperty(\"exArgs\", divert.externalArgs);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choicePoint = asOrNull(obj, ChoicePoint);\n    if (choicePoint) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"*\", choicePoint.pathStringOnChoice);\n      writer.WriteIntProperty(\"flg\", choicePoint.flags);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let boolVal = asOrNull(obj, BoolValue);\n    if (boolVal) {\n      writer.WriteBool(boolVal.value);\n      return;\n    }\n\n    let intVal = asOrNull(obj, IntValue);\n    if (intVal) {\n      writer.WriteInt(intVal.value);\n      return;\n    }\n\n    let floatVal = asOrNull(obj, FloatValue);\n    if (floatVal) {\n      writer.WriteFloat(floatVal.value);\n      return;\n    }\n\n    let strVal = asOrNull(obj, StringValue);\n    if (strVal) {\n      if (strVal.isNewline) {\n        writer.Write(\"\\n\", false);\n      } else {\n        writer.WriteStringStart();\n        writer.WriteStringInner(\"^\");\n        writer.WriteStringInner(strVal.value);\n        writer.WriteStringEnd();\n      }\n      return;\n    }\n\n    let listVal = asOrNull(obj, ListValue);\n    if (listVal) {\n      this.WriteInkList(writer, listVal);\n      return;\n    }\n\n    let divTargetVal = asOrNull(obj, DivertTargetValue);\n    if (divTargetVal) {\n      writer.WriteObjectStart();\n      if (divTargetVal.value === null) {\n        return throwNullException(\"divTargetVal.value\");\n      }\n      writer.WriteProperty(\"^->\", divTargetVal.value.componentsString);\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let varPtrVal = asOrNull(obj, VariablePointerValue);\n    if (varPtrVal) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"^var\", varPtrVal.value);\n      writer.WriteIntProperty(\"ci\", varPtrVal.contextIndex);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let glue = asOrNull(obj, Glue);\n    if (glue) {\n      writer.Write(\"<>\");\n      return;\n    }\n\n    let controlCmd = asOrNull(obj, ControlCommand);\n    if (controlCmd) {\n      writer.Write(\n        JsonSerialisation._controlCommandNames[controlCmd.commandType]\n      );\n      return;\n    }\n\n    let nativeFunc = asOrNull(obj, NativeFunctionCall);\n    if (nativeFunc) {\n      let name = nativeFunc.name;\n\n      if (name == \"^\") name = \"L^\";\n\n      writer.Write(name);\n      return;\n    }\n\n    let varRef = asOrNull(obj, VariableReference);\n    if (varRef) {\n      writer.WriteObjectStart();\n      let readCountPath = varRef.pathStringForCount;\n      if (readCountPath != null) {\n        writer.WriteProperty(\"CNT?\", readCountPath);\n      } else {\n        writer.WriteProperty(\"VAR?\", varRef.name);\n      }\n\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let varAss = asOrNull(obj, VariableAssignment);\n    if (varAss) {\n      writer.WriteObjectStart();\n\n      let key = varAss.isGlobal ? \"VAR=\" : \"temp=\";\n      writer.WriteProperty(key, varAss.variableName);\n\n      // Reassignment?\n      if (!varAss.isNewDeclaration) writer.WriteProperty(\"re\", true);\n\n      writer.WriteObjectEnd();\n\n      return;\n    }\n\n    let voidObj = asOrNull(obj, Void);\n    if (voidObj) {\n      writer.Write(\"void\");\n      return;\n    }\n\n    let tag = asOrNull(obj, Tag);\n    if (tag) {\n      writer.WriteObjectStart();\n      writer.WriteProperty(\"#\", tag.text);\n      writer.WriteObjectEnd();\n      return;\n    }\n\n    let choice = asOrNull(obj, Choice);\n    if (choice) {\n      this.WriteChoice(writer, choice);\n      return;\n    }\n\n    throw new Error(\"Failed to convert runtime object to Json token: \" + obj);\n  }\n\n  public static JObjectToDictionaryRuntimeObjs(jObject: Record<string, any>) {\n    let dict: Map<string, InkObject> = new Map();\n\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        let inkObject = this.JTokenToRuntimeObject(jObject[key]);\n        if (inkObject === null) {\n          return throwNullException(\"inkObject\");\n        }\n        dict.set(key, inkObject);\n      }\n    }\n\n    return dict;\n  }\n\n  public static JObjectToIntDictionary(jObject: Record<string, any>) {\n    let dict: Map<string, number> = new Map();\n    for (let key in jObject) {\n      if (jObject.hasOwnProperty(key)) {\n        dict.set(key, parseInt(jObject[key]));\n      }\n    }\n    return dict;\n  }\n\n  public static JTokenToRuntimeObject(token: any): InkObject | null {\n    if (\n      (typeof token === \"number\" && !isNaN(token)) ||\n      typeof token === \"boolean\"\n    ) {\n      return Value.Create(token);\n    }\n\n    if (typeof token === \"string\") {\n      let str = token.toString();\n\n      // String value\n      let firstChar = str[0];\n      if (firstChar == \"^\") return new StringValue(str.substring(1));\n      else if (firstChar == \"\\n\" && str.length == 1)\n        return new StringValue(\"\\n\");\n\n      // Glue\n      if (str == \"<>\") return new Glue();\n\n      // Control commands (would looking up in a hash set be faster?)\n      for (let i = 0; i < JsonSerialisation._controlCommandNames.length; ++i) {\n        let cmdName = JsonSerialisation._controlCommandNames[i];\n        if (str == cmdName) {\n          return new ControlCommand(i);\n        }\n      }\n\n      // Native functions\n      if (str == \"L^\") str = \"^\";\n      if (NativeFunctionCall.CallExistsWithName(str))\n        return NativeFunctionCall.CallWithName(str);\n\n      // Pop\n      if (str == \"->->\") return ControlCommand.PopTunnel();\n      else if (str == \"~ret\") return ControlCommand.PopFunction();\n\n      // Void\n      if (str == \"void\") return new Void();\n    }\n\n    if (typeof token === \"object\" && !Array.isArray(token)) {\n      let obj = token as Record<string, any>;\n      let propValue;\n\n      // Divert target value to path\n      if (obj[\"^->\"]) {\n        propValue = obj[\"^->\"];\n        return new DivertTargetValue(new Path(propValue.toString()));\n      }\n\n      // VariablePointerValue\n      if (obj[\"^var\"]) {\n        propValue = obj[\"^var\"];\n        let varPtr = new VariablePointerValue(propValue.toString());\n        if (\"ci\" in obj) {\n          propValue = obj[\"ci\"];\n          varPtr.contextIndex = parseInt(propValue);\n        }\n        return varPtr;\n      }\n\n      // Divert\n      let isDivert = false;\n      let pushesToStack = false;\n      let divPushType = PushPopType.Function;\n      let external = false;\n      if ((propValue = obj[\"->\"])) {\n        isDivert = true;\n      } else if ((propValue = obj[\"f()\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Function;\n      } else if ((propValue = obj[\"->t->\"])) {\n        isDivert = true;\n        pushesToStack = true;\n        divPushType = PushPopType.Tunnel;\n      } else if ((propValue = obj[\"x()\"])) {\n        isDivert = true;\n        external = true;\n        pushesToStack = false;\n        divPushType = PushPopType.Function;\n      }\n\n      if (isDivert) {\n        let divert = new Divert();\n        divert.pushesToStack = pushesToStack;\n        divert.stackPushType = divPushType;\n        divert.isExternal = external;\n\n        let target = propValue.toString();\n\n        if ((propValue = obj[\"var\"])) divert.variableDivertName = target;\n        else divert.targetPathString = target;\n\n        divert.isConditional = !!obj[\"c\"];\n\n        if (external) {\n          if ((propValue = obj[\"exArgs\"]))\n            divert.externalArgs = parseInt(propValue);\n        }\n\n        return divert;\n      }\n\n      // Choice\n      if ((propValue = obj[\"*\"])) {\n        let choice = new ChoicePoint();\n        choice.pathStringOnChoice = propValue.toString();\n\n        if ((propValue = obj[\"flg\"])) choice.flags = parseInt(propValue);\n\n        return choice;\n      }\n\n      // Variable reference\n      if ((propValue = obj[\"VAR?\"])) {\n        return new VariableReference(propValue.toString());\n      } else if ((propValue = obj[\"CNT?\"])) {\n        let readCountVarRef = new VariableReference();\n        readCountVarRef.pathStringForCount = propValue.toString();\n        return readCountVarRef;\n      }\n\n      // Variable assignment\n      let isVarAss = false;\n      let isGlobalVar = false;\n      if ((propValue = obj[\"VAR=\"])) {\n        isVarAss = true;\n        isGlobalVar = true;\n      } else if ((propValue = obj[\"temp=\"])) {\n        isVarAss = true;\n        isGlobalVar = false;\n      }\n      if (isVarAss) {\n        let varName = propValue.toString();\n        let isNewDecl = !obj[\"re\"];\n        let varAss = new VariableAssignment(varName, isNewDecl);\n        varAss.isGlobal = isGlobalVar;\n        return varAss;\n      }\n      if (obj[\"#\"] !== undefined) {\n        propValue = obj[\"#\"];\n        return new Tag(propValue.toString());\n      }\n\n      // List value\n      if ((propValue = obj[\"list\"])) {\n        // var listContent = (Dictionary<string, object>)propValue;\n        let listContent = propValue as Record<string, any>;\n        let rawList = new InkList();\n        if ((propValue = obj[\"origins\"])) {\n          // var namesAsObjs = (List<object>)propValue;\n          let namesAsObjs = propValue as string[];\n          // rawList.SetInitialOriginNames(namesAsObjs.Cast<string>().ToList());\n          rawList.SetInitialOriginNames(namesAsObjs);\n        }\n\n        for (let key in listContent) {\n          if (listContent.hasOwnProperty(key)) {\n            let nameToVal = listContent[key];\n            let item = new InkListItem(key);\n            let val = parseInt(nameToVal);\n            rawList.Add(item, val);\n          }\n        }\n\n        return new ListValue(rawList);\n      }\n\n      if (obj[\"originalChoicePath\"] != null) return this.JObjectToChoice(obj);\n    }\n\n    // Array is always a Runtime.Container\n    if (Array.isArray(token)) {\n      return this.JArrayToContainer(token);\n    }\n\n    if (token === null || token === undefined) return null;\n\n    throw new Error(\n      \"Failed to convert token to runtime object: \" +\n        this.toJson(token, [\"parent\"])\n    );\n  }\n\n  public static toJson<T>(\n    me: T,\n    removes?: (keyof T)[],\n    space?: number\n  ): string {\n    return JSON.stringify(\n      me,\n      (k, v) => (removes?.some((r) => r === k) ? undefined : v),\n      space\n    );\n  }\n\n  public static WriteRuntimeContainer(\n    writer: SimpleJson.Writer,\n    container: Container | null,\n    withoutName: boolean = false\n  ) {\n    writer.WriteArrayStart();\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    for (let c of container.content) this.WriteRuntimeObject(writer, c);\n\n    let namedOnlyContent = container.namedOnlyContent;\n    let countFlags = container.countFlags;\n    let hasNameProperty = container.name != null && !withoutName;\n\n    let hasTerminator =\n      namedOnlyContent != null || countFlags > 0 || hasNameProperty;\n    if (hasTerminator) {\n      writer.WriteObjectStart();\n    }\n\n    if (namedOnlyContent != null) {\n      for (let [key, value] of namedOnlyContent) {\n        let name = key;\n        let namedContainer = asOrNull(value, Container);\n        writer.WritePropertyStart(name);\n        this.WriteRuntimeContainer(writer, namedContainer, true);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (countFlags > 0) writer.WriteIntProperty(\"#f\", countFlags);\n\n    if (hasNameProperty) writer.WriteProperty(\"#n\", container.name);\n\n    if (hasTerminator) writer.WriteObjectEnd();\n    else writer.WriteNull();\n\n    writer.WriteArrayEnd();\n  }\n\n  public static JArrayToContainer(jArray: any[]) {\n    let container = new Container();\n    container.content = this.JArrayToRuntimeObjList(jArray, true);\n\n    let terminatingObj = jArray[jArray.length - 1] as Record<string, any>;\n    if (terminatingObj != null) {\n      let namedOnlyContent = new Map();\n\n      for (let key in terminatingObj) {\n        if (key == \"#f\") {\n          container.countFlags = parseInt(terminatingObj[key]);\n        } else if (key == \"#n\") {\n          container.name = terminatingObj[key].toString();\n        } else {\n          let namedContentItem = this.JTokenToRuntimeObject(\n            terminatingObj[key]\n          );\n          // var namedSubContainer = namedContentItem as Container;\n          let namedSubContainer = asOrNull(namedContentItem, Container);\n          if (namedSubContainer) namedSubContainer.name = key;\n          namedOnlyContent.set(key, namedContentItem);\n        }\n      }\n\n      container.namedOnlyContent = namedOnlyContent;\n    }\n\n    return container;\n  }\n\n  public static JObjectToChoice(jObj: Record<string, any>) {\n    let choice = new Choice();\n    choice.text = jObj[\"text\"].toString();\n    choice.index = parseInt(jObj[\"index\"]);\n    choice.sourcePath = jObj[\"originalChoicePath\"].toString();\n    choice.originalThreadIndex = parseInt(jObj[\"originalThreadIndex\"]);\n    choice.pathStringOnChoice = jObj[\"targetPath\"].toString();\n    choice.tags = this.JArrayToTags(jObj);\n    return choice;\n  }\n\n  public static JArrayToTags(jObj: Record<string, any>) {\n    if (jObj[\"tags\"]) {\n      return jObj[\"tags\"];\n    } else {\n      return null;\n    }\n  }\n\n  public static WriteChoice(writer: SimpleJson.Writer, choice: Choice) {\n    writer.WriteObjectStart();\n    writer.WriteProperty(\"text\", choice.text);\n    writer.WriteIntProperty(\"index\", choice.index);\n    writer.WriteProperty(\"originalChoicePath\", choice.sourcePath);\n    writer.WriteIntProperty(\"originalThreadIndex\", choice.originalThreadIndex);\n    writer.WriteProperty(\"targetPath\", choice.pathStringOnChoice);\n    this.WriteChoiceTags(writer, choice);\n    writer.WriteObjectEnd();\n  }\n\n  public static WriteChoiceTags(writer: SimpleJson.Writer, choice: Choice) {\n    if (choice.tags && choice.tags.length > 0) {\n      writer.WritePropertyStart(\"tags\");\n      writer.WriteArrayStart();\n      for (const tag of choice.tags!) {\n        writer.Write(tag);\n      }\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n    }\n  }\n\n  public static WriteInkList(writer: SimpleJson.Writer, listVal: ListValue) {\n    let rawList = listVal.value;\n    if (rawList === null) {\n      return throwNullException(\"rawList\");\n    }\n\n    writer.WriteObjectStart();\n    writer.WritePropertyStart(\"list\");\n    writer.WriteObjectStart();\n\n    for (let [key, val] of rawList) {\n      let item = InkListItem.fromSerializedKey(key);\n      let itemVal = val;\n\n      if (item.itemName === null) {\n        return throwNullException(\"item.itemName\");\n      }\n\n      writer.WritePropertyNameStart();\n      writer.WritePropertyNameInner(item.originName ? item.originName : \"?\");\n      writer.WritePropertyNameInner(\".\");\n      writer.WritePropertyNameInner(item.itemName);\n      writer.WritePropertyNameEnd();\n\n      writer.Write(itemVal);\n\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    writer.WritePropertyEnd();\n\n    if (\n      rawList.Count == 0 &&\n      rawList.originNames != null &&\n      rawList.originNames.length > 0\n    ) {\n      writer.WritePropertyStart(\"origins\");\n      writer.WriteArrayStart();\n      for (let name of rawList.originNames) writer.Write(name);\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n  }\n\n  public static ListDefinitionsToJToken(origin: ListDefinitionsOrigin) {\n    let result: Record<string, any> = {};\n\n    for (let def of origin.lists) {\n      let listDefJson: Record<string, any> = {};\n\n      for (let [key, val] of def.items) {\n        let item = InkListItem.fromSerializedKey(key);\n        if (item.itemName === null) {\n          return throwNullException(\"item.itemName\");\n        }\n        listDefJson[item.itemName] = val;\n      }\n\n      result[def.name] = listDefJson;\n    }\n\n    return result;\n  }\n\n  public static JTokenToListDefinitions(obj: Record<string, any>) {\n    // var defsObj = (Dictionary<string, object>)obj;\n    let defsObj = obj;\n\n    let allDefs: ListDefinition[] = [];\n\n    for (let key in defsObj) {\n      if (defsObj.hasOwnProperty(key)) {\n        let name = key.toString();\n        // var listDefJson = (Dictionary<string, object>)kv.Value;\n        let listDefJson = defsObj[key] as Record<string, any>;\n\n        // Cast (string, object) to (string, int) for items\n        let items: Map<string, number> = new Map();\n\n        for (let nameValueKey in listDefJson) {\n          if (defsObj.hasOwnProperty(key)) {\n            let nameValue = listDefJson[nameValueKey];\n            items.set(nameValueKey, parseInt(nameValue));\n          }\n        }\n\n        let def = new ListDefinition(name, items);\n        allDefs.push(def);\n      }\n    }\n\n    return new ListDefinitionsOrigin(allDefs);\n  }\n\n  private static _controlCommandNames = (() => {\n    let _controlCommandNames: string[] = [];\n\n    _controlCommandNames[ControlCommand.CommandType.EvalStart] = \"ev\";\n    _controlCommandNames[ControlCommand.CommandType.EvalOutput] = \"out\";\n    _controlCommandNames[ControlCommand.CommandType.EvalEnd] = \"/ev\";\n    _controlCommandNames[ControlCommand.CommandType.Duplicate] = \"du\";\n    _controlCommandNames[ControlCommand.CommandType.PopEvaluatedValue] = \"pop\";\n    _controlCommandNames[ControlCommand.CommandType.PopFunction] = \"~ret\";\n    _controlCommandNames[ControlCommand.CommandType.PopTunnel] = \"->->\";\n    _controlCommandNames[ControlCommand.CommandType.BeginString] = \"str\";\n    _controlCommandNames[ControlCommand.CommandType.EndString] = \"/str\";\n    _controlCommandNames[ControlCommand.CommandType.NoOp] = \"nop\";\n    _controlCommandNames[ControlCommand.CommandType.ChoiceCount] = \"choiceCnt\";\n    _controlCommandNames[ControlCommand.CommandType.Turns] = \"turn\";\n    _controlCommandNames[ControlCommand.CommandType.TurnsSince] = \"turns\";\n    _controlCommandNames[ControlCommand.CommandType.ReadCount] = \"readc\";\n    _controlCommandNames[ControlCommand.CommandType.Random] = \"rnd\";\n    _controlCommandNames[ControlCommand.CommandType.SeedRandom] = \"srnd\";\n    _controlCommandNames[ControlCommand.CommandType.VisitIndex] = \"visit\";\n    _controlCommandNames[ControlCommand.CommandType.SequenceShuffleIndex] =\n      \"seq\";\n    _controlCommandNames[ControlCommand.CommandType.StartThread] = \"thread\";\n    _controlCommandNames[ControlCommand.CommandType.Done] = \"done\";\n    _controlCommandNames[ControlCommand.CommandType.End] = \"end\";\n    _controlCommandNames[ControlCommand.CommandType.ListFromInt] = \"listInt\";\n    _controlCommandNames[ControlCommand.CommandType.ListRange] = \"range\";\n    _controlCommandNames[ControlCommand.CommandType.ListRandom] = \"lrnd\";\n    _controlCommandNames[ControlCommand.CommandType.BeginTag] = \"#\";\n    _controlCommandNames[ControlCommand.CommandType.EndTag] = \"/#\";\n\n    for (let i = 0; i < ControlCommand.CommandType.TOTAL_VALUES; ++i) {\n      if (_controlCommandNames[i] == null)\n        throw new Error(\"Control command not accounted for in serialisation\");\n    }\n\n    return _controlCommandNames;\n  })();\n}\n","import { PushPopType } from \"./PushPop\";\nimport { Path } from \"./Path\";\nimport { Story } from \"./Story\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { ListValue } from \"./Value\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { Pointer } from \"./Pointer\";\nimport { InkObject } from \"./Object\";\nimport { Debug } from \"./Debug\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\n\nexport class CallStack {\n  get elements() {\n    return this.callStack;\n  }\n\n  get depth() {\n    return this.elements.length;\n  }\n\n  get currentElement() {\n    let thread = this._threads[this._threads.length - 1];\n    let cs = thread.callstack;\n    return cs[cs.length - 1];\n  }\n\n  get currentElementIndex() {\n    return this.callStack.length - 1;\n  }\n\n  get currentThread(): CallStack.Thread {\n    return this._threads[this._threads.length - 1];\n  }\n  set currentThread(value: CallStack.Thread) {\n    Debug.Assert(\n      this._threads.length == 1,\n      \"Shouldn't be directly setting the current thread when we have a stack of them\"\n    );\n\n    this._threads.length = 0;\n    this._threads.push(value);\n  }\n\n  get canPop() {\n    return this.callStack.length > 1;\n  }\n\n  constructor(storyContext: Story);\n  constructor(toCopy: CallStack);\n  constructor() {\n    if (arguments[0] instanceof Story) {\n      let storyContext = arguments[0] as Story;\n\n      this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n      this.Reset();\n    } else {\n      let toCopy = arguments[0] as CallStack;\n\n      this._threads = [];\n      for (let otherThread of toCopy._threads) {\n        this._threads.push(otherThread.Copy());\n      }\n      this._threadCounter = toCopy._threadCounter;\n      this._startOfRoot = toCopy._startOfRoot.copy();\n    }\n  }\n\n  public Reset() {\n    this._threads = [];\n    this._threads.push(new CallStack.Thread());\n\n    this._threads[0].callstack.push(\n      new CallStack.Element(PushPopType.Tunnel, this._startOfRoot)\n    );\n  }\n\n  public SetJsonToken(jObject: Record<string, any>, storyContext: Story) {\n    this._threads.length = 0;\n\n    // TODO: (List<object>) jObject [\"threads\"];\n    let jThreads: any[] = jObject[\"threads\"];\n\n    for (let jThreadTok of jThreads) {\n      // TODO: var jThreadObj = (Dictionary<string, object>)jThreadTok;\n      let jThreadObj = jThreadTok;\n      let thread = new CallStack.Thread(jThreadObj, storyContext);\n      this._threads.push(thread);\n    }\n\n    // TODO: (int)jObject [\"threadCounter\"];\n    this._threadCounter = parseInt(jObject[\"threadCounter\"]);\n    this._startOfRoot = Pointer.StartOf(storyContext.rootContentContainer);\n  }\n  public WriteJson(w: SimpleJson.Writer) {\n    w.WriteObject((writer) => {\n      writer.WritePropertyStart(\"threads\");\n      writer.WriteArrayStart();\n\n      for (let thread of this._threads) {\n        thread.WriteJson(writer);\n      }\n\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WritePropertyStart(\"threadCounter\");\n      writer.WriteInt(this._threadCounter);\n      writer.WritePropertyEnd();\n    });\n  }\n\n  public PushThread() {\n    let newThread = this.currentThread.Copy();\n    this._threadCounter++;\n    newThread.threadIndex = this._threadCounter;\n    this._threads.push(newThread);\n  }\n\n  public ForkThread() {\n    let forkedThread = this.currentThread.Copy();\n    this._threadCounter++;\n    forkedThread.threadIndex = this._threadCounter;\n    return forkedThread;\n  }\n\n  public PopThread() {\n    if (this.canPopThread) {\n      this._threads.splice(this._threads.indexOf(this.currentThread), 1); // should be equivalent to a pop()\n    } else {\n      throw new Error(\"Can't pop thread\");\n    }\n  }\n\n  get canPopThread() {\n    return this._threads.length > 1 && !this.elementIsEvaluateFromGame;\n  }\n\n  get elementIsEvaluateFromGame() {\n    return this.currentElement.type == PushPopType.FunctionEvaluationFromGame;\n  }\n\n  public Push(\n    type: PushPopType,\n    externalEvaluationStackHeight: number = 0,\n    outputStreamLengthWithPushed: number = 0\n  ) {\n    let element = new CallStack.Element(\n      type,\n      this.currentElement.currentPointer,\n      false\n    );\n\n    element.evaluationStackHeightWhenPushed = externalEvaluationStackHeight;\n    element.functionStartInOutputStream = outputStreamLengthWithPushed;\n\n    this.callStack.push(element);\n  }\n\n  public CanPop(type: PushPopType | null = null) {\n    if (!this.canPop) return false;\n\n    if (type == null) return true;\n\n    return this.currentElement.type == type;\n  }\n\n  public Pop(type: PushPopType | null = null) {\n    if (this.CanPop(type)) {\n      this.callStack.pop();\n      return;\n    } else {\n      throw new Error(\"Mismatched push/pop in Callstack\");\n    }\n  }\n\n  public GetTemporaryVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ) {\n    // contextIndex 0 means global, so index is actually 1-based\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    let varValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (varValue.exists) {\n      return varValue.result;\n    } else {\n      return null;\n    }\n  }\n\n  public SetTemporaryVariable(\n    name: string,\n    value: any,\n    declareNew: boolean,\n    contextIndex: number = -1\n  ) {\n    if (contextIndex == -1) contextIndex = this.currentElementIndex + 1;\n\n    let contextElement = this.callStack[contextIndex - 1];\n\n    if (!declareNew && !contextElement.temporaryVariables.get(name)) {\n      throw new Error(\"Could not find temporary variable to set: \" + name);\n    }\n\n    let oldValue = tryGetValueFromMap(\n      contextElement.temporaryVariables,\n      name,\n      null\n    );\n    if (oldValue.exists)\n      ListValue.RetainListOriginsForAssignment(oldValue.result, value);\n\n    contextElement.temporaryVariables.set(name, value);\n  }\n\n  public ContextForVariableNamed(name: string) {\n    if (this.currentElement.temporaryVariables.get(name)) {\n      return this.currentElementIndex + 1;\n    } else {\n      return 0;\n    }\n  }\n\n  public ThreadWithIndex(index: number) {\n    let filtered = this._threads.filter((t) => {\n      if (t.threadIndex == index) return t;\n    });\n\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n\n  get callStack() {\n    return this.currentThread.callstack;\n  }\n\n  get callStackTrace() {\n    let sb = new StringBuilder();\n\n    for (let t = 0; t < this._threads.length; t++) {\n      let thread = this._threads[t];\n      let isCurrent = t == this._threads.length - 1;\n      sb.AppendFormat(\n        \"=== THREAD {0}/{1} {2}===\\n\",\n        t + 1,\n        this._threads.length,\n        isCurrent ? \"(current) \" : \"\"\n      );\n\n      for (let i = 0; i < thread.callstack.length; i++) {\n        if (thread.callstack[i].type == PushPopType.Function)\n          sb.Append(\"  [FUNCTION] \");\n        else sb.Append(\"  [TUNNEL] \");\n\n        let pointer = thread.callstack[i].currentPointer;\n        if (!pointer.isNull) {\n          sb.Append(\"<SOMEWHERE IN \");\n          if (pointer.container === null) {\n            return throwNullException(\"pointer.container\");\n          }\n          sb.Append(pointer.container.path.toString());\n          sb.AppendLine(\">\");\n        }\n      }\n    }\n\n    return sb.toString();\n  }\n\n  public _threads!: CallStack.Thread[]; // Banged because it's initialized in Reset().\n  public _threadCounter: number = 0;\n  public _startOfRoot: Pointer = Pointer.Null;\n}\n\nexport namespace CallStack {\n  export class Element {\n    public currentPointer: Pointer;\n    public inExpressionEvaluation: boolean;\n    public temporaryVariables: Map<string, InkObject>;\n    public type: PushPopType;\n\n    public evaluationStackHeightWhenPushed: number = 0;\n    public functionStartInOutputStream: number = 0;\n\n    constructor(\n      type: PushPopType,\n      pointer: Pointer,\n      inExpressionEvaluation: boolean = false\n    ) {\n      this.currentPointer = pointer.copy();\n      this.inExpressionEvaluation = inExpressionEvaluation;\n      this.temporaryVariables = new Map();\n      this.type = type;\n    }\n\n    public Copy() {\n      let copy = new Element(\n        this.type,\n        this.currentPointer,\n        this.inExpressionEvaluation\n      );\n      copy.temporaryVariables = new Map(this.temporaryVariables);\n      copy.evaluationStackHeightWhenPushed =\n        this.evaluationStackHeightWhenPushed;\n      copy.functionStartInOutputStream = this.functionStartInOutputStream;\n      return copy;\n    }\n  }\n\n  export class Thread {\n    public callstack: Element[];\n    public threadIndex: number = 0;\n    public previousPointer: Pointer = Pointer.Null;\n\n    constructor();\n    constructor(jThreadObj: any, storyContext: Story);\n    constructor() {\n      this.callstack = [];\n\n      if (arguments[0] && arguments[1]) {\n        let jThreadObj = arguments[0];\n        let storyContext = arguments[1];\n\n        // TODO: (int) jThreadObj['threadIndex'] can raise;\n        this.threadIndex = parseInt(jThreadObj[\"threadIndex\"]);\n\n        let jThreadCallstack = jThreadObj[\"callstack\"];\n\n        for (let jElTok of jThreadCallstack) {\n          let jElementObj = jElTok;\n\n          // TODO: (int) jElementObj['type'] can raise;\n          let pushPopType: PushPopType = parseInt(jElementObj[\"type\"]);\n\n          let pointer = Pointer.Null;\n\n          let currentContainerPathStr: string;\n          // TODO: jElementObj.TryGetValue (\"cPath\", out currentContainerPathStrToken);\n          let currentContainerPathStrToken = jElementObj[\"cPath\"];\n          if (typeof currentContainerPathStrToken !== \"undefined\") {\n            currentContainerPathStr = currentContainerPathStrToken.toString();\n\n            let threadPointerResult = storyContext.ContentAtPath(\n              new Path(currentContainerPathStr)\n            );\n            pointer.container = threadPointerResult.container;\n            pointer.index = parseInt(jElementObj[\"idx\"]);\n\n            if (threadPointerResult.obj == null)\n              throw new Error(\n                \"When loading state, internal story location couldn't be found: \" +\n                  currentContainerPathStr +\n                  \". Has the story changed since this save data was created?\"\n              );\n            else if (threadPointerResult.approximate) {\n              if (pointer.container !== null) {\n                storyContext.Warning(\n                  \"When loading state, exact internal story location couldn't be found: '\" +\n                    currentContainerPathStr +\n                    \"', so it was approximated to '\" +\n                    pointer.container.path.toString() +\n                    \"' to recover. Has the story changed since this save data was created?\"\n                );\n              } else {\n                storyContext.Warning(\n                  \"When loading state, exact internal story location couldn't be found: '\" +\n                    currentContainerPathStr +\n                    \"' and it may not be recoverable. Has the story changed since this save data was created?\"\n                );\n              }\n            }\n          }\n\n          let inExpressionEvaluation = !!jElementObj[\"exp\"];\n\n          let el = new Element(pushPopType, pointer, inExpressionEvaluation);\n\n          let temps = jElementObj[\"temp\"];\n          if (typeof temps !== \"undefined\") {\n            el.temporaryVariables =\n              JsonSerialisation.JObjectToDictionaryRuntimeObjs(temps);\n          } else {\n            el.temporaryVariables.clear();\n          }\n\n          this.callstack.push(el);\n        }\n\n        let prevContentObjPath = jThreadObj[\"previousContentObject\"];\n        if (typeof prevContentObjPath !== \"undefined\") {\n          let prevPath = new Path(prevContentObjPath.toString());\n          this.previousPointer = storyContext.PointerAtPath(prevPath);\n        }\n      }\n    }\n\n    public Copy() {\n      let copy = new Thread();\n      copy.threadIndex = this.threadIndex;\n      for (let e of this.callstack) {\n        copy.callstack.push(e.Copy());\n      }\n      copy.previousPointer = this.previousPointer.copy();\n      return copy;\n    }\n\n    public WriteJson(writer: SimpleJson.Writer) {\n      writer.WriteObjectStart();\n\n      writer.WritePropertyStart(\"callstack\");\n      writer.WriteArrayStart();\n      for (let el of this.callstack) {\n        writer.WriteObjectStart();\n        if (!el.currentPointer.isNull) {\n          if (el.currentPointer.container === null) {\n            return throwNullException(\"el.currentPointer.container\");\n          }\n          writer.WriteProperty(\n            \"cPath\",\n            el.currentPointer.container.path.componentsString\n          );\n          writer.WriteIntProperty(\"idx\", el.currentPointer.index);\n        }\n\n        writer.WriteProperty(\"exp\", el.inExpressionEvaluation);\n        writer.WriteIntProperty(\"type\", el.type);\n\n        if (el.temporaryVariables.size > 0) {\n          writer.WritePropertyStart(\"temp\");\n          JsonSerialisation.WriteDictionaryRuntimeObjs(\n            writer,\n            el.temporaryVariables\n          );\n          writer.WritePropertyEnd();\n        }\n\n        writer.WriteObjectEnd();\n      }\n      writer.WriteArrayEnd();\n      writer.WritePropertyEnd();\n\n      writer.WriteIntProperty(\"threadIndex\", this.threadIndex);\n\n      if (!this.previousPointer.isNull) {\n        let resolvedPointer = this.previousPointer.Resolve();\n        if (resolvedPointer === null) {\n          return throwNullException(\"this.previousPointer.Resolve()\");\n        }\n        writer.WriteProperty(\n          \"previousContentObject\",\n          resolvedPointer.path.toString()\n        );\n      }\n\n      writer.WriteObjectEnd();\n    }\n  }\n}\n","import {\n  AbstractValue,\n  Value,\n  VariablePointerValue,\n  ListValue,\n  IntValue,\n  FloatValue,\n  BoolValue,\n} from \"./Value\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { InkObject } from \"./Object\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { StoryException } from \"./StoryException\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { asOrThrows, asOrNull, isEquatable } from \"./TypeAssertion\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { throwNullException } from \"./NullException\";\nimport { CallStack } from \"./CallStack\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { InkList } from \"./Story\";\nimport { Path } from \"./Path\";\n\n// Fake class wrapper around VariableState to have correct typing\n// when using the Proxy syntax in typescript\nfunction VariablesStateAccessor<T>(): new () => Pick<T, keyof T> {\n  return class {} as any;\n}\n\ntype VariableStateValue = boolean | string | number | InkList | Path | null;\n\nexport class VariablesState extends VariablesStateAccessor<\n  Record<string, any>\n>() {\n  // The way variableChangedEvent is a bit different than the reference implementation.\n  // Originally it uses the C# += operator to add delegates, but in js we need to maintain\n  // an actual collection of delegates (ie. callbacks) to register a new one, there is a\n  // special ObserveVariableChange method below.\n  public variableChangedEventCallbacks: Array<\n    (variableName: string, newValue: InkObject) => void\n  > = [];\n  public variableChangedEvent(variableName: string, newValue: InkObject): void {\n    for (let callback of this.variableChangedEventCallbacks) {\n      callback(variableName, newValue);\n    }\n  }\n\n  public patch: StatePatch | null = null;\n\n  public StartVariableObservation() {\n    this._batchObservingVariableChanges = true;\n    this._changedVariablesForBatchObs = new Set();\n  }\n\n  public CompleteVariableObservation(): Map<string, any> {\n    this._batchObservingVariableChanges = false;\n    let changedVars = new Map<string, any>();\n    if (this._changedVariablesForBatchObs != null) {\n      for (let variableName of this._changedVariablesForBatchObs) {\n        let currentValue = this._globalVariables.get(variableName) as InkObject;\n        this.variableChangedEvent(variableName, currentValue);\n      }\n    }\n    // Patch may still be active - e.g. if we were in the middle of a background save\n    if (this.patch != null) {\n      for (let variableName of this.patch.changedVariables) {\n        let patchedVal = this.patch.TryGetGlobal(variableName, null);\n        if (patchedVal.exists) changedVars.set(variableName, patchedVal);\n      }\n    }\n    this._changedVariablesForBatchObs = null;\n    return changedVars;\n  }\n\n  public NotifyObservers(changedVars: Map<string, any>) {\n    for (const [key, value] of changedVars) {\n      this.variableChangedEvent(key, value);\n    }\n  }\n\n  get callStack() {\n    return this._callStack;\n  }\n  set callStack(callStack) {\n    this._callStack = callStack;\n  }\n\n  // the original code uses a magic getter and setter for global variables,\n  // allowing things like variableState['varname]. This is not quite possible\n  // in js without a Proxy, so it is replaced with this $ function.\n  public $(variableName: string): VariableStateValue;\n  public $(variableName: string, value: VariableStateValue): void;\n  public $(variableName: string, value?: any) {\n    if (typeof value === \"undefined\") {\n      let varContents = null;\n\n      if (this.patch !== null) {\n        varContents = this.patch.TryGetGlobal(variableName, null);\n        if (varContents.exists)\n          return (varContents.result as AbstractValue).valueObject;\n      }\n\n      varContents = this._globalVariables.get(variableName);\n\n      if (typeof varContents === \"undefined\") {\n        varContents = this._defaultGlobalVariables.get(variableName);\n      }\n\n      if (typeof varContents !== \"undefined\")\n        return (varContents as AbstractValue).valueObject;\n      else return null;\n    } else {\n      if (typeof this._defaultGlobalVariables.get(variableName) === \"undefined\")\n        throw new StoryException(\n          \"Cannot assign to a variable (\" +\n            variableName +\n            \") that hasn't been declared in the story\"\n        );\n\n      let val = Value.Create(value);\n      if (val == null) {\n        if (value == null) {\n          throw new Error(\"Cannot pass null to VariableState\");\n        } else {\n          throw new Error(\n            \"Invalid value passed to VariableState: \" + value.toString()\n          );\n        }\n      }\n\n      this.SetGlobal(variableName, val);\n    }\n  }\n\n  constructor(\n    callStack: CallStack,\n    listDefsOrigin: ListDefinitionsOrigin | null\n  ) {\n    super();\n    this._globalVariables = new Map();\n    this._callStack = callStack;\n    this._listDefsOrigin = listDefsOrigin;\n\n    // if es6 proxies are available, use them.\n    try {\n      // the proxy is used to allow direct manipulation of global variables.\n      // It first tries to access the objects own property, and if none is\n      // found it delegates the call to the $ method, defined below\n      let p = new Proxy(this, {\n        get(target: any, name) {\n          return name in target ? target[name] : target.$(name);\n        },\n        set(target: any, name, value) {\n          if (name in target) target[name] = value;\n          else target.$(name, value);\n          return true; // returning a falsy value make the trap fail\n        },\n      });\n\n      return p;\n    } catch (e) {\n      // the proxy object is not available in this context. we should warn the\n      // dev but writing to the console feels a bit intrusive.\n      // console.log(\"ES6 Proxy not available - direct manipulation of global variables can't work, use $() instead.\");\n    }\n  }\n\n  public ApplyPatch() {\n    if (this.patch === null) {\n      return throwNullException(\"this.patch\");\n    }\n\n    for (let [namedVarKey, namedVarValue] of this.patch.globals) {\n      this._globalVariables.set(namedVarKey, namedVarValue);\n    }\n\n    if (this._changedVariablesForBatchObs !== null) {\n      for (let name of this.patch.changedVariables) {\n        this._changedVariablesForBatchObs.add(name);\n      }\n    }\n\n    this.patch = null;\n  }\n\n  public SetJsonToken(jToken: Record<string, any>) {\n    this._globalVariables.clear();\n\n    for (let [varValKey, varValValue] of this._defaultGlobalVariables) {\n      let loadedToken = jToken[varValKey];\n      if (typeof loadedToken !== \"undefined\") {\n        let tokenInkObject =\n          JsonSerialisation.JTokenToRuntimeObject(loadedToken);\n        if (tokenInkObject === null) {\n          return throwNullException(\"tokenInkObject\");\n        }\n        this._globalVariables.set(varValKey, tokenInkObject);\n      } else {\n        this._globalVariables.set(varValKey, varValValue);\n      }\n    }\n  }\n\n  public static dontSaveDefaultValues: boolean = true;\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n    for (let [keyValKey, keyValValue] of this._globalVariables) {\n      let name = keyValKey;\n      let val = keyValValue;\n\n      if (VariablesState.dontSaveDefaultValues) {\n        if (this._defaultGlobalVariables.has(name)) {\n          let defaultVal = this._defaultGlobalVariables.get(name)!;\n          if (this.RuntimeObjectsEqual(val, defaultVal)) continue;\n        }\n      }\n\n      writer.WritePropertyStart(name);\n      JsonSerialisation.WriteRuntimeObject(writer, val);\n      writer.WritePropertyEnd();\n    }\n    writer.WriteObjectEnd();\n  }\n\n  public RuntimeObjectsEqual(\n    obj1: InkObject | null,\n    obj2: InkObject | null\n  ): boolean {\n    if (obj1 === null) {\n      return throwNullException(\"obj1\");\n    }\n    if (obj2 === null) {\n      return throwNullException(\"obj2\");\n    }\n\n    if (obj1.constructor !== obj2.constructor) return false;\n\n    let boolVal = asOrNull(obj1, BoolValue);\n    if (boolVal !== null) {\n      return boolVal.value === asOrThrows(obj2, BoolValue).value;\n    }\n\n    let intVal = asOrNull(obj1, IntValue);\n    if (intVal !== null) {\n      return intVal.value === asOrThrows(obj2, IntValue).value;\n    }\n\n    let floatVal = asOrNull(obj1, FloatValue);\n    if (floatVal !== null) {\n      return floatVal.value === asOrThrows(obj2, FloatValue).value;\n    }\n\n    let val1 = asOrNull(obj1, Value);\n    let val2 = asOrNull(obj2, Value);\n    if (val1 !== null && val2 !== null) {\n      if (isEquatable(val1.valueObject) && isEquatable(val2.valueObject)) {\n        return val1.valueObject.Equals(val2.valueObject);\n      } else {\n        return val1.valueObject === val2.valueObject;\n      }\n    }\n\n    throw new Error(\n      \"FastRoughDefinitelyEquals: Unsupported runtime object type: \" +\n        obj1.constructor.name\n    );\n  }\n\n  public GetVariableWithName(\n    name: string | null,\n    contextIndex: number = -1\n  ): InkObject | null {\n    let varValue = this.GetRawVariableWithName(name, contextIndex);\n\n    // var varPointer = varValue as VariablePointerValue;\n    let varPointer = asOrNull(varValue, VariablePointerValue);\n    if (varPointer !== null) {\n      varValue = this.ValueAtVariablePointer(varPointer);\n    }\n\n    return varValue;\n  }\n\n  public TryGetDefaultVariableValue(name: string | null): InkObject | null {\n    let val = tryGetValueFromMap(this._defaultGlobalVariables, name, null);\n    return val.exists ? val.result : null;\n  }\n\n  public GlobalVariableExistsWithName(name: string) {\n    return (\n      this._globalVariables.has(name) ||\n      (this._defaultGlobalVariables !== null &&\n        this._defaultGlobalVariables.has(name))\n    );\n  }\n\n  public GetRawVariableWithName(name: string | null, contextIndex: number) {\n    let varValue: InkObject | null = null;\n\n    if (contextIndex == 0 || contextIndex == -1) {\n      let variableValue = null;\n      if (this.patch !== null) {\n        variableValue = this.patch.TryGetGlobal(name, null);\n        if (variableValue.exists) return variableValue.result!;\n      }\n\n      // this is a conditional assignment\n      variableValue = tryGetValueFromMap(this._globalVariables, name, null);\n      if (variableValue.exists) return variableValue.result;\n\n      if (this._defaultGlobalVariables !== null) {\n        variableValue = tryGetValueFromMap(\n          this._defaultGlobalVariables,\n          name,\n          null\n        );\n        if (variableValue.exists) return variableValue.result;\n      }\n\n      if (this._listDefsOrigin === null)\n        return throwNullException(\"VariablesState._listDefsOrigin\");\n      let listItemValue = this._listDefsOrigin.FindSingleItemListWithName(name);\n      if (listItemValue) return listItemValue;\n    }\n\n    varValue = this._callStack.GetTemporaryVariableWithName(name, contextIndex);\n\n    return varValue;\n  }\n\n  public ValueAtVariablePointer(pointer: VariablePointerValue) {\n    return this.GetVariableWithName(pointer.variableName, pointer.contextIndex);\n  }\n\n  public Assign(varAss: VariableAssignment, value: InkObject) {\n    let name = varAss.variableName;\n    if (name === null) {\n      return throwNullException(\"name\");\n    }\n    let contextIndex = -1;\n\n    let setGlobal = false;\n    if (varAss.isNewDeclaration) {\n      setGlobal = varAss.isGlobal;\n    } else {\n      setGlobal = this.GlobalVariableExistsWithName(name);\n    }\n\n    if (varAss.isNewDeclaration) {\n      // var varPointer = value as VariablePointerValue;\n      let varPointer = asOrNull(value, VariablePointerValue);\n      if (varPointer !== null) {\n        let fullyResolvedVariablePointer =\n          this.ResolveVariablePointer(varPointer);\n        value = fullyResolvedVariablePointer;\n      }\n    } else {\n      let existingPointer = null;\n      do {\n        // existingPointer = GetRawVariableWithName (name, contextIndex) as VariablePointerValue;\n        existingPointer = asOrNull(\n          this.GetRawVariableWithName(name, contextIndex),\n          VariablePointerValue\n        );\n        if (existingPointer != null) {\n          name = existingPointer.variableName;\n          contextIndex = existingPointer.contextIndex;\n          setGlobal = contextIndex == 0;\n        }\n      } while (existingPointer != null);\n    }\n\n    if (setGlobal) {\n      this.SetGlobal(name, value);\n    } else {\n      this._callStack.SetTemporaryVariable(\n        name,\n        value,\n        varAss.isNewDeclaration,\n        contextIndex\n      );\n    }\n  }\n\n  public SnapshotDefaultGlobals() {\n    this._defaultGlobalVariables = new Map(this._globalVariables);\n  }\n\n  public RetainListOriginsForAssignment(\n    oldValue: InkObject,\n    newValue: InkObject\n  ) {\n    let oldList = asOrThrows(oldValue, ListValue);\n    let newList = asOrThrows(newValue, ListValue);\n\n    if (oldList.value && newList.value && newList.value.Count == 0) {\n      newList.value.SetInitialOriginNames(oldList.value.originNames);\n    }\n  }\n\n  public SetGlobal(variableName: string | null, value: InkObject) {\n    let oldValue = null;\n\n    if (this.patch === null) {\n      oldValue = tryGetValueFromMap(this._globalVariables, variableName, null);\n    }\n\n    if (this.patch !== null) {\n      oldValue = this.patch.TryGetGlobal(variableName, null);\n      if (!oldValue.exists) {\n        oldValue = tryGetValueFromMap(\n          this._globalVariables,\n          variableName,\n          null\n        );\n      }\n    }\n\n    ListValue.RetainListOriginsForAssignment(oldValue!.result!, value);\n\n    if (variableName === null) {\n      return throwNullException(\"variableName\");\n    }\n\n    if (this.patch !== null) {\n      this.patch.SetGlobal(variableName, value);\n    } else {\n      this._globalVariables.set(variableName, value);\n    }\n\n    // TODO: Not sure !== is equivalent to !value.Equals(oldValue)\n    if (\n      this.variableChangedEvent !== null &&\n      oldValue !== null &&\n      value !== oldValue.result\n    ) {\n      if (this._batchObservingVariableChanges) {\n        if (this._changedVariablesForBatchObs === null) {\n          return throwNullException(\"this._changedVariablesForBatchObs\");\n        }\n\n        if (this.patch !== null) {\n          this.patch.AddChangedVariable(variableName);\n        } else if (this._changedVariablesForBatchObs !== null) {\n          this._changedVariablesForBatchObs.add(variableName);\n        }\n      } else {\n        this.variableChangedEvent(variableName, value);\n      }\n    }\n  }\n\n  public ResolveVariablePointer(varPointer: VariablePointerValue) {\n    let contextIndex = varPointer.contextIndex;\n\n    if (contextIndex == -1)\n      contextIndex = this.GetContextIndexOfVariableNamed(\n        varPointer.variableName\n      );\n\n    let valueOfVariablePointedTo = this.GetRawVariableWithName(\n      varPointer.variableName,\n      contextIndex\n    );\n\n    // var doubleRedirectionPointer = valueOfVariablePointedTo as VariablePointerValue;\n    let doubleRedirectionPointer = asOrNull(\n      valueOfVariablePointedTo,\n      VariablePointerValue\n    );\n    if (doubleRedirectionPointer != null) {\n      return doubleRedirectionPointer;\n    } else {\n      return new VariablePointerValue(varPointer.variableName, contextIndex);\n    }\n  }\n\n  public GetContextIndexOfVariableNamed(varName: string) {\n    if (this.GlobalVariableExistsWithName(varName)) return 0;\n\n    return this._callStack.currentElementIndex;\n  }\n\n  /**\n   * This function is specific to the js version of ink. It allows to register a\n   * callback that will be called when a variable changes. The original code uses\n   * `state.variableChangedEvent += callback` instead.\n   *\n   * @param {function} callback\n   */\n  public ObserveVariableChange(\n    callback: (variableName: string, newValue: InkObject) => void\n  ) {\n    this.variableChangedEventCallbacks.push(callback);\n  }\n\n  private _globalVariables: Map<string, InkObject>;\n  private _defaultGlobalVariables: Map<string, InkObject> = new Map();\n\n  private _callStack: CallStack;\n  private _changedVariablesForBatchObs: Set<string> | null = new Set();\n  private _listDefsOrigin: ListDefinitionsOrigin | null;\n\n  private _batchObservingVariableChanges: boolean = false;\n}\n","// Taken from https://gist.github.com/blixt/f17b47c62508be59987b\n// Ink uses a seedable PRNG of which there is none in native javascript.\nexport class PRNG {\n  private seed: number;\n\n  constructor(seed: number) {\n    this.seed = seed % 2147483647;\n    if (this.seed <= 0) this.seed += 2147483646;\n  }\n  public next(): number {\n    return (this.seed = (this.seed * 48271) % 2147483647);\n  }\n  public nextFloat(): number {\n    return (this.next() - 1) / 2147483646;\n  }\n}\n","import { InkObject } from \"./Object\";\nimport { Container } from \"./Container\";\n\nexport class StatePatch {\n  get globals() {\n    return this._globals;\n  }\n  get changedVariables() {\n    return this._changedVariables;\n  }\n  get visitCounts() {\n    return this._visitCounts;\n  }\n  get turnIndices() {\n    return this._turnIndices;\n  }\n\n  constructor();\n  constructor(toCopy: StatePatch | null);\n  constructor() {\n    if (arguments.length === 1 && arguments[0] !== null) {\n      let toCopy = arguments[0] as StatePatch;\n      this._globals = new Map(toCopy._globals);\n      this._changedVariables = new Set(toCopy._changedVariables);\n      this._visitCounts = new Map(toCopy._visitCounts);\n      this._turnIndices = new Map(toCopy._turnIndices);\n    } else {\n      this._globals = new Map();\n      this._changedVariables = new Set();\n      this._visitCounts = new Map();\n      this._turnIndices = new Map();\n    }\n  }\n\n  public TryGetGlobal(name: string | null, /* out */ value: InkObject | null) {\n    if (name !== null && this._globals.has(name)) {\n      return { result: this._globals.get(name), exists: true };\n    }\n\n    return { result: value, exists: false };\n  }\n\n  public SetGlobal(name: string, value: InkObject) {\n    this._globals.set(name, value);\n  }\n\n  public AddChangedVariable(name: string) {\n    return this._changedVariables.add(name);\n  }\n\n  public TryGetVisitCount(container: Container, /* out */ count: number) {\n    if (this._visitCounts.has(container)) {\n      return { result: this._visitCounts.get(container), exists: true };\n    }\n\n    return { result: count, exists: false };\n  }\n\n  public SetVisitCount(container: Container, count: number) {\n    this._visitCounts.set(container, count);\n  }\n\n  public SetTurnIndex(container: Container, index: number) {\n    this._turnIndices.set(container, index);\n  }\n\n  public TryGetTurnIndex(container: Container, /* out */ index: number) {\n    if (this._turnIndices.has(container)) {\n      return { result: this._turnIndices.get(container), exists: true };\n    }\n\n    return { result: index, exists: false };\n  }\n\n  private _globals: Map<string, InkObject>;\n  private _changedVariables: Set<string> = new Set();\n  private _visitCounts: Map<Container, number> = new Map();\n  private _turnIndices: Map<Container, number> = new Map();\n}\n","export class SimpleJson {\n  public static TextToDictionary(text: string) {\n    return new SimpleJson.Reader(text).ToDictionary();\n  }\n\n  public static TextToArray(text: string) {\n    return new SimpleJson.Reader(text).ToArray();\n  }\n}\n\nexport namespace SimpleJson {\n  export class Reader {\n    constructor(text: string) {\n      this._rootObject = JSON.parse(text);\n    }\n\n    public ToDictionary() {\n      return this._rootObject as Record<string, any>;\n    }\n\n    public ToArray() {\n      return this._rootObject as any[];\n    }\n\n    private _rootObject: any[] | Record<string, any>;\n  }\n\n  // In C#, this class writes json tokens directly to a StringWriter or\n  // another stream. Here, a temporary hierarchy is created in the form\n  // of a javascript object, which is serialised in the `toString` method.\n  // See individual methods and properties for more information.\n  export class Writer {\n    public WriteObject(inner: (w: Writer) => void) {\n      this.WriteObjectStart();\n      inner(this);\n      this.WriteObjectEnd();\n    }\n\n    // Add a new object.\n    public WriteObjectStart() {\n      this.StartNewObject(true);\n\n      let newObject: Record<string, any> = {};\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This object is created as the value of a property,\n        // inside an other object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This object is created as the child of an array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This object is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Object)\n      );\n    }\n\n    public WriteObjectEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Write a property name / value pair to the current object.\n    public WriteProperty(\n      name: any,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      innerOrContent: ((w: Writer) => void) | string | boolean | null\n    ) {\n      this.WritePropertyStart(name);\n      if (arguments[1] instanceof Function) {\n        let inner = arguments[1];\n        inner(this);\n      } else {\n        let content: string | boolean | null = arguments[1];\n        this.Write(content);\n      }\n      this.WritePropertyEnd();\n    }\n\n    // Int and Float are separate calls, since there both are\n    // numbers in JavaScript, but need to be handled differently.\n\n    public WriteIntProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteInt(content);\n      this.WritePropertyEnd();\n    }\n\n    public WriteFloatProperty(name: any, content: number) {\n      this.WritePropertyStart(name);\n      this.WriteFloat(content);\n      this.WritePropertyEnd();\n    }\n\n    // Prepare a new property name, which will be use to add the\n    // new object when calling _addToCurrentObject() from a Write\n    // method.\n    public WritePropertyStart(name: any) {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this._propertyNameStack.push(name);\n\n      this.IncrementChildCount();\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n    }\n\n    public WritePropertyEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Property);\n      this.Assert(this.childCount === 1);\n      this._stateStack.pop();\n    }\n\n    // Prepare a new property name, except this time, the property name\n    // will be created by concatenating all the strings passed to\n    // WritePropertyNameInner.\n    public WritePropertyNameStart() {\n      this.Assert(this.state === SimpleJson.Writer.State.Object);\n      this.IncrementChildCount();\n\n      this._currentPropertyName = \"\";\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Property)\n      );\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.PropertyName)\n      );\n    }\n\n    public WritePropertyNameEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._propertyNameStack.push(this._currentPropertyName!);\n      this._currentPropertyName = null;\n      this._stateStack.pop();\n    }\n\n    public WritePropertyNameInner(str: string) {\n      this.Assert(this.state === SimpleJson.Writer.State.PropertyName);\n      this.Assert(this._currentPropertyName !== null);\n      this._currentPropertyName += str;\n    }\n\n    // Add a new array.\n    public WriteArrayStart() {\n      this.StartNewObject(true);\n\n      let newObject: any[] = [];\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        // This array is created as the value of a property,\n        // inside an object.\n        this.Assert(this.currentCollection !== null);\n        this.Assert(this.currentPropertyName !== null);\n\n        let propertyName = this._propertyNameStack.pop();\n        this.currentCollection![propertyName!] = newObject;\n        this._collectionStack.push(newObject);\n      } else if (this.state === SimpleJson.Writer.State.Array) {\n        // This array is created as the child of another array.\n        this.Assert(this.currentCollection !== null);\n\n        this.currentCollection!.push(newObject);\n        this._collectionStack.push(newObject);\n      } else {\n        // This array is the root object.\n        this.Assert(this.state === SimpleJson.Writer.State.None);\n        this._jsonObject = newObject;\n        this._collectionStack.push(newObject);\n      }\n\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.Array)\n      );\n    }\n\n    public WriteArrayEnd() {\n      this.Assert(this.state === SimpleJson.Writer.State.Array);\n      this._collectionStack.pop();\n      this._stateStack.pop();\n    }\n\n    // Add the value to the appropriate collection (array / object), given the current\n    // context.\n    public Write(\n      value: number | string | boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      escape: boolean = true\n    ) {\n      if (value === null) {\n        console.error(\"Warning: trying to write a null value\");\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteBool(value: boolean | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      this._addToCurrentObject(value);\n    }\n\n    public WriteInt(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n\n      // Math.floor is used as a precaution:\n      //     1. to ensure that the value is written as an integer\n      //        (without a fractional part -> 1 instead of 1.0), even\n      //        though it should be the default behaviour of\n      //        JSON.serialize;\n      //     2. to ensure that if a floating number is passed\n      //        accidentally, it's converted to an integer.\n      //\n      // This guarantees savegame compatibility with the reference\n      // implementation.\n      this._addToCurrentObject(Math.floor(value));\n    }\n\n    // Since JSON doesn't support NaN and Infinity, these values\n    // are converted here.\n    public WriteFloat(value: number | null) {\n      if (value === null) {\n        return;\n      }\n\n      this.StartNewObject(false);\n      if (value == Number.POSITIVE_INFINITY) {\n        this._addToCurrentObject(3.4e38);\n      } else if (value == Number.NEGATIVE_INFINITY) {\n        this._addToCurrentObject(-3.4e38);\n      } else if (isNaN(value)) {\n        this._addToCurrentObject(0.0);\n      } else {\n        this._addToCurrentObject(value);\n      }\n    }\n\n    public WriteNull() {\n      this.StartNewObject(false);\n      this._addToCurrentObject(null);\n    }\n\n    // Prepare a string before adding it to the current collection in\n    // WriteStringEnd(). The string will be a concatenation of all the\n    // strings passed to WriteStringInner.\n    public WriteStringStart() {\n      this.StartNewObject(false);\n      this._currentString = \"\";\n      this._stateStack.push(\n        new SimpleJson.Writer.StateElement(SimpleJson.Writer.State.String)\n      );\n    }\n\n    public WriteStringEnd() {\n      this.Assert(this.state == SimpleJson.Writer.State.String);\n      this._stateStack.pop();\n      this._addToCurrentObject(this._currentString);\n      this._currentString = null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public WriteStringInner(str: string | null, escape: boolean = true) {\n      this.Assert(this.state === SimpleJson.Writer.State.String);\n\n      if (str === null) {\n        console.error(\"Warning: trying to write a null string\");\n        return;\n      }\n\n      this._currentString += str;\n    }\n\n    // Serialise the root object into a JSON string.\n    public toString() {\n      if (this._jsonObject === null) {\n        return \"\";\n      }\n\n      return JSON.stringify(this._jsonObject);\n    }\n\n    // Prepare the state stack when adding new objects / values.\n    private StartNewObject(container: boolean) {\n      if (container) {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.None ||\n            this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      } else {\n        this.Assert(\n          this.state === SimpleJson.Writer.State.Property ||\n            this.state === SimpleJson.Writer.State.Array\n        );\n      }\n\n      if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(this.childCount === 0);\n      }\n\n      if (\n        this.state === SimpleJson.Writer.State.Array ||\n        this.state === SimpleJson.Writer.State.Property\n      ) {\n        this.IncrementChildCount();\n      }\n    }\n\n    // These getters peek all the different stacks.\n\n    private get state() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].type;\n      } else {\n        return SimpleJson.Writer.State.None;\n      }\n    }\n\n    private get childCount() {\n      if (this._stateStack.length > 0) {\n        return this._stateStack[this._stateStack.length - 1].childCount;\n      } else {\n        return 0;\n      }\n    }\n\n    private get currentCollection(): Record<string, any> | null {\n      if (this._collectionStack.length > 0) {\n        return this._collectionStack[this._collectionStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private get currentPropertyName() {\n      if (this._propertyNameStack.length > 0) {\n        return this._propertyNameStack[this._propertyNameStack.length - 1];\n      } else {\n        return null;\n      }\n    }\n\n    private IncrementChildCount() {\n      this.Assert(this._stateStack.length > 0);\n      let currEl = this._stateStack.pop()!;\n      currEl.childCount++;\n      this._stateStack.push(currEl);\n    }\n\n    private Assert(condition: boolean) {\n      if (!condition) throw Error(\"Assert failed while writing JSON\");\n    }\n\n    // This method did not exist in the original C# code. It adds\n    // the given value to the current collection (used by Write methods).\n    private _addToCurrentObject(value: number | string | boolean | null) {\n      this.Assert(this.currentCollection !== null);\n      if (this.state === SimpleJson.Writer.State.Array) {\n        this.Assert(Array.isArray(this.currentCollection));\n        (this.currentCollection as any[]).push(value);\n      } else if (this.state === SimpleJson.Writer.State.Property) {\n        this.Assert(!Array.isArray(this.currentCollection));\n        this.Assert(this.currentPropertyName !== null);\n        (this.currentCollection as Record<string, any>)[\n          this.currentPropertyName!\n        ] = value;\n        this._propertyNameStack.pop();\n      }\n    }\n\n    // In addition to `_stateStack` present in the original code,\n    // this implementation of SimpleJson use two other stacks and two\n    // temporary variables holding the current context.\n\n    // Used to keep track of the current property name being built\n    // with `WritePropertyNameStart`, `WritePropertyNameInner` and\n    // `WritePropertyNameEnd`.\n    private _currentPropertyName: string | null = null;\n\n    // Used to keep track of the current string value being built\n    // with `WriteStringStart`, `WriteStringInner` and\n    // `WriteStringEnd`.\n    private _currentString: string | null = null;\n\n    private _stateStack: SimpleJson.Writer.StateElement[] = [];\n\n    // Keep track of the current collection being built (either an array\n    // or an object). For instance, at the '?' step during the hiarchy\n    // creation, this hierarchy:\n    // [3, {a: [b, ?]}] will have this corresponding stack:\n    // (bottom) [Array, Object, Array] (top)\n    private _collectionStack: Array<any[] | Record<string, any>> = [];\n\n    // Keep track of the current property being assigned. For instance, at\n    // the '?' step during the hiarchy creation, this hierarchy:\n    // [3, {a: [b, {c: ?}]}] will have this corresponding stack:\n    // (bottom) [a, c] (top)\n    private _propertyNameStack: string[] = [];\n\n    // Object containing the entire hiearchy.\n    private _jsonObject: Record<string, any> | any[] | null = null;\n  }\n\n  export namespace Writer {\n    export enum State {\n      None,\n      Object,\n      Array,\n      Property,\n      PropertyName,\n      String,\n    }\n\n    export class StateElement {\n      public type: SimpleJson.Writer.State = SimpleJson.Writer.State.None;\n      public childCount: number = 0;\n\n      constructor(type: SimpleJson.Writer.State) {\n        this.type = type;\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { Choice } from \"./Choice\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { InkObject } from \"./Object\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Story } from \"./Story\";\nimport { throwNullException } from \"./NullException\";\n\nexport class Flow {\n  public name: string;\n  public callStack: CallStack;\n  public outputStream: InkObject[];\n  public currentChoices: Choice[];\n\n  constructor(name: String, story: Story);\n  constructor(name: String, story: Story, jObject: Record<string, any>);\n  constructor() {\n    let name = arguments[0] as string;\n    let story = arguments[1] as Story;\n\n    this.name = name;\n    this.callStack = new CallStack(story);\n\n    if (arguments[2]) {\n      let jObject = arguments[2] as Record<string, any>;\n\n      this.callStack.SetJsonToken(jObject[\"callstack\"], story);\n      this.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"]\n      );\n      this.currentChoices = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"currentChoices\"]\n      ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      if (typeof jChoiceThreadsObj !== \"undefined\") {\n        this.LoadFlowChoiceThreads(jChoiceThreadsObj, story);\n      }\n    } else {\n      this.outputStream = [];\n      this.currentChoices = [];\n    }\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WriteProperty(\"callstack\", (w) => this.callStack.WriteJson(w));\n    writer.WriteProperty(\"outputStream\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.outputStream)\n    );\n\n    let hasChoiceThreads = false;\n    for (let c of this.currentChoices) {\n      if (c.threadAtGeneration === null)\n        return throwNullException(\"c.threadAtGeneration\");\n\n      c.originalThreadIndex = c.threadAtGeneration.threadIndex;\n\n      if (this.callStack.ThreadWithIndex(c.originalThreadIndex) === null) {\n        if (!hasChoiceThreads) {\n          hasChoiceThreads = true;\n          writer.WritePropertyStart(\"choiceThreads\");\n          writer.WriteObjectStart();\n        }\n\n        writer.WritePropertyStart(c.originalThreadIndex);\n        c.threadAtGeneration.WriteJson(writer);\n        writer.WritePropertyEnd();\n      }\n    }\n\n    if (hasChoiceThreads) {\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteProperty(\"currentChoices\", (w) => {\n      w.WriteArrayStart();\n      for (let c of this.currentChoices) {\n        JsonSerialisation.WriteChoice(w, c);\n      }\n      w.WriteArrayEnd();\n    });\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadFlowChoiceThreads(\n    jChoiceThreads: Record<string, any>,\n    story: Story\n  ) {\n    for (let choice of this.currentChoices) {\n      let foundActiveThread = this.callStack.ThreadWithIndex(\n        choice.originalThreadIndex\n      );\n      if (foundActiveThread !== null) {\n        choice.threadAtGeneration = foundActiveThread.Copy();\n      } else {\n        let jSavedChoiceThread =\n          jChoiceThreads[`${choice.originalThreadIndex}`];\n        choice.threadAtGeneration = new CallStack.Thread(\n          jSavedChoiceThread,\n          story\n        );\n      }\n    }\n  }\n}\n","import { CallStack } from \"./CallStack\";\nimport { VariablesState } from \"./VariablesState\";\nimport { ValueType, Value, StringValue, ListValue } from \"./Value\";\nimport { PushPopType } from \"./PushPop\";\nimport { Tag } from \"./Tag\";\nimport { Glue } from \"./Glue\";\nimport { Path } from \"./Path\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { PRNG } from \"./PRNG\";\nimport { Void } from \"./Void\";\nimport { Pointer } from \"./Pointer\";\nimport { tryGetValueFromMap } from \"./TryGetResult\";\nimport { Choice } from \"./Choice\";\nimport { asOrNull, asOrThrows, nullIfUndefined } from \"./TypeAssertion\";\nimport { Debug } from \"./Debug\";\nimport { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { throwNullException } from \"./NullException\";\nimport { Story } from \"./Story\";\nimport { StatePatch } from \"./StatePatch\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { Flow } from \"./Flow\";\nimport { InkList } from \"./InkList\";\n\nexport class StoryState {\n  // Backward compatible changes since v8:\n  // v10: dynamic tags\n  // v9:  multi-flows\n  public readonly kInkSaveStateVersion = 10;\n  public readonly kMinCompatibleLoadVersion = 8;\n\n  public onDidLoadState: (() => void) | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public ToJson(indented: boolean = false) {\n    let writer = new SimpleJson.Writer();\n    this.WriteJson(writer);\n    return writer.toString();\n  }\n  public toJson(indented: boolean = false) {\n    return this.ToJson(indented);\n  }\n\n  public LoadJson(json: string) {\n    let jObject = SimpleJson.TextToDictionary(json);\n    this.LoadJsonObj(jObject);\n    if (this.onDidLoadState !== null) this.onDidLoadState();\n  }\n\n  public VisitCountAtPathString(pathString: string) {\n    let visitCountOut;\n\n    if (this._patch !== null) {\n      let container = this.story.ContentAtPath(new Path(pathString)).container;\n      if (container === null)\n        throw new Error(\"Content at path not found: \" + pathString);\n\n      visitCountOut = this._patch.TryGetVisitCount(container, 0);\n      if (visitCountOut.exists) return visitCountOut.result;\n    }\n\n    visitCountOut = tryGetValueFromMap(this._visitCounts, pathString, null);\n    if (visitCountOut.exists) return visitCountOut.result;\n\n    return 0;\n  }\n\n  public VisitCountForContainer(container: Container | null): number {\n    if (container === null) {\n      return throwNullException(\"container\");\n    }\n    if (!container.visitsShouldBeCounted) {\n      this.story.Error(\n        \"Read count for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n      return 0;\n    }\n\n    if (this._patch !== null) {\n      let count = this._patch.TryGetVisitCount(container, 0);\n      if (count.exists) {\n        return count.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let count2 = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count2.exists) {\n      return count2.result!;\n    }\n\n    return 0;\n  }\n\n  public IncrementVisitCountForContainer(container: Container) {\n    if (this._patch !== null) {\n      let currCount = this.VisitCountForContainer(container);\n      currCount++;\n      this._patch.SetVisitCount(container, currCount);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    let count = tryGetValueFromMap(this._visitCounts, containerPathStr, null);\n    if (count.exists) {\n      this._visitCounts.set(containerPathStr, count.result! + 1);\n    } else {\n      this._visitCounts.set(containerPathStr, 1);\n    }\n  }\n\n  public RecordTurnIndexVisitToContainer(container: Container) {\n    if (this._patch !== null) {\n      this._patch.SetTurnIndex(container, this.currentTurnIndex);\n      return;\n    }\n\n    let containerPathStr = container.path.toString();\n    this._turnIndices.set(containerPathStr, this.currentTurnIndex);\n  }\n\n  public TurnsSinceForContainer(container: Container) {\n    if (!container.turnIndexShouldBeCounted) {\n      this.story.Error(\n        \"TURNS_SINCE() for target (\" +\n          container.name +\n          \" - on \" +\n          container.debugMetadata +\n          \") unknown. The story may need to be compiled with countAllVisits flag (-c).\"\n      );\n    }\n\n    if (this._patch !== null) {\n      let index = this._patch.TryGetTurnIndex(container, 0);\n      if (index.exists) {\n        return this.currentTurnIndex - index.result!;\n      }\n    }\n\n    let containerPathStr = container.path.toString();\n    let index2 = tryGetValueFromMap(this._turnIndices, containerPathStr, 0);\n    if (index2.exists) {\n      return this.currentTurnIndex - index2.result!;\n    } else {\n      return -1;\n    }\n  }\n\n  get callstackDepth() {\n    return this.callStack.depth;\n  }\n\n  get outputStream() {\n    return this._currentFlow.outputStream;\n  }\n\n  get currentChoices() {\n    // If we can continue generating text content rather than choices,\n    // then we reflect the choice list as being empty, since choices\n    // should always come at the end.\n    if (this.canContinue) return [];\n    return this._currentFlow.currentChoices;\n  }\n\n  get generatedChoices() {\n    return this._currentFlow.currentChoices;\n  }\n\n  get currentErrors() {\n    return this._currentErrors;\n  }\n  private _currentErrors: string[] | null = null;\n\n  get currentWarnings() {\n    return this._currentWarnings;\n  }\n  private _currentWarnings: string[] | null = null;\n\n  get variablesState() {\n    return this._variablesState;\n  }\n  set variablesState(value) {\n    this._variablesState = value;\n  }\n  private _variablesState: VariablesState;\n\n  get callStack() {\n    return this._currentFlow.callStack;\n  }\n\n  get evaluationStack() {\n    return this._evaluationStack;\n  }\n  private _evaluationStack: InkObject[];\n\n  public divertedPointer: Pointer = Pointer.Null;\n\n  get currentTurnIndex() {\n    return this._currentTurnIndex;\n  }\n  set currentTurnIndex(value) {\n    this._currentTurnIndex = value;\n  }\n  private _currentTurnIndex: number = 0;\n\n  public storySeed: number = 0;\n  public previousRandom: number = 0;\n  public didSafeExit: boolean = false;\n\n  public story: Story;\n\n  get currentPathString() {\n    let pointer = this.currentPointer;\n    if (pointer.isNull) {\n      return null;\n    } else {\n      if (pointer.path === null) {\n        return throwNullException(\"pointer.path\");\n      }\n      return pointer.path.toString();\n    }\n  }\n\n  get previousPathString() {\n    let pointer = this.previousPointer;\n    if (pointer.isNull) {\n      return null;\n    } else {\n      if (pointer.path === null) {\n        return throwNullException(\"previousPointer.path\");\n      }\n      return pointer.path.toString();\n    }\n  }\n\n  get currentPointer() {\n    return this.callStack.currentElement.currentPointer.copy();\n  }\n\n  set currentPointer(value) {\n    this.callStack.currentElement.currentPointer = value.copy();\n  }\n\n  get previousPointer() {\n    return this.callStack.currentThread.previousPointer.copy();\n  }\n\n  set previousPointer(value) {\n    this.callStack.currentThread.previousPointer = value.copy();\n  }\n\n  get canContinue() {\n    return !this.currentPointer.isNull && !this.hasError;\n  }\n\n  get hasError() {\n    return this.currentErrors != null && this.currentErrors.length > 0;\n  }\n\n  get hasWarning() {\n    return this.currentWarnings != null && this.currentWarnings.length > 0;\n  }\n\n  get currentText() {\n    if (this._outputStreamTextDirty) {\n      let sb = new StringBuilder();\n\n      let inTag: boolean = false;\n\n      for (let outputObj of this.outputStream) {\n        // var textContent = outputObj as StringValue;\n        let textContent = asOrNull(outputObj, StringValue);\n        if (!inTag && textContent !== null) {\n          sb.Append(textContent.value);\n        } else {\n          let controlCommand = asOrNull(outputObj, ControlCommand);\n          if (controlCommand !== null) {\n            if (\n              controlCommand.commandType == ControlCommand.CommandType.BeginTag\n            ) {\n              inTag = true;\n            } else if (\n              controlCommand.commandType == ControlCommand.CommandType.EndTag\n            ) {\n              inTag = false;\n            }\n          }\n        }\n      }\n\n      this._currentText = this.CleanOutputWhitespace(sb.toString());\n      this._outputStreamTextDirty = false;\n    }\n\n    return this._currentText;\n  }\n  private _currentText: string | null = null;\n\n  public CleanOutputWhitespace(str: string) {\n    let sb = new StringBuilder();\n\n    let currentWhitespaceStart = -1;\n    let startOfLine = 0;\n\n    for (let i = 0; i < str.length; i++) {\n      let c = str.charAt(i);\n\n      let isInlineWhitespace = c == \" \" || c == \"\\t\";\n\n      if (isInlineWhitespace && currentWhitespaceStart == -1)\n        currentWhitespaceStart = i;\n\n      if (!isInlineWhitespace) {\n        if (\n          c != \"\\n\" &&\n          currentWhitespaceStart > 0 &&\n          currentWhitespaceStart != startOfLine\n        ) {\n          sb.Append(\" \");\n        }\n        currentWhitespaceStart = -1;\n      }\n\n      if (c == \"\\n\") startOfLine = i + 1;\n\n      if (!isInlineWhitespace) sb.Append(c);\n    }\n\n    return sb.toString();\n  }\n\n  get currentTags() {\n    if (this._outputStreamTagsDirty) {\n      this._currentTags = [];\n      let inTag: boolean = false;\n      let sb = new StringBuilder();\n\n      for (let outputObj of this.outputStream) {\n        let controlCommand = asOrNull(outputObj, ControlCommand);\n        if (controlCommand != null) {\n          if (\n            controlCommand.commandType == ControlCommand.CommandType.BeginTag\n          ) {\n            if (inTag && sb.Length > 0) {\n              let txt = this.CleanOutputWhitespace(sb.toString());\n              this._currentTags.push(txt);\n              sb.Clear();\n            }\n            inTag = true;\n          } else if (\n            controlCommand.commandType == ControlCommand.CommandType.EndTag\n          ) {\n            if (sb.Length > 0) {\n              let txt = this.CleanOutputWhitespace(sb.toString());\n              this._currentTags.push(txt);\n              sb.Clear();\n            }\n            inTag = false;\n          }\n        } else if (inTag) {\n          let strVal = asOrNull(outputObj, StringValue);\n          if (strVal !== null) {\n            sb.Append(strVal.value);\n          }\n        } else {\n          let tag = asOrNull(outputObj, Tag);\n          if (tag != null && tag.text != null && tag.text.length > 0) {\n            this._currentTags.push(tag.text); // tag.text has whitespae already cleaned\n          }\n        }\n      }\n\n      if (sb.Length > 0) {\n        let txt = this.CleanOutputWhitespace(sb.toString());\n        this._currentTags.push(txt);\n        sb.Clear();\n      }\n\n      this._outputStreamTagsDirty = false;\n    }\n\n    return this._currentTags;\n  }\n  private _currentTags: string[] | null = null;\n\n  get currentFlowName() {\n    return this._currentFlow.name;\n  }\n\n  get currentFlowIsDefaultFlow() {\n    return this._currentFlow.name == this.kDefaultFlowName;\n  }\n\n  get aliveFlowNames() {\n    if (this._aliveFlowNamesDirty) {\n      this._aliveFlowNames = [];\n\n      if (this._namedFlows != null) {\n        for (let flowName of this._namedFlows.keys()) {\n          if (flowName != this.kDefaultFlowName) {\n            this._aliveFlowNames.push(flowName);\n          }\n        }\n      }\n\n      this._aliveFlowNamesDirty = false;\n    }\n\n    return this._aliveFlowNames;\n  }\n\n  get inExpressionEvaluation() {\n    return this.callStack.currentElement.inExpressionEvaluation;\n  }\n  set inExpressionEvaluation(value) {\n    this.callStack.currentElement.inExpressionEvaluation = value;\n  }\n\n  constructor(story: Story) {\n    this.story = story;\n\n    this._currentFlow = new Flow(this.kDefaultFlowName, story);\n    this.OutputStreamDirty();\n\n    this._aliveFlowNamesDirty = true;\n    this._evaluationStack = [];\n\n    this._variablesState = new VariablesState(\n      this.callStack,\n      story.listDefinitions\n    );\n\n    this._visitCounts = new Map();\n    this._turnIndices = new Map();\n    this.currentTurnIndex = -1;\n\n    let timeSeed = new Date().getTime();\n    this.storySeed = new PRNG(timeSeed).next() % 100;\n    this.previousRandom = 0;\n\n    this.GoToStart();\n  }\n\n  public GoToStart() {\n    this.callStack.currentElement.currentPointer = Pointer.StartOf(\n      this.story.mainContentContainer\n    );\n  }\n\n  public SwitchFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.SwitchFlow\");\n\n    if (this._namedFlows === null) {\n      this._namedFlows = new Map();\n      this._namedFlows.set(this.kDefaultFlowName, this._currentFlow);\n    }\n\n    if (flowName === this._currentFlow.name) {\n      return;\n    }\n\n    let flow: Flow;\n    let content = tryGetValueFromMap(this._namedFlows, flowName, null);\n    if (content.exists) {\n      flow = content.result!;\n    } else {\n      flow = new Flow(flowName, this.story);\n      this._namedFlows.set(flowName, flow);\n      this._aliveFlowNamesDirty = true;\n    }\n\n    this._currentFlow = flow;\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this.OutputStreamDirty();\n  }\n\n  public SwitchToDefaultFlow_Internal() {\n    if (this._namedFlows === null) return;\n    this.SwitchFlow_Internal(this.kDefaultFlowName);\n  }\n\n  public RemoveFlow_Internal(flowName: string | null) {\n    if (flowName === null)\n      throw new Error(\"Must pass a non-null string to Story.DestroyFlow\");\n    if (flowName === this.kDefaultFlowName)\n      throw new Error(\"Cannot destroy default flow\");\n\n    if (this._currentFlow.name === flowName) {\n      this.SwitchToDefaultFlow_Internal();\n    }\n\n    if (this._namedFlows === null)\n      return throwNullException(\"this._namedFlows\");\n    this._namedFlows.delete(flowName);\n    this._aliveFlowNamesDirty = true;\n  }\n\n  public CopyAndStartPatching(forBackgroundSave: boolean) {\n    let copy = new StoryState(this.story);\n\n    copy._patch = new StatePatch(this._patch);\n\n    copy._currentFlow.name = this._currentFlow.name;\n    copy._currentFlow.callStack = new CallStack(this._currentFlow.callStack);\n    copy._currentFlow.outputStream.push(...this._currentFlow.outputStream);\n    copy.OutputStreamDirty();\n\n    // When background saving we need to make copies of choices since they each have\n    // a snapshot of the thread at the time of generation since the game could progress\n    // significantly and threads modified during the save process.\n    // However, when doing internal saving and restoring of snapshots this isn't an issue,\n    // and we can simply ref-copy the choices with their existing threads.\n\n    if (forBackgroundSave) {\n      for (let choice of this._currentFlow.currentChoices) {\n        copy._currentFlow.currentChoices.push(choice.Clone());\n      }\n    } else {\n      copy._currentFlow.currentChoices.push(\n        ...this._currentFlow.currentChoices\n      );\n    }\n\n    if (this._namedFlows !== null) {\n      copy._namedFlows = new Map();\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        copy._namedFlows.set(namedFlowKey, namedFlowValue);\n        copy._aliveFlowNamesDirty = true;\n      }\n      copy._namedFlows.set(this._currentFlow.name, copy._currentFlow);\n    }\n\n    if (this.hasError) {\n      copy._currentErrors = [];\n      copy._currentErrors.push(...(this.currentErrors || []));\n    }\n\n    if (this.hasWarning) {\n      copy._currentWarnings = [];\n      copy._currentWarnings.push(...(this.currentWarnings || []));\n    }\n\n    copy.variablesState = this.variablesState;\n    copy.variablesState.callStack = copy.callStack;\n    copy.variablesState.patch = copy._patch;\n\n    copy.evaluationStack.push(...this.evaluationStack);\n\n    if (!this.divertedPointer.isNull)\n      copy.divertedPointer = this.divertedPointer.copy();\n\n    copy.previousPointer = this.previousPointer.copy();\n\n    copy._visitCounts = this._visitCounts;\n    copy._turnIndices = this._turnIndices;\n\n    copy.currentTurnIndex = this.currentTurnIndex;\n    copy.storySeed = this.storySeed;\n    copy.previousRandom = this.previousRandom;\n\n    copy.didSafeExit = this.didSafeExit;\n\n    return copy;\n  }\n\n  public RestoreAfterPatch() {\n    this.variablesState.callStack = this.callStack;\n    this.variablesState.patch = this._patch;\n  }\n\n  public ApplyAnyPatch() {\n    if (this._patch === null) return;\n\n    this.variablesState.ApplyPatch();\n\n    for (let [key, value] of this._patch.visitCounts)\n      this.ApplyCountChanges(key, value, true);\n\n    for (let [key, value] of this._patch.turnIndices)\n      this.ApplyCountChanges(key, value, false);\n\n    this._patch = null;\n  }\n\n  public ApplyCountChanges(\n    container: Container,\n    newCount: number,\n    isVisit: boolean\n  ) {\n    let counts = isVisit ? this._visitCounts : this._turnIndices;\n    counts.set(container.path.toString(), newCount);\n  }\n\n  public WriteJson(writer: SimpleJson.Writer) {\n    writer.WriteObjectStart();\n\n    writer.WritePropertyStart(\"flows\");\n    writer.WriteObjectStart();\n\n    // NOTE: Never pass `WriteJson` directly as an argument to `WriteProperty`.\n    // Call it inside a function to make sure `this` is correctly bound\n    // and passed down the call hierarchy.\n\n    if (this._namedFlows !== null) {\n      for (let [namedFlowKey, namedFlowValue] of this._namedFlows) {\n        writer.WriteProperty(namedFlowKey, (w) => namedFlowValue.WriteJson(w));\n      }\n    } else {\n      writer.WriteProperty(this._currentFlow.name, (w) =>\n        this._currentFlow.WriteJson(w)\n      );\n    }\n\n    writer.WriteObjectEnd();\n    writer.WritePropertyEnd();\n\n    writer.WriteProperty(\"currentFlowName\", this._currentFlow.name);\n\n    writer.WriteProperty(\"variablesState\", (w) =>\n      this.variablesState.WriteJson(w)\n    );\n\n    writer.WriteProperty(\"evalStack\", (w) =>\n      JsonSerialisation.WriteListRuntimeObjs(w, this.evaluationStack)\n    );\n\n    if (!this.divertedPointer.isNull) {\n      if (this.divertedPointer.path === null) {\n        return throwNullException(\"divertedPointer\");\n      }\n      writer.WriteProperty(\n        \"currentDivertTarget\",\n        this.divertedPointer.path.componentsString\n      );\n    }\n\n    writer.WriteProperty(\"visitCounts\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._visitCounts)\n    );\n    writer.WriteProperty(\"turnIndices\", (w) =>\n      JsonSerialisation.WriteIntDictionary(w, this._turnIndices)\n    );\n\n    writer.WriteIntProperty(\"turnIdx\", this.currentTurnIndex);\n    writer.WriteIntProperty(\"storySeed\", this.storySeed);\n    writer.WriteIntProperty(\"previousRandom\", this.previousRandom);\n\n    writer.WriteIntProperty(\"inkSaveVersion\", this.kInkSaveStateVersion);\n\n    writer.WriteIntProperty(\"inkFormatVersion\", Story.inkVersionCurrent);\n\n    writer.WriteObjectEnd();\n  }\n\n  public LoadJsonObj(value: Record<string, any>) {\n    let jObject = value;\n\n    let jSaveVersion = jObject[\"inkSaveVersion\"];\n    if (jSaveVersion == null) {\n      throw new Error(\"ink save format incorrect, can't load.\");\n    } else if (parseInt(jSaveVersion) < this.kMinCompatibleLoadVersion) {\n      throw new Error(\n        \"Ink save format isn't compatible with the current version (saw '\" +\n          jSaveVersion +\n          \"', but minimum is \" +\n          this.kMinCompatibleLoadVersion +\n          \"), so can't load.\"\n      );\n    }\n\n    let flowsObj = jObject[\"flows\"];\n    if (flowsObj != null) {\n      let flowsObjDict = flowsObj as Record<string, any>;\n\n      // Single default flow\n      if (Object.keys(flowsObjDict).length === 1) {\n        this._namedFlows = null;\n      } else if (this._namedFlows === null) {\n        this._namedFlows = new Map();\n      } else {\n        this._namedFlows.clear();\n      }\n\n      let flowsObjDictEntries = Object.entries(flowsObjDict);\n      for (let [namedFlowObjKey, namedFlowObjValue] of flowsObjDictEntries) {\n        let name = namedFlowObjKey;\n        let flowObj = namedFlowObjValue as Record<string, any>;\n\n        let flow = new Flow(name, this.story, flowObj);\n\n        if (Object.keys(flowsObjDict).length === 1) {\n          this._currentFlow = new Flow(name, this.story, flowObj);\n        } else {\n          if (this._namedFlows === null)\n            return throwNullException(\"this._namedFlows\");\n          this._namedFlows.set(name, flow);\n        }\n      }\n\n      if (this._namedFlows != null && this._namedFlows.size > 1) {\n        let currFlowName = jObject[\"currentFlowName\"] as string;\n        // Adding a bang at the end, because we're trusting the save, as\n        // done in upstream.  If the save is corrupted, the execution\n        // is undefined.\n        this._currentFlow = this._namedFlows.get(currFlowName)!;\n      }\n    } else {\n      this._namedFlows = null;\n      this._currentFlow.name = this.kDefaultFlowName;\n      this._currentFlow.callStack.SetJsonToken(\n        jObject[\"callstackThreads\"] as Record<string, any>,\n        this.story\n      );\n      this._currentFlow.outputStream = JsonSerialisation.JArrayToRuntimeObjList(\n        jObject[\"outputStream\"] as any[]\n      );\n      this._currentFlow.currentChoices =\n        JsonSerialisation.JArrayToRuntimeObjList(\n          jObject[\"currentChoices\"] as any[]\n        ) as Choice[];\n\n      let jChoiceThreadsObj = jObject[\"choiceThreads\"];\n      this._currentFlow.LoadFlowChoiceThreads(jChoiceThreadsObj, this.story);\n    }\n\n    this.OutputStreamDirty();\n    this._aliveFlowNamesDirty = true;\n\n    this.variablesState.SetJsonToken(jObject[\"variablesState\"]);\n    this.variablesState.callStack = this._currentFlow.callStack;\n\n    this._evaluationStack = JsonSerialisation.JArrayToRuntimeObjList(\n      jObject[\"evalStack\"]\n    );\n\n    let currentDivertTargetPath = jObject[\"currentDivertTarget\"];\n    if (currentDivertTargetPath != null) {\n      let divertPath = new Path(currentDivertTargetPath.toString());\n      this.divertedPointer = this.story.PointerAtPath(divertPath);\n    }\n\n    this._visitCounts = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"visitCounts\"]\n    );\n    this._turnIndices = JsonSerialisation.JObjectToIntDictionary(\n      jObject[\"turnIndices\"]\n    );\n    this.currentTurnIndex = parseInt(jObject[\"turnIdx\"]);\n    this.storySeed = parseInt(jObject[\"storySeed\"]);\n    this.previousRandom = parseInt(jObject[\"previousRandom\"]);\n  }\n\n  public ResetErrors() {\n    this._currentErrors = null;\n    this._currentWarnings = null;\n  }\n  public ResetOutput(objs: InkObject[] | null = null) {\n    this.outputStream.length = 0;\n    if (objs !== null) this.outputStream.push(...objs);\n    this.OutputStreamDirty();\n  }\n\n  public PushToOutputStream(obj: InkObject | null) {\n    // var text = obj as StringValue;\n    let text = asOrNull(obj, StringValue);\n    if (text !== null) {\n      let listText = this.TrySplittingHeadTailWhitespace(text);\n      if (listText !== null) {\n        for (let textObj of listText) {\n          this.PushToOutputStreamIndividual(textObj);\n        }\n        this.OutputStreamDirty();\n        return;\n      }\n    }\n\n    this.PushToOutputStreamIndividual(obj);\n    this.OutputStreamDirty();\n  }\n\n  public PopFromOutputStream(count: number) {\n    this.outputStream.splice(this.outputStream.length - count, count);\n    this.OutputStreamDirty();\n  }\n\n  public TrySplittingHeadTailWhitespace(single: StringValue) {\n    let str = single.value;\n    if (str === null) {\n      return throwNullException(\"single.value\");\n    }\n\n    let headFirstNewlineIdx = -1;\n    let headLastNewlineIdx = -1;\n    for (let i = 0; i < str.length; i++) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (headFirstNewlineIdx == -1) headFirstNewlineIdx = i;\n        headLastNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    let tailLastNewlineIdx = -1;\n    let tailFirstNewlineIdx = -1;\n    for (let i = str.length - 1; i >= 0; i--) {\n      let c = str[i];\n      if (c == \"\\n\") {\n        if (tailLastNewlineIdx == -1) tailLastNewlineIdx = i;\n        tailFirstNewlineIdx = i;\n      } else if (c == \" \" || c == \"\\t\") continue;\n      else break;\n    }\n\n    // No splitting to be done?\n    if (headFirstNewlineIdx == -1 && tailLastNewlineIdx == -1) return null;\n\n    let listTexts: StringValue[] = [];\n    let innerStrStart = 0;\n    let innerStrEnd = str.length;\n\n    if (headFirstNewlineIdx != -1) {\n      if (headFirstNewlineIdx > 0) {\n        let leadingSpaces = new StringValue(\n          str.substring(0, headFirstNewlineIdx)\n        );\n        listTexts.push(leadingSpaces);\n      }\n      listTexts.push(new StringValue(\"\\n\"));\n      innerStrStart = headLastNewlineIdx + 1;\n    }\n\n    if (tailLastNewlineIdx != -1) {\n      innerStrEnd = tailFirstNewlineIdx;\n    }\n\n    if (innerStrEnd > innerStrStart) {\n      let innerStrText = str.substring(innerStrStart, innerStrEnd);\n      listTexts.push(new StringValue(innerStrText));\n    }\n\n    if (tailLastNewlineIdx != -1 && tailFirstNewlineIdx > headLastNewlineIdx) {\n      listTexts.push(new StringValue(\"\\n\"));\n      if (tailLastNewlineIdx < str.length - 1) {\n        let numSpaces = str.length - tailLastNewlineIdx - 1;\n        let trailingSpaces = new StringValue(\n          str.substring(\n            tailLastNewlineIdx + 1,\n            tailLastNewlineIdx + 1 + numSpaces\n          )\n        );\n        listTexts.push(trailingSpaces);\n      }\n    }\n\n    return listTexts;\n  }\n\n  public PushToOutputStreamIndividual(obj: InkObject | null) {\n    let glue = asOrNull(obj, Glue);\n    let text = asOrNull(obj, StringValue);\n\n    let includeInOutput = true;\n\n    if (glue) {\n      this.TrimNewlinesFromOutputStream();\n      includeInOutput = true;\n    } else if (text) {\n      let functionTrimIndex = -1;\n      let currEl = this.callStack.currentElement;\n      if (currEl.type == PushPopType.Function) {\n        functionTrimIndex = currEl.functionStartInOutputStream;\n      }\n\n      let glueTrimIndex = -1;\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let o = this.outputStream[i];\n        let c = o instanceof ControlCommand ? o : null;\n        let g = o instanceof Glue ? o : null;\n\n        if (g != null) {\n          glueTrimIndex = i;\n          break;\n        } else if (\n          c != null &&\n          c.commandType == ControlCommand.CommandType.BeginString\n        ) {\n          if (i >= functionTrimIndex) {\n            functionTrimIndex = -1;\n          }\n          break;\n        }\n      }\n\n      let trimIndex = -1;\n      if (glueTrimIndex != -1 && functionTrimIndex != -1)\n        trimIndex = Math.min(functionTrimIndex, glueTrimIndex);\n      else if (glueTrimIndex != -1) trimIndex = glueTrimIndex;\n      else trimIndex = functionTrimIndex;\n\n      if (trimIndex != -1) {\n        if (text.isNewline) {\n          includeInOutput = false;\n        } else if (text.isNonWhitespace) {\n          if (glueTrimIndex > -1) this.RemoveExistingGlue();\n\n          if (functionTrimIndex > -1) {\n            let callStackElements = this.callStack.elements;\n            for (let i = callStackElements.length - 1; i >= 0; i--) {\n              let el = callStackElements[i];\n              if (el.type == PushPopType.Function) {\n                el.functionStartInOutputStream = -1;\n              } else {\n                break;\n              }\n            }\n          }\n        }\n      } else if (text.isNewline) {\n        if (this.outputStreamEndsInNewline || !this.outputStreamContainsContent)\n          includeInOutput = false;\n      }\n    }\n\n    if (includeInOutput) {\n      if (obj === null) {\n        return throwNullException(\"obj\");\n      }\n      this.outputStream.push(obj);\n      this.OutputStreamDirty();\n    }\n  }\n\n  public TrimNewlinesFromOutputStream() {\n    let removeWhitespaceFrom = -1;\n\n    let i = this.outputStream.length - 1;\n    while (i >= 0) {\n      let obj = this.outputStream[i];\n      let cmd = asOrNull(obj, ControlCommand);\n      let txt = asOrNull(obj, StringValue);\n\n      if (cmd != null || (txt != null && txt.isNonWhitespace)) {\n        break;\n      } else if (txt != null && txt.isNewline) {\n        removeWhitespaceFrom = i;\n      }\n      i--;\n    }\n\n    // Remove the whitespace\n    if (removeWhitespaceFrom >= 0) {\n      i = removeWhitespaceFrom;\n      while (i < this.outputStream.length) {\n        let text = asOrNull(this.outputStream[i], StringValue);\n        if (text) {\n          this.outputStream.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  public RemoveExistingGlue() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let c = this.outputStream[i];\n      if (c instanceof Glue) {\n        this.outputStream.splice(i, 1);\n      } else if (c instanceof ControlCommand) {\n        break;\n      }\n    }\n\n    this.OutputStreamDirty();\n  }\n\n  get outputStreamEndsInNewline() {\n    if (this.outputStream.length > 0) {\n      for (let i = this.outputStream.length - 1; i >= 0; i--) {\n        let obj = this.outputStream[i];\n        if (obj instanceof ControlCommand) break;\n        let text = this.outputStream[i];\n        if (text instanceof StringValue) {\n          if (text.isNewline) return true;\n          else if (text.isNonWhitespace) break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  get outputStreamContainsContent() {\n    for (let content of this.outputStream) {\n      if (content instanceof StringValue) return true;\n    }\n    return false;\n  }\n\n  get inStringEvaluation() {\n    for (let i = this.outputStream.length - 1; i >= 0; i--) {\n      let cmd = asOrNull(this.outputStream[i], ControlCommand);\n      if (\n        cmd instanceof ControlCommand &&\n        cmd.commandType == ControlCommand.CommandType.BeginString\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public PushEvaluationStack(obj: InkObject | null) {\n    // var listValue = obj as ListValue;\n    let listValue = asOrNull(obj, ListValue);\n    if (listValue) {\n      // Update origin when list is has something to indicate the list origin\n      let rawList = listValue.value;\n      if (rawList === null) {\n        return throwNullException(\"rawList\");\n      }\n\n      if (rawList.originNames != null) {\n        if (!rawList.origins) rawList.origins = [];\n        rawList.origins.length = 0;\n\n        for (let n of rawList.originNames) {\n          if (this.story.listDefinitions === null)\n            return throwNullException(\"StoryState.story.listDefinitions\");\n          let def = this.story.listDefinitions.TryListGetDefinition(n, null);\n          if (def.result === null)\n            return throwNullException(\"StoryState def.result\");\n          if (rawList.origins.indexOf(def.result) < 0)\n            rawList.origins.push(def.result);\n        }\n      }\n    }\n\n    if (obj === null) {\n      return throwNullException(\"obj\");\n    }\n    this.evaluationStack.push(obj);\n  }\n\n  public PopEvaluationStack(): InkObject;\n  public PopEvaluationStack(numberOfObjects: number): InkObject[];\n  public PopEvaluationStack(numberOfObjects?: number) {\n    if (typeof numberOfObjects === \"undefined\") {\n      let obj = this.evaluationStack.pop();\n      return nullIfUndefined(obj);\n    } else {\n      if (numberOfObjects > this.evaluationStack.length) {\n        throw new Error(\"trying to pop too many objects\");\n      }\n\n      let popped = this.evaluationStack.splice(\n        this.evaluationStack.length - numberOfObjects,\n        numberOfObjects\n      );\n      return nullIfUndefined(popped);\n    }\n  }\n\n  public PeekEvaluationStack() {\n    return this.evaluationStack[this.evaluationStack.length - 1];\n  }\n\n  public ForceEnd() {\n    this.callStack.Reset();\n\n    this._currentFlow.currentChoices.length = 0;\n\n    this.currentPointer = Pointer.Null;\n    this.previousPointer = Pointer.Null;\n\n    this.didSafeExit = true;\n  }\n\n  public TrimWhitespaceFromFunctionEnd() {\n    Debug.Assert(this.callStack.currentElement.type == PushPopType.Function);\n    let functionStartPoint =\n      this.callStack.currentElement.functionStartInOutputStream;\n\n    if (functionStartPoint == -1) {\n      functionStartPoint = 0;\n    }\n\n    for (let i = this.outputStream.length - 1; i >= functionStartPoint; i--) {\n      let obj = this.outputStream[i];\n      let txt = asOrNull(obj, StringValue);\n      let cmd = asOrNull(obj, ControlCommand);\n\n      if (txt == null) continue;\n      if (cmd) break;\n\n      if (txt.isNewline || txt.isInlineWhitespace) {\n        this.outputStream.splice(i, 1);\n        this.OutputStreamDirty();\n      } else {\n        break;\n      }\n    }\n  }\n\n  public PopCallStack(popType: PushPopType | null = null) {\n    if (this.callStack.currentElement.type == PushPopType.Function)\n      this.TrimWhitespaceFromFunctionEnd();\n\n    this.callStack.Pop(popType);\n  }\n\n  public SetChosenPath(path: Path, incrementingTurnIndex: boolean) {\n    // Changing direction, assume we need to clear current set of choices\n    this._currentFlow.currentChoices.length = 0;\n\n    let newPointer = this.story.PointerAtPath(path);\n    if (!newPointer.isNull && newPointer.index == -1) newPointer.index = 0;\n\n    this.currentPointer = newPointer;\n\n    if (incrementingTurnIndex) {\n      this.currentTurnIndex++;\n    }\n  }\n\n  public StartFunctionEvaluationFromGame(\n    funcContainer: Container,\n    args: any[]\n  ) {\n    this.callStack.Push(\n      PushPopType.FunctionEvaluationFromGame,\n      this.evaluationStack.length\n    );\n    this.callStack.currentElement.currentPointer =\n      Pointer.StartOf(funcContainer);\n\n    this.PassArgumentsToEvaluationStack(args);\n  }\n\n  public PassArgumentsToEvaluationStack(args: any[] | null) {\n    if (args !== null) {\n      for (let i = 0; i < args.length; i++) {\n        if (\n          !(\n            typeof args[i] === \"number\" ||\n            typeof args[i] === \"string\" ||\n            typeof args[i] === \"boolean\" ||\n            args[i] instanceof InkList\n          )\n        ) {\n          throw new Error(\n            \"ink arguments when calling EvaluateFunction / ChoosePathStringWithParameters must be\" +\n              \"number, string, bool or InkList. Argument was \" +\n              (nullIfUndefined(args[i]) === null\n                ? \"null\"\n                : args[i].constructor.name)\n          );\n        }\n\n        this.PushEvaluationStack(Value.Create(args[i]));\n      }\n    }\n  }\n\n  public TryExitFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type ==\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      this.currentPointer = Pointer.Null;\n      this.didSafeExit = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  public CompleteFunctionEvaluationFromGame() {\n    if (\n      this.callStack.currentElement.type !=\n      PushPopType.FunctionEvaluationFromGame\n    ) {\n      throw new Error(\n        \"Expected external function evaluation to be complete. Stack trace: \" +\n          this.callStack.callStackTrace\n      );\n    }\n\n    let originalEvaluationStackHeight =\n      this.callStack.currentElement.evaluationStackHeightWhenPushed;\n\n    let returnedObj: InkObject | null = null;\n    while (this.evaluationStack.length > originalEvaluationStackHeight) {\n      let poppedObj = this.PopEvaluationStack();\n      if (returnedObj === null) returnedObj = poppedObj;\n    }\n\n    this.PopCallStack(PushPopType.FunctionEvaluationFromGame);\n\n    if (returnedObj) {\n      if (returnedObj instanceof Void) return null;\n\n      // Some kind of value, if not void\n      // var returnVal = returnedObj as Runtime.Value;\n      let returnVal = asOrThrows(returnedObj, Value);\n\n      // DivertTargets get returned as the string of components\n      // (rather than a Path, which isn't public)\n      if (returnVal.valueType == ValueType.DivertTarget) {\n        return returnVal.valueObject.toString();\n      }\n\n      // Other types can just have their exact object type:\n      // int, float, string. VariablePointers get returned as strings.\n      return returnVal.valueObject;\n    }\n\n    return null;\n  }\n\n  public AddError(message: string, isWarning: boolean) {\n    if (!isWarning) {\n      if (this._currentErrors == null) this._currentErrors = [];\n      this._currentErrors.push(message);\n    } else {\n      if (this._currentWarnings == null) this._currentWarnings = [];\n      this._currentWarnings.push(message);\n    }\n  }\n\n  public OutputStreamDirty() {\n    this._outputStreamTextDirty = true;\n    this._outputStreamTagsDirty = true;\n  }\n\n  private _visitCounts: Map<string, number>;\n  private _turnIndices: Map<string, number>;\n\n  private _outputStreamTextDirty = true;\n  private _outputStreamTagsDirty = true;\n\n  private _patch: StatePatch | null = null;\n\n  private _currentFlow: Flow;\n  private _aliveFlowNames: string[] | null = null;\n  private _namedFlows: Map<string, Flow> | null = null;\n  private readonly kDefaultFlowName = \"DEFAULT_FLOW\";\n  private _aliveFlowNamesDirty: boolean = true;\n}\n","// This is simple replacement of the Stopwatch class from the .NET Framework.\n// The original class can count time with much more accuracy than the Javascript version.\n// It might be worth considering using `window.performance` in the browser\n// or `process.hrtime()` in node.\nexport class Stopwatch {\n  private startTime: number | undefined;\n\n  constructor() {\n    this.startTime = undefined;\n  }\n\n  get ElapsedMilliseconds(): number {\n    if (typeof this.startTime === \"undefined\") {\n      return 0;\n    }\n    return new Date().getTime() - this.startTime;\n  }\n\n  public Start() {\n    this.startTime = new Date().getTime();\n  }\n  public Stop() {\n    this.startTime = undefined;\n  }\n}\n","// TODO: Unify with Compiler.\n\nexport type ErrorHandler = (message: string, type: ErrorType) => void;\n\nexport enum ErrorType {\n  Author,\n  Warning,\n  Error,\n}\n","import { Container } from \"./Container\";\nimport { InkObject } from \"./Object\";\nimport { JsonSerialisation } from \"./JsonSerialisation\";\nimport { StoryState } from \"./StoryState\";\nimport { ControlCommand } from \"./ControlCommand\";\nimport { PushPopType } from \"./PushPop\";\nimport { ChoicePoint } from \"./ChoicePoint\";\nimport { Choice } from \"./Choice\";\nimport { Divert } from \"./Divert\";\nimport {\n  Value,\n  StringValue,\n  IntValue,\n  DivertTargetValue,\n  VariablePointerValue,\n  ListValue,\n} from \"./Value\";\nimport { Path } from \"./Path\";\nimport { Void } from \"./Void\";\nimport { Tag } from \"./Tag\";\nimport { VariableAssignment } from \"./VariableAssignment\";\nimport { VariableReference } from \"./VariableReference\";\nimport { NativeFunctionCall } from \"./NativeFunctionCall\";\nimport { StoryException } from \"./StoryException\";\nimport { PRNG } from \"./PRNG\";\nimport { StringBuilder } from \"./StringBuilder\";\nimport { ListDefinitionsOrigin } from \"./ListDefinitionsOrigin\";\nimport { ListDefinition } from \"./ListDefinition\";\nimport { Stopwatch } from \"./StopWatch\";\nimport { Pointer } from \"./Pointer\";\nimport { InkList, InkListItem, KeyValuePair } from \"./InkList\";\nimport { asOrNull, asOrThrows } from \"./TypeAssertion\";\nimport { DebugMetadata } from \"./DebugMetadata\";\nimport { throwNullException } from \"./NullException\";\nimport { SimpleJson } from \"./SimpleJson\";\nimport { ErrorHandler, ErrorType } from \"./Error\";\n\nexport { InkList } from \"./InkList\";\n\nif (!Number.isInteger) {\n  Number.isInteger = function isInteger(nVal: any) {\n    return (\n      typeof nVal === \"number\" &&\n      isFinite(nVal) &&\n      nVal > -9007199254740992 &&\n      nVal < 9007199254740992 &&\n      Math.floor(nVal) === nVal\n    );\n  };\n}\n\nexport class Story extends InkObject {\n  public static inkVersionCurrent = 21;\n\n  public inkVersionMinimumCompatible = 18;\n\n  get currentChoices() {\n    let choices: Choice[] = [];\n\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    for (let c of this._state.currentChoices) {\n      if (!c.isInvisibleDefault) {\n        c.index = choices.length;\n        choices.push(c);\n      }\n    }\n\n    return choices;\n  }\n\n  get currentText() {\n    this.IfAsyncWeCant(\"call currentText since it's a work in progress\");\n    return this.state.currentText;\n  }\n\n  get currentTags() {\n    this.IfAsyncWeCant(\"call currentTags since it's a work in progress\");\n    return this.state.currentTags;\n  }\n\n  get currentErrors() {\n    return this.state.currentErrors;\n  }\n\n  get currentWarnings() {\n    return this.state.currentWarnings;\n  }\n\n  get currentFlowName() {\n    return this.state.currentFlowName;\n  }\n\n  get currentFlowIsDefaultFlow() {\n    return this.state.currentFlowIsDefaultFlow;\n  }\n\n  get aliveFlowNames() {\n    return this.state.aliveFlowNames;\n  }\n\n  get hasError() {\n    return this.state.hasError;\n  }\n\n  get hasWarning() {\n    return this.state.hasWarning;\n  }\n\n  get variablesState() {\n    return this.state.variablesState;\n  }\n\n  get listDefinitions() {\n    return this._listDefinitions;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  public onError: ErrorHandler | null = null;\n\n  public onDidContinue: (() => void) | null = null;\n\n  public onMakeChoice: ((arg1: Choice) => void) | null = null;\n\n  public onEvaluateFunction: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  public onCompleteEvaluateFunction:\n    | ((arg1: string, arg2: any[], arg3: string, arg4: any) => void)\n    | null = null;\n\n  public onChoosePathString: ((arg1: string, arg2: any[]) => void) | null =\n    null;\n\n  // TODO: Implement Profiler\n  public StartProfiling() {\n    /* */\n  }\n  public EndProfiling() {\n    /* */\n  }\n\n  constructor(contentContainer: Container, lists: ListDefinition[] | null);\n  constructor(jsonString: string);\n  constructor(json: Record<string, any>);\n  constructor() {\n    super();\n\n    // Discrimination between constructors\n    let contentContainer: Container;\n    let lists: ListDefinition[] | null = null;\n    let json: Record<string, any> | null = null;\n\n    if (arguments[0] instanceof Container) {\n      contentContainer = arguments[0] as Container;\n\n      if (typeof arguments[1] !== \"undefined\") {\n        lists = arguments[1] as ListDefinition[];\n      }\n\n      // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n      this._mainContentContainer = contentContainer;\n      // ------\n    } else {\n      if (typeof arguments[0] === \"string\") {\n        let jsonString = arguments[0] as string;\n        json = SimpleJson.TextToDictionary(jsonString);\n      } else {\n        json = arguments[0] as Record<string, any>;\n      }\n    }\n\n    // ------ Story (Container contentContainer, List<Runtime.ListDefinition> lists = null)\n    if (lists != null) this._listDefinitions = new ListDefinitionsOrigin(lists);\n\n    this._externals = new Map();\n    // ------\n\n    // ------ Story(string jsonString) : this((Container)null)\n    if (json !== null) {\n      let rootObject: Record<string, any> = json;\n\n      let versionObj = rootObject[\"inkVersion\"];\n      if (versionObj == null)\n        throw new Error(\n          \"ink version number not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let formatFromFile = parseInt(versionObj);\n      if (formatFromFile > Story.inkVersionCurrent) {\n        throw new Error(\n          \"Version of ink used to build story was newer than the current version of the engine\"\n        );\n      } else if (formatFromFile < this.inkVersionMinimumCompatible) {\n        throw new Error(\n          \"Version of ink used to build story is too old to be loaded by this version of the engine\"\n        );\n      } else if (formatFromFile != Story.inkVersionCurrent) {\n        console.warn(\n          \"WARNING: Version of ink used to build story doesn't match current version of engine. Non-critical, but recommend synchronising.\"\n        );\n      }\n\n      let rootToken = rootObject[\"root\"];\n      if (rootToken == null)\n        throw new Error(\n          \"Root node for ink not found. Are you sure it's a valid .ink.json file?\"\n        );\n\n      let listDefsObj;\n      if ((listDefsObj = rootObject[\"listDefs\"])) {\n        this._listDefinitions =\n          JsonSerialisation.JTokenToListDefinitions(listDefsObj);\n      }\n\n      this._mainContentContainer = asOrThrows(\n        JsonSerialisation.JTokenToRuntimeObject(rootToken),\n        Container\n      );\n\n      this.ResetState();\n    }\n    // ------\n  }\n\n  // Merge together `public string ToJson()` and `void ToJson(SimpleJson.Writer writer)`.\n  // Will only return a value if writer was not provided.\n  public ToJson(writer?: SimpleJson.Writer): string | void {\n    let shouldReturn = false;\n\n    if (!writer) {\n      shouldReturn = true;\n      writer = new SimpleJson.Writer();\n    }\n\n    writer.WriteObjectStart();\n\n    writer.WriteIntProperty(\"inkVersion\", Story.inkVersionCurrent);\n\n    writer.WriteProperty(\"root\", (w) =>\n      JsonSerialisation.WriteRuntimeContainer(w, this._mainContentContainer)\n    );\n\n    if (this._listDefinitions != null) {\n      writer.WritePropertyStart(\"listDefs\");\n      writer.WriteObjectStart();\n\n      for (let def of this._listDefinitions.lists) {\n        writer.WritePropertyStart(def.name);\n        writer.WriteObjectStart();\n\n        for (let [key, value] of def.items) {\n          let item = InkListItem.fromSerializedKey(key);\n          let val = value;\n          writer.WriteIntProperty(item.itemName, val);\n        }\n\n        writer.WriteObjectEnd();\n        writer.WritePropertyEnd();\n      }\n\n      writer.WriteObjectEnd();\n      writer.WritePropertyEnd();\n    }\n\n    writer.WriteObjectEnd();\n\n    if (shouldReturn) return writer.toString();\n  }\n\n  public ResetState() {\n    this.IfAsyncWeCant(\"ResetState\");\n\n    this._state = new StoryState(this);\n    this._state.variablesState.ObserveVariableChange(\n      this.VariableStateDidChangeEvent.bind(this)\n    );\n\n    this.ResetGlobals();\n  }\n\n  public ResetErrors() {\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ResetErrors();\n  }\n\n  public ResetCallstack() {\n    this.IfAsyncWeCant(\"ResetCallstack\");\n    if (this._state === null) {\n      return throwNullException(\"this._state\");\n    }\n    this._state.ForceEnd();\n  }\n\n  public ResetGlobals() {\n    if (this._mainContentContainer.namedContent.get(\"global decl\")) {\n      let originalPointer = this.state.currentPointer.copy();\n\n      this.ChoosePath(new Path(\"global decl\"), false);\n\n      this.ContinueInternal();\n\n      this.state.currentPointer = originalPointer;\n    }\n\n    this.state.variablesState.SnapshotDefaultGlobals();\n  }\n\n  public SwitchFlow(flowName: string) {\n    this.IfAsyncWeCant(\"switch flow\");\n    if (this._asyncSaving) {\n      throw new Error(\n        \"Story is already in background saving mode, can't switch flow to \" +\n          flowName\n      );\n    }\n\n    this.state.SwitchFlow_Internal(flowName);\n  }\n\n  public RemoveFlow(flowName: string) {\n    this.state.RemoveFlow_Internal(flowName);\n  }\n\n  public SwitchToDefaultFlow() {\n    this.state.SwitchToDefaultFlow_Internal();\n  }\n\n  public Continue() {\n    this.ContinueAsync(0);\n    return this.currentText;\n  }\n\n  get canContinue() {\n    return this.state.canContinue;\n  }\n\n  get asyncContinueComplete() {\n    return !this._asyncContinueActive;\n  }\n\n  public ContinueAsync(millisecsLimitAsync: number) {\n    if (!this._hasValidatedExternals) this.ValidateExternalBindings();\n\n    this.ContinueInternal(millisecsLimitAsync);\n  }\n\n  public ContinueInternal(millisecsLimitAsync = 0) {\n    if (this._profiler != null) this._profiler.PreContinue();\n\n    let isAsyncTimeLimited = millisecsLimitAsync > 0;\n    this._recursiveContinueCount++;\n\n    if (!this._asyncContinueActive) {\n      this._asyncContinueActive = isAsyncTimeLimited;\n\n      if (!this.canContinue) {\n        throw new Error(\n          \"Can't continue - should check canContinue before calling Continue\"\n        );\n      }\n\n      this._state.didSafeExit = false;\n      this._state.ResetOutput();\n\n      if (this._recursiveContinueCount == 1)\n        this._state.variablesState.StartVariableObservation();\n    } else if (this._asyncContinueActive && !isAsyncTimeLimited) {\n      this._asyncContinueActive = false;\n    }\n\n    let durationStopwatch = new Stopwatch();\n    durationStopwatch.Start();\n\n    let outputStreamEndsInNewline = false;\n    this._sawLookaheadUnsafeFunctionAfterNewline = false;\n    do {\n      try {\n        outputStreamEndsInNewline = this.ContinueSingleStep();\n      } catch (e) {\n        if (!(e instanceof StoryException)) throw e;\n\n        this.AddError(e.message, undefined, e.useEndLineNumber);\n        break;\n      }\n\n      if (outputStreamEndsInNewline) break;\n\n      if (\n        this._asyncContinueActive &&\n        durationStopwatch.ElapsedMilliseconds > millisecsLimitAsync\n      ) {\n        break;\n      }\n    } while (this.canContinue);\n\n    durationStopwatch.Stop();\n\n    let changedVariablesToObserve: Map<string, any> | null = null;\n\n    if (outputStreamEndsInNewline || !this.canContinue) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        this.RestoreStateSnapshot();\n      }\n\n      if (!this.canContinue) {\n        if (this.state.callStack.canPopThread)\n          this.AddError(\n            \"Thread available to pop, threads should always be flat by the end of evaluation?\"\n          );\n\n        if (\n          this.state.generatedChoices.length == 0 &&\n          !this.state.didSafeExit &&\n          this._temporaryEvaluationContainer == null\n        ) {\n          if (this.state.callStack.CanPop(PushPopType.Tunnel))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '->->' to return from a tunnel?\"\n            );\n          else if (this.state.callStack.CanPop(PushPopType.Function))\n            this.AddError(\n              \"unexpectedly reached end of content. Do you need a '~ return'?\"\n            );\n          else if (!this.state.callStack.canPop)\n            this.AddError(\n              \"ran out of content. Do you need a '-> DONE' or '-> END'?\"\n            );\n          else\n            this.AddError(\n              \"unexpectedly reached end of content for unknown reason. Please debug compiler!\"\n            );\n        }\n      }\n\n      this.state.didSafeExit = false;\n      this._sawLookaheadUnsafeFunctionAfterNewline = false;\n\n      if (this._recursiveContinueCount == 1)\n        changedVariablesToObserve =\n          this._state.variablesState.CompleteVariableObservation();\n\n      this._asyncContinueActive = false;\n      if (this.onDidContinue !== null) this.onDidContinue();\n    }\n\n    this._recursiveContinueCount--;\n\n    if (this._profiler != null) this._profiler.PostContinue();\n\n    // In the following code, we're masking a lot of non-null assertion,\n    // because testing for against `hasError` or `hasWarning` makes sure\n    // the arrays are present and contain at least one element.\n    if (this.state.hasError || this.state.hasWarning) {\n      if (this.onError !== null) {\n        if (this.state.hasError) {\n          for (let err of this.state.currentErrors!) {\n            this.onError(err, ErrorType.Error);\n          }\n        }\n        if (this.state.hasWarning) {\n          for (let err of this.state.currentWarnings!) {\n            this.onError(err, ErrorType.Warning);\n          }\n        }\n        this.ResetErrors();\n      } else {\n        let sb = new StringBuilder();\n        sb.Append(\"Ink had \");\n        if (this.state.hasError) {\n          sb.Append(`${this.state.currentErrors!.length}`);\n          sb.Append(\n            this.state.currentErrors!.length == 1 ? \" error\" : \"errors\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        if (this.state.hasWarning) {\n          sb.Append(`${this.state.currentWarnings!.length}`);\n          sb.Append(\n            this.state.currentWarnings!.length == 1 ? \" warning\" : \"warnings\"\n          );\n          if (this.state.hasWarning) sb.Append(\" and \");\n        }\n        sb.Append(\n          \". It is strongly suggested that you assign an error handler to story.onError. The first issue was: \"\n        );\n        sb.Append(\n          this.state.hasError\n            ? this.state.currentErrors![0]\n            : this.state.currentWarnings![0]\n        );\n\n        throw new StoryException(sb.toString());\n      }\n    }\n    if (\n      changedVariablesToObserve != null &&\n      Object.keys(changedVariablesToObserve).length > 0\n    ) {\n      this._state.variablesState.NotifyObservers(changedVariablesToObserve);\n    }\n  }\n\n  public ContinueSingleStep() {\n    if (this._profiler != null) this._profiler.PreStep();\n\n    this.Step();\n\n    if (this._profiler != null) this._profiler.PostStep();\n\n    if (!this.canContinue && !this.state.callStack.elementIsEvaluateFromGame) {\n      this.TryFollowDefaultInvisibleChoice();\n    }\n\n    if (this._profiler != null) this._profiler.PreSnapshot();\n\n    if (!this.state.inStringEvaluation) {\n      if (this._stateSnapshotAtLastNewline !== null) {\n        if (this._stateSnapshotAtLastNewline.currentTags === null) {\n          return throwNullException(\"this._stateAtLastNewline.currentTags\");\n        }\n        if (this.state.currentTags === null) {\n          return throwNullException(\"this.state.currentTags\");\n        }\n\n        let change = this.CalculateNewlineOutputStateChange(\n          this._stateSnapshotAtLastNewline.currentText,\n          this.state.currentText,\n          this._stateSnapshotAtLastNewline.currentTags.length,\n          this.state.currentTags.length\n        );\n\n        if (\n          change == Story.OutputStateChange.ExtendedBeyondNewline ||\n          this._sawLookaheadUnsafeFunctionAfterNewline\n        ) {\n          this.RestoreStateSnapshot();\n\n          return true;\n        } else if (change == Story.OutputStateChange.NewlineRemoved) {\n          this.DiscardSnapshot();\n        }\n      }\n\n      if (this.state.outputStreamEndsInNewline) {\n        if (this.canContinue) {\n          if (this._stateSnapshotAtLastNewline == null) this.StateSnapshot();\n        } else {\n          this.DiscardSnapshot();\n        }\n      }\n    }\n\n    if (this._profiler != null) this._profiler.PostSnapshot();\n\n    return false;\n  }\n\n  public CalculateNewlineOutputStateChange(\n    prevText: string | null,\n    currText: string | null,\n    prevTagCount: number,\n    currTagCount: number\n  ) {\n    if (prevText === null) {\n      return throwNullException(\"prevText\");\n    }\n    if (currText === null) {\n      return throwNullException(\"currText\");\n    }\n\n    let newlineStillExists =\n      currText.length >= prevText.length &&\n      prevText.length > 0 &&\n      currText.charAt(prevText.length - 1) == \"\\n\";\n    if (\n      prevTagCount == currTagCount &&\n      prevText.length == currText.length &&\n      newlineStillExists\n    )\n      return Story.OutputStateChange.NoChange;\n\n    if (!newlineStillExists) {\n      return Story.OutputStateChange.NewlineRemoved;\n    }\n\n    if (currTagCount > prevTagCount)\n      return Story.OutputStateChange.ExtendedBeyondNewline;\n\n    for (let i = prevText.length; i < currText.length; i++) {\n      let c = currText.charAt(i);\n      if (c != \" \" && c != \"\\t\") {\n        return Story.OutputStateChange.ExtendedBeyondNewline;\n      }\n    }\n\n    return Story.OutputStateChange.NoChange;\n  }\n\n  public ContinueMaximally() {\n    this.IfAsyncWeCant(\"ContinueMaximally\");\n\n    let sb = new StringBuilder();\n\n    while (this.canContinue) {\n      sb.Append(this.Continue());\n    }\n\n    return sb.toString();\n  }\n\n  public ContentAtPath(path: Path) {\n    return this.mainContentContainer.ContentAtPath(path);\n  }\n\n  public KnotContainerWithName(name: string) {\n    let namedContainer = this.mainContentContainer.namedContent.get(name);\n    if (namedContainer instanceof Container) return namedContainer;\n    else return null;\n  }\n\n  public PointerAtPath(path: Path) {\n    if (path.length == 0) return Pointer.Null;\n\n    let p = new Pointer();\n\n    let pathLengthToUse = path.length;\n\n    let result = null;\n    if (path.lastComponent === null) {\n      return throwNullException(\"path.lastComponent\");\n    }\n\n    if (path.lastComponent.isIndex) {\n      pathLengthToUse = path.length - 1;\n      result = this.mainContentContainer.ContentAtPath(\n        path,\n        undefined,\n        pathLengthToUse\n      );\n      p.container = result.container;\n      p.index = path.lastComponent.index;\n    } else {\n      result = this.mainContentContainer.ContentAtPath(path);\n      p.container = result.container;\n      p.index = -1;\n    }\n\n    if (\n      result.obj == null ||\n      (result.obj == this.mainContentContainer && pathLengthToUse > 0)\n    ) {\n      this.Error(\n        \"Failed to find content at path '\" +\n          path +\n          \"', and no approximation of it was possible.\"\n      );\n    } else if (result.approximate)\n      this.Warning(\n        \"Failed to find content at path '\" +\n          path +\n          \"', so it was approximated to: '\" +\n          result.obj.path +\n          \"'.\"\n      );\n\n    return p;\n  }\n\n  public StateSnapshot() {\n    this._stateSnapshotAtLastNewline = this._state;\n    this._state = this._state.CopyAndStartPatching(false);\n  }\n\n  public RestoreStateSnapshot() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      throwNullException(\"_stateSnapshotAtLastNewline\");\n    }\n    this._stateSnapshotAtLastNewline.RestoreAfterPatch();\n\n    this._state = this._stateSnapshotAtLastNewline;\n    this._stateSnapshotAtLastNewline = null;\n\n    if (!this._asyncSaving) {\n      this._state.ApplyAnyPatch();\n    }\n  }\n\n  public DiscardSnapshot() {\n    if (!this._asyncSaving) this._state.ApplyAnyPatch();\n\n    this._stateSnapshotAtLastNewline = null;\n  }\n\n  public CopyStateForBackgroundThreadSave() {\n    this.IfAsyncWeCant(\"start saving on a background thread\");\n\n    if (this._asyncSaving)\n      throw new Error(\n        \"Story is already in background saving mode, can't call CopyStateForBackgroundThreadSave again!\"\n      );\n\n    let stateToSave = this._state;\n    this._state = this._state.CopyAndStartPatching(true);\n    this._asyncSaving = true;\n    return stateToSave;\n  }\n\n  public BackgroundSaveComplete() {\n    if (this._stateSnapshotAtLastNewline === null) {\n      this._state.ApplyAnyPatch();\n    }\n\n    this._asyncSaving = false;\n  }\n\n  public Step() {\n    let shouldAddToStream = true;\n\n    let pointer = this.state.currentPointer.copy();\n    if (pointer.isNull) {\n      return;\n    }\n\n    // Container containerToEnter = pointer.Resolve () as Container;\n    let containerToEnter = asOrNull(pointer.Resolve(), Container);\n\n    while (containerToEnter) {\n      this.VisitContainer(containerToEnter, true);\n\n      // No content? the most we can do is step past it\n      if (containerToEnter.content.length == 0) {\n        break;\n      }\n\n      pointer = Pointer.StartOf(containerToEnter);\n      // containerToEnter = pointer.Resolve() as Container;\n      containerToEnter = asOrNull(pointer.Resolve(), Container);\n    }\n\n    this.state.currentPointer = pointer.copy();\n\n    if (this._profiler != null) this._profiler.Step(this.state.callStack);\n\n    // Is the current content object:\n    //  - Normal content\n    //  - Or a logic/flow statement - if so, do it\n    // Stop flow if we hit a stack pop when we're unable to pop (e.g. return/done statement in knot\n    // that was diverted to rather than called as a function)\n    let currentContentObj = pointer.Resolve();\n    let isLogicOrFlowControl =\n      this.PerformLogicAndFlowControl(currentContentObj);\n\n    // Has flow been forced to end by flow control above?\n    if (this.state.currentPointer.isNull) {\n      return;\n    }\n\n    if (isLogicOrFlowControl) {\n      shouldAddToStream = false;\n    }\n\n    // Choice with condition?\n    // var choicePoint = currentContentObj as ChoicePoint;\n    let choicePoint = asOrNull(currentContentObj, ChoicePoint);\n    if (choicePoint) {\n      let choice = this.ProcessChoice(choicePoint);\n      if (choice) {\n        this.state.generatedChoices.push(choice);\n      }\n\n      currentContentObj = null;\n      shouldAddToStream = false;\n    }\n\n    // If the container has no content, then it will be\n    // the \"content\" itself, but we skip over it.\n    if (currentContentObj instanceof Container) {\n      shouldAddToStream = false;\n    }\n\n    // Content to add to evaluation stack or the output stream\n    if (shouldAddToStream) {\n      // If we're pushing a variable pointer onto the evaluation stack, ensure that it's specific\n      // to our current (possibly temporary) context index. And make a copy of the pointer\n      // so that we're not editing the original runtime object.\n      // var varPointer = currentContentObj as VariablePointerValue;\n      let varPointer = asOrNull(currentContentObj, VariablePointerValue);\n      if (varPointer && varPointer.contextIndex == -1) {\n        // Create new object so we're not overwriting the story's own data\n        let contextIdx = this.state.callStack.ContextForVariableNamed(\n          varPointer.variableName\n        );\n        currentContentObj = new VariablePointerValue(\n          varPointer.variableName,\n          contextIdx\n        );\n      }\n\n      // Expression evaluation content\n      if (this.state.inExpressionEvaluation) {\n        this.state.PushEvaluationStack(currentContentObj);\n      }\n      // Output stream content (i.e. not expression evaluation)\n      else {\n        this.state.PushToOutputStream(currentContentObj);\n      }\n    }\n\n    // Increment the content pointer, following diverts if necessary\n    this.NextContent();\n\n    // Starting a thread should be done after the increment to the content pointer,\n    // so that when returning from the thread, it returns to the content after this instruction.\n    // var controlCmd = currentContentObj as ;\n    let controlCmd = asOrNull(currentContentObj, ControlCommand);\n    if (\n      controlCmd &&\n      controlCmd.commandType == ControlCommand.CommandType.StartThread\n    ) {\n      this.state.callStack.PushThread();\n    }\n  }\n\n  public VisitContainer(container: Container, atStart: boolean) {\n    if (!container.countingAtStartOnly || atStart) {\n      if (container.visitsShouldBeCounted)\n        this.state.IncrementVisitCountForContainer(container);\n\n      if (container.turnIndexShouldBeCounted)\n        this.state.RecordTurnIndexVisitToContainer(container);\n    }\n  }\n\n  private _prevContainers: Container[] = [];\n  public VisitChangedContainersDueToDivert() {\n    let previousPointer = this.state.previousPointer.copy();\n    let pointer = this.state.currentPointer.copy();\n\n    if (pointer.isNull || pointer.index == -1) return;\n\n    this._prevContainers.length = 0;\n    if (!previousPointer.isNull) {\n      // Container prevAncestor = previousPointer.Resolve() as Container ?? previousPointer.container as Container;\n      let resolvedPreviousAncestor = previousPointer.Resolve();\n      let prevAncestor =\n        asOrNull(resolvedPreviousAncestor, Container) ||\n        asOrNull(previousPointer.container, Container);\n      while (prevAncestor) {\n        this._prevContainers.push(prevAncestor);\n        // prevAncestor = prevAncestor.parent as Container;\n        prevAncestor = asOrNull(prevAncestor.parent, Container);\n      }\n    }\n\n    let currentChildOfContainer = pointer.Resolve();\n\n    if (currentChildOfContainer == null) return;\n\n    // Container currentContainerAncestor = currentChildOfContainer.parent as Container;\n    let currentContainerAncestor = asOrNull(\n      currentChildOfContainer.parent,\n      Container\n    );\n    let allChildrenEnteredAtStart = true;\n    while (\n      currentContainerAncestor &&\n      (this._prevContainers.indexOf(currentContainerAncestor) < 0 ||\n        currentContainerAncestor.countingAtStartOnly)\n    ) {\n      // Check whether this ancestor container is being entered at the start,\n      // by checking whether the child object is the first.\n      let enteringAtStart =\n        currentContainerAncestor.content.length > 0 &&\n        currentChildOfContainer == currentContainerAncestor.content[0] &&\n        allChildrenEnteredAtStart;\n\n      if (!enteringAtStart) allChildrenEnteredAtStart = false;\n\n      // Mark a visit to this container\n      this.VisitContainer(currentContainerAncestor, enteringAtStart);\n\n      currentChildOfContainer = currentContainerAncestor;\n      // currentContainerAncestor = currentContainerAncestor.parent as Container;\n      currentContainerAncestor = asOrNull(\n        currentContainerAncestor.parent,\n        Container\n      );\n    }\n  }\n\n  public PopChoiceStringAndTags(tags: string[]) {\n    let choiceOnlyStrVal = asOrThrows(\n      this.state.PopEvaluationStack(),\n      StringValue\n    );\n\n    while (\n      this.state.evaluationStack.length > 0 &&\n      asOrNull(this.state.PeekEvaluationStack(), Tag) != null\n    ) {\n      let tag = asOrNull(this.state.PopEvaluationStack(), Tag);\n      if (tag) tags.push(tag.text);\n    }\n    return choiceOnlyStrVal.value;\n  }\n\n  public ProcessChoice(choicePoint: ChoicePoint) {\n    let showChoice = true;\n\n    // Don't create choice if choice point doesn't pass conditional\n    if (choicePoint.hasCondition) {\n      let conditionValue = this.state.PopEvaluationStack();\n      if (!this.IsTruthy(conditionValue)) {\n        showChoice = false;\n      }\n    }\n\n    let startText = \"\";\n    let choiceOnlyText = \"\";\n    let tags: string[] = [];\n\n    if (choicePoint.hasChoiceOnlyContent) {\n      choiceOnlyText = this.PopChoiceStringAndTags(tags) || \"\";\n    }\n\n    if (choicePoint.hasStartContent) {\n      startText = this.PopChoiceStringAndTags(tags) || \"\";\n    }\n\n    // Don't create choice if player has already read this content\n    if (choicePoint.onceOnly) {\n      let visitCount = this.state.VisitCountForContainer(\n        choicePoint.choiceTarget\n      );\n      if (visitCount > 0) {\n        showChoice = false;\n      }\n    }\n\n    // We go through the full process of creating the choice above so\n    // that we consume the content for it, since otherwise it'll\n    // be shown on the output stream.\n    if (!showChoice) {\n      return null;\n    }\n\n    let choice = new Choice();\n    choice.targetPath = choicePoint.pathOnChoice;\n    choice.sourcePath = choicePoint.path.toString();\n    choice.isInvisibleDefault = choicePoint.isInvisibleDefault;\n    choice.threadAtGeneration = this.state.callStack.ForkThread();\n    choice.tags = tags.reverse(); //C# is a stack\n    choice.text = (startText + choiceOnlyText).replace(/^[ \\t]+|[ \\t]+$/g, \"\");\n\n    return choice;\n  }\n\n  public IsTruthy(obj: InkObject) {\n    let truthy = false;\n    if (obj instanceof Value) {\n      let val = obj;\n\n      if (val instanceof DivertTargetValue) {\n        let divTarget = val;\n        this.Error(\n          \"Shouldn't use a divert target (to \" +\n            divTarget.targetPath +\n            \") as a conditional value. Did you intend a function call 'likeThis()' or a read count check 'likeThis'? (no arrows)\"\n        );\n        return false;\n      }\n\n      return val.isTruthy;\n    }\n    return truthy;\n  }\n\n  public PerformLogicAndFlowControl(contentObj: InkObject | null) {\n    if (contentObj == null) {\n      return false;\n    }\n\n    // Divert\n    if (contentObj instanceof Divert) {\n      let currentDivert = contentObj;\n\n      if (currentDivert.isConditional) {\n        let conditionValue = this.state.PopEvaluationStack();\n\n        // False conditional? Cancel divert\n        if (!this.IsTruthy(conditionValue)) return true;\n      }\n\n      if (currentDivert.hasVariableTarget) {\n        let varName = currentDivert.variableDivertName;\n\n        let varContents =\n          this.state.variablesState.GetVariableWithName(varName);\n\n        if (varContents == null) {\n          this.Error(\n            \"Tried to divert using a target from a variable that could not be found (\" +\n              varName +\n              \")\"\n          );\n        } else if (!(varContents instanceof DivertTargetValue)) {\n          // var intContent = varContents as IntValue;\n          let intContent = asOrNull(varContents, IntValue);\n\n          let errorMessage =\n            \"Tried to divert to a target from a variable, but the variable (\" +\n            varName +\n            \") didn't contain a divert target, it \";\n          if (intContent instanceof IntValue && intContent.value == 0) {\n            errorMessage += \"was empty/null (the value 0).\";\n          } else {\n            errorMessage += \"contained '\" + varContents + \"'.\";\n          }\n\n          this.Error(errorMessage);\n        }\n\n        let target = asOrThrows(varContents, DivertTargetValue);\n        this.state.divertedPointer = this.PointerAtPath(target.targetPath);\n      } else if (currentDivert.isExternal) {\n        this.CallExternalFunction(\n          currentDivert.targetPathString,\n          currentDivert.externalArgs\n        );\n        return true;\n      } else {\n        this.state.divertedPointer = currentDivert.targetPointer.copy();\n      }\n\n      if (currentDivert.pushesToStack) {\n        this.state.callStack.Push(\n          currentDivert.stackPushType,\n          undefined,\n          this.state.outputStream.length\n        );\n      }\n\n      if (this.state.divertedPointer.isNull && !currentDivert.isExternal) {\n        if (\n          currentDivert &&\n          currentDivert.debugMetadata &&\n          currentDivert.debugMetadata.sourceName != null\n        ) {\n          this.Error(\n            \"Divert target doesn't exist: \" +\n              currentDivert.debugMetadata.sourceName\n          );\n        } else {\n          this.Error(\"Divert resolution failed: \" + currentDivert);\n        }\n      }\n\n      return true;\n    }\n\n    // Start/end an expression evaluation? Or print out the result?\n    else if (contentObj instanceof ControlCommand) {\n      let evalCommand = contentObj;\n\n      switch (evalCommand.commandType) {\n        case ControlCommand.CommandType.EvalStart:\n          this.Assert(\n            this.state.inExpressionEvaluation === false,\n            \"Already in expression evaluation?\"\n          );\n          this.state.inExpressionEvaluation = true;\n          break;\n\n        case ControlCommand.CommandType.EvalEnd:\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Not in expression evaluation mode\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        case ControlCommand.CommandType.EvalOutput:\n          // If the expression turned out to be empty, there may not be anything on the stack\n          if (this.state.evaluationStack.length > 0) {\n            let output = this.state.PopEvaluationStack();\n\n            // Functions may evaluate to Void, in which case we skip output\n            if (!(output instanceof Void)) {\n              // TODO: Should we really always blanket convert to string?\n              // It would be okay to have numbers in the output stream the\n              // only problem is when exporting text for viewing, it skips over numbers etc.\n              let text = new StringValue(output.toString());\n\n              this.state.PushToOutputStream(text);\n            }\n          }\n          break;\n\n        case ControlCommand.CommandType.NoOp:\n          break;\n\n        case ControlCommand.CommandType.Duplicate:\n          this.state.PushEvaluationStack(this.state.PeekEvaluationStack());\n          break;\n\n        case ControlCommand.CommandType.PopEvaluatedValue:\n          this.state.PopEvaluationStack();\n          break;\n\n        case ControlCommand.CommandType.PopFunction:\n        case ControlCommand.CommandType.PopTunnel:\n          let popType =\n            evalCommand.commandType == ControlCommand.CommandType.PopFunction\n              ? PushPopType.Function\n              : PushPopType.Tunnel;\n\n          let overrideTunnelReturnTarget: DivertTargetValue | null = null;\n          if (popType == PushPopType.Tunnel) {\n            let popped = this.state.PopEvaluationStack();\n            // overrideTunnelReturnTarget = popped as DivertTargetValue;\n            overrideTunnelReturnTarget = asOrNull(popped, DivertTargetValue);\n            if (overrideTunnelReturnTarget === null) {\n              this.Assert(\n                popped instanceof Void,\n                \"Expected void if ->-> doesn't override target\"\n              );\n            }\n          }\n\n          if (this.state.TryExitFunctionEvaluationFromGame()) {\n            break;\n          } else if (\n            this.state.callStack.currentElement.type != popType ||\n            !this.state.callStack.canPop\n          ) {\n            let names: Map<PushPopType, string> = new Map();\n            names.set(\n              PushPopType.Function,\n              \"function return statement (~ return)\"\n            );\n            names.set(PushPopType.Tunnel, \"tunnel onwards statement (->->)\");\n\n            let expected = names.get(this.state.callStack.currentElement.type);\n            if (!this.state.callStack.canPop) {\n              expected = \"end of flow (-> END or choice)\";\n            }\n\n            let errorMsg =\n              \"Found \" + names.get(popType) + \", when expected \" + expected;\n\n            this.Error(errorMsg);\n          } else {\n            this.state.PopCallStack();\n\n            if (overrideTunnelReturnTarget)\n              this.state.divertedPointer = this.PointerAtPath(\n                overrideTunnelReturnTarget.targetPath\n              );\n          }\n          break;\n\n        case ControlCommand.CommandType.BeginString:\n          this.state.PushToOutputStream(evalCommand);\n\n          this.Assert(\n            this.state.inExpressionEvaluation === true,\n            \"Expected to be in an expression when evaluating a string\"\n          );\n          this.state.inExpressionEvaluation = false;\n          break;\n\n        // Leave it to story.currentText and story.currentTags to sort out the text from the tags\n        // This is mostly because we can't always rely on the existence of EndTag, and we don't want\n        // to try and flatten dynamic tags to strings every time \\n is pushed to output\n        case ControlCommand.CommandType.BeginTag:\n          this.state.PushToOutputStream(evalCommand);\n          break;\n\n        // EndTag has 2 modes:\n        //  - When in string evaluation (for choices)\n        //  - Normal\n        //\n        // The only way you could have an EndTag in the middle of\n        // string evaluation is if we're currently generating text for a\n        // choice, such as:\n        //\n        //   + choice # tag\n        //\n        // In the above case, the ink will be run twice:\n        //  - First, to generate the choice text. String evaluation\n        //    will be on, and the final string will be pushed to the\n        //    evaluation stack, ready to be popped to make a Choice\n        //    object.\n        //  - Second, when ink generates text after choosing the choice.\n        //    On this ocassion, it's not in string evaluation mode.\n        //\n        // On the writing side, we disallow manually putting tags within\n        // strings like this:\n        //\n        //   {\"hello # world\"}\n        //\n        // So we know that the tag must be being generated as part of\n        // choice content. Therefore, when the tag has been generated,\n        // we push it onto the evaluation stack in the exact same way\n        // as the string for the choice content.\n        case ControlCommand.CommandType.EndTag: {\n          if (this.state.inStringEvaluation) {\n            let contentStackForTag: InkObject[] = [];\n            let outputCountConsumed = 0;\n            for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n              let obj = this.state.outputStream[i];\n              outputCountConsumed++;\n\n              // var command = obj as ControlCommand;\n              let command = asOrNull(obj, ControlCommand);\n              if (command != null) {\n                if (\n                  command.commandType == ControlCommand.CommandType.BeginTag\n                ) {\n                  break;\n                } else {\n                  this.Error(\n                    \"Unexpected ControlCommand while extracting tag from choice\"\n                  );\n                  break;\n                }\n              }\n              if (obj instanceof StringValue) {\n                contentStackForTag.push(obj);\n              }\n            }\n\n            // Consume the content that was produced for this string\n            this.state.PopFromOutputStream(outputCountConsumed);\n            // Build string out of the content we collected\n            let sb = new StringBuilder();\n            for (let strVal of contentStackForTag.reverse()) {\n              sb.Append(strVal.toString());\n            }\n            let choiceTag = new Tag(\n              this.state.CleanOutputWhitespace(sb.toString())\n            );\n            // Pushing to the evaluation stack means it gets picked up\n            // when a Choice is generated from the next Choice Point.\n            this.state.PushEvaluationStack(choiceTag);\n          } else {\n            // Otherwise! Simply push EndTag, so that in the output stream we\n            // have a structure of: [BeginTag, \"the tag content\", EndTag]\n            this.state.PushToOutputStream(evalCommand);\n          }\n          break;\n        }\n\n        case ControlCommand.CommandType.EndString: {\n          let contentStackForString: InkObject[] = [];\n          let contentToRetain: InkObject[] = [];\n\n          let outputCountConsumed = 0;\n          for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n            let obj = this.state.outputStream[i];\n\n            outputCountConsumed++;\n\n            // var command = obj as ControlCommand;\n            let command = asOrNull(obj, ControlCommand);\n            if (\n              command &&\n              command.commandType == ControlCommand.CommandType.BeginString\n            ) {\n              break;\n            }\n            if (obj instanceof Tag) {\n              contentToRetain.push(obj);\n            }\n            if (obj instanceof StringValue) {\n              contentStackForString.push(obj);\n            }\n          }\n\n          // Consume the content that was produced for this string\n          this.state.PopFromOutputStream(outputCountConsumed);\n\n          // Rescue the tags that we want actually to keep on the output stack\n          // rather than consume as part of the string we're building.\n          // At the time of writing, this only applies to Tag objects generated\n          // by choices, which are pushed to the stack during string generation.\n          for (let rescuedTag of contentToRetain)\n            this.state.PushToOutputStream(rescuedTag);\n\n          // The C# version uses a Stack for contentStackForString, but we're\n          // using a simple array, so we need to reverse it before using it\n          contentStackForString = contentStackForString.reverse();\n\n          // Build string out of the content we collected\n          let sb = new StringBuilder();\n          for (let c of contentStackForString) {\n            sb.Append(c.toString());\n          }\n\n          // Return to expression evaluation (from content mode)\n          this.state.inExpressionEvaluation = true;\n          this.state.PushEvaluationStack(new StringValue(sb.toString()));\n          break;\n        }\n\n        case ControlCommand.CommandType.ChoiceCount:\n          let choiceCount = this.state.generatedChoices.length;\n          this.state.PushEvaluationStack(new IntValue(choiceCount));\n          break;\n\n        case ControlCommand.CommandType.Turns:\n          this.state.PushEvaluationStack(\n            new IntValue(this.state.currentTurnIndex + 1)\n          );\n          break;\n\n        case ControlCommand.CommandType.TurnsSince:\n        case ControlCommand.CommandType.ReadCount:\n          let target = this.state.PopEvaluationStack();\n          if (!(target instanceof DivertTargetValue)) {\n            let extraNote = \"\";\n            if (target instanceof IntValue)\n              extraNote =\n                \". Did you accidentally pass a read count ('knot_name') instead of a target ('-> knot_name')?\";\n            this.Error(\n              \"TURNS_SINCE / READ_COUNT expected a divert target (knot, stitch, label name), but saw \" +\n                target +\n                extraNote\n            );\n            break;\n          }\n\n          // var divertTarget = target as DivertTargetValue;\n          let divertTarget = asOrThrows(target, DivertTargetValue);\n          // var container = ContentAtPath (divertTarget.targetPath).correctObj as Container;\n          let container = asOrNull(\n            this.ContentAtPath(divertTarget.targetPath).correctObj,\n            Container\n          );\n\n          let eitherCount;\n          if (container != null) {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = this.state.TurnsSinceForContainer(container);\n            else eitherCount = this.state.VisitCountForContainer(container);\n          } else {\n            if (\n              evalCommand.commandType == ControlCommand.CommandType.TurnsSince\n            )\n              eitherCount = -1;\n            else eitherCount = 0;\n\n            this.Warning(\n              \"Failed to find container for \" +\n                evalCommand.toString() +\n                \" lookup at \" +\n                divertTarget.targetPath.toString()\n            );\n          }\n\n          this.state.PushEvaluationStack(new IntValue(eitherCount));\n          break;\n\n        case ControlCommand.CommandType.Random: {\n          let maxInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          let minInt = asOrNull(this.state.PopEvaluationStack(), IntValue);\n\n          if (minInt == null || minInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for minimum parameter of RANDOM(min, max)\"\n            );\n\n          if (maxInt == null || maxInt instanceof IntValue === false)\n            return this.Error(\n              \"Invalid value for maximum parameter of RANDOM(min, max)\"\n            );\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (maxInt.value === null) {\n            return throwNullException(\"maxInt.value\");\n          }\n          if (minInt.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          // This code is differs a bit from the reference implementation, since\n          // JavaScript has no true integers. Hence integer arithmetics and\n          // interger overflows don't apply here. A loss of precision can\n          // happen with big numbers however.\n          //\n          // The case where 'randomRange' is lower than zero is handled below,\n          // so there's no need to test against Number.MIN_SAFE_INTEGER.\n          let randomRange = maxInt.value - minInt.value + 1;\n          if (!isFinite(randomRange) || randomRange > Number.MAX_SAFE_INTEGER) {\n            randomRange = Number.MAX_SAFE_INTEGER;\n            this.Error(\n              \"RANDOM was called with a range that exceeds the size that ink numbers can use.\"\n            );\n          }\n          if (randomRange <= 0)\n            this.Error(\n              \"RANDOM was called with minimum as \" +\n                minInt.value +\n                \" and maximum as \" +\n                maxInt.value +\n                \". The maximum must be larger\"\n            );\n\n          let resultSeed = this.state.storySeed + this.state.previousRandom;\n          let random = new PRNG(resultSeed);\n\n          let nextRandom = random.next();\n          let chosenValue = (nextRandom % randomRange) + minInt.value;\n          this.state.PushEvaluationStack(new IntValue(chosenValue));\n\n          // Next random number (rather than keeping the Random object around)\n          this.state.previousRandom = nextRandom;\n          break;\n        }\n\n        case ControlCommand.CommandType.SeedRandom:\n          let seed = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          if (seed == null || seed instanceof IntValue === false)\n            return this.Error(\"Invalid value passed to SEED_RANDOM\");\n\n          // Originally a primitive type, but here, can be null.\n          // TODO: Replace by default value?\n          if (seed.value === null) {\n            return throwNullException(\"minInt.value\");\n          }\n\n          this.state.storySeed = seed.value;\n          this.state.previousRandom = 0;\n\n          this.state.PushEvaluationStack(new Void());\n          break;\n\n        case ControlCommand.CommandType.VisitIndex:\n          let count =\n            this.state.VisitCountForContainer(\n              this.state.currentPointer.container\n            ) - 1; // index not count\n          this.state.PushEvaluationStack(new IntValue(count));\n          break;\n\n        case ControlCommand.CommandType.SequenceShuffleIndex:\n          let shuffleIndex = this.NextSequenceShuffleIndex();\n          this.state.PushEvaluationStack(new IntValue(shuffleIndex));\n          break;\n\n        case ControlCommand.CommandType.StartThread:\n          // Handled in main step function\n          break;\n\n        case ControlCommand.CommandType.Done:\n          // We may exist in the context of the initial\n          // act of creating the thread, or in the context of\n          // evaluating the content.\n          if (this.state.callStack.canPopThread) {\n            this.state.callStack.PopThread();\n          }\n\n          // In normal flow - allow safe exit without warning\n          else {\n            this.state.didSafeExit = true;\n\n            // Stop flow in current thread\n            this.state.currentPointer = Pointer.Null;\n          }\n\n          break;\n\n        // Force flow to end completely\n        case ControlCommand.CommandType.End:\n          this.state.ForceEnd();\n          break;\n\n        case ControlCommand.CommandType.ListFromInt:\n          // var intVal = state.PopEvaluationStack () as IntValue;\n          let intVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n          // var listNameVal = state.PopEvaluationStack () as StringValue;\n          let listNameVal = asOrThrows(\n            this.state.PopEvaluationStack(),\n            StringValue\n          );\n\n          if (intVal === null) {\n            throw new StoryException(\n              \"Passed non-integer when creating a list element from a numerical value.\"\n            );\n          }\n\n          let generatedListValue = null;\n\n          if (this.listDefinitions === null) {\n            return throwNullException(\"this.listDefinitions\");\n          }\n          let foundListDef = this.listDefinitions.TryListGetDefinition(\n            listNameVal.value,\n            null\n          );\n          if (foundListDef.exists) {\n            // Originally a primitive type, but here, can be null.\n            // TODO: Replace by default value?\n            if (intVal.value === null) {\n              return throwNullException(\"minInt.value\");\n            }\n\n            let foundItem = foundListDef.result!.TryGetItemWithValue(\n              intVal.value,\n              InkListItem.Null\n            );\n            if (foundItem.exists) {\n              generatedListValue = new ListValue(\n                foundItem.result!,\n                intVal.value\n              );\n            }\n          } else {\n            throw new StoryException(\n              \"Failed to find LIST called \" + listNameVal.value\n            );\n          }\n\n          if (generatedListValue == null) generatedListValue = new ListValue();\n\n          this.state.PushEvaluationStack(generatedListValue);\n          break;\n\n        case ControlCommand.CommandType.ListRange:\n          let max = asOrNull(this.state.PopEvaluationStack(), Value);\n          let min = asOrNull(this.state.PopEvaluationStack(), Value);\n\n          // var targetList = state.PopEvaluationStack () as ListValue;\n          let targetList = asOrNull(this.state.PopEvaluationStack(), ListValue);\n\n          if (targetList === null || min === null || max === null)\n            throw new StoryException(\n              \"Expected list, minimum and maximum for LIST_RANGE\"\n            );\n\n          if (targetList.value === null) {\n            return throwNullException(\"targetList.value\");\n          }\n          let result = targetList.value.ListWithSubRange(\n            min.valueObject,\n            max.valueObject\n          );\n\n          this.state.PushEvaluationStack(new ListValue(result));\n          break;\n\n        case ControlCommand.CommandType.ListRandom: {\n          let listVal = this.state.PopEvaluationStack() as ListValue;\n          if (listVal === null)\n            throw new StoryException(\"Expected list for LIST_RANDOM\");\n\n          let list = listVal.value;\n\n          let newList: InkList | null = null;\n\n          if (list === null) {\n            throw throwNullException(\"list\");\n          }\n          if (list.Count == 0) {\n            newList = new InkList();\n          } else {\n            // Generate a random index for the element to take\n            let resultSeed = this.state.storySeed + this.state.previousRandom;\n            let random = new PRNG(resultSeed);\n\n            let nextRandom = random.next();\n            let listItemIndex = nextRandom % list.Count;\n\n            // This bit is a little different from the original\n            // C# code, since iterators do not work in the same way.\n            // First, we iterate listItemIndex - 1 times, calling next().\n            // The listItemIndex-th time is made outside of the loop,\n            // in order to retrieve the value.\n            let listEnumerator = list.entries();\n            for (let i = 0; i <= listItemIndex - 1; i++) {\n              listEnumerator.next();\n            }\n            let value = listEnumerator.next().value;\n            let randomItem: KeyValuePair<InkListItem, number> = {\n              Key: InkListItem.fromSerializedKey(value[0]),\n              Value: value[1],\n            };\n\n            // Origin list is simply the origin of the one element\n            if (randomItem.Key.originName === null) {\n              return throwNullException(\"randomItem.Key.originName\");\n            }\n            newList = new InkList(randomItem.Key.originName, this);\n            newList.Add(randomItem.Key, randomItem.Value);\n\n            this.state.previousRandom = nextRandom;\n          }\n\n          this.state.PushEvaluationStack(new ListValue(newList));\n          break;\n        }\n\n        default:\n          this.Error(\"unhandled ControlCommand: \" + evalCommand);\n          break;\n      }\n\n      return true;\n    }\n\n    // Variable assignment\n    else if (contentObj instanceof VariableAssignment) {\n      let varAss = contentObj;\n      let assignedVal = this.state.PopEvaluationStack();\n\n      this.state.variablesState.Assign(varAss, assignedVal);\n\n      return true;\n    }\n\n    // Variable reference\n    else if (contentObj instanceof VariableReference) {\n      let varRef = contentObj;\n      let foundValue = null;\n\n      // Explicit read count value\n      if (varRef.pathForCount != null) {\n        let container = varRef.containerForCount;\n        let count = this.state.VisitCountForContainer(container);\n        foundValue = new IntValue(count);\n      }\n\n      // Normal variable reference\n      else {\n        foundValue = this.state.variablesState.GetVariableWithName(varRef.name);\n\n        if (foundValue == null) {\n          this.Warning(\n            \"Variable not found: '\" +\n              varRef.name +\n              \"'. Using default value of 0 (false). This can happen with temporary variables if the declaration hasn't yet been hit. Globals are always given a default value on load if a value doesn't exist in the save state.\"\n          );\n          foundValue = new IntValue(0);\n        }\n      }\n\n      this.state.PushEvaluationStack(foundValue);\n\n      return true;\n    }\n\n    // Native function call\n    else if (contentObj instanceof NativeFunctionCall) {\n      let func = contentObj;\n      let funcParams = this.state.PopEvaluationStack(func.numberOfParameters);\n      let result = func.Call(funcParams);\n      this.state.PushEvaluationStack(result);\n      return true;\n    }\n\n    // No control content, must be ordinary content\n    return false;\n  }\n\n  public ChoosePathString(\n    path: string,\n    resetCallstack = true,\n    args: any[] = []\n  ) {\n    this.IfAsyncWeCant(\"call ChoosePathString right now\");\n    if (this.onChoosePathString !== null) this.onChoosePathString(path, args);\n\n    if (resetCallstack) {\n      this.ResetCallstack();\n    } else {\n      if (this.state.callStack.currentElement.type == PushPopType.Function) {\n        let funcDetail = \"\";\n        let container =\n          this.state.callStack.currentElement.currentPointer.container;\n        if (container != null) {\n          funcDetail = \"(\" + container.path.toString() + \") \";\n        }\n        throw new Error(\n          \"Story was running a function \" +\n            funcDetail +\n            \"when you called ChoosePathString(\" +\n            path +\n            \") - this is almost certainly not not what you want! Full stack trace: \\n\" +\n            this.state.callStack.callStackTrace\n        );\n      }\n    }\n\n    this.state.PassArgumentsToEvaluationStack(args);\n    this.ChoosePath(new Path(path));\n  }\n\n  public IfAsyncWeCant(activityStr: string) {\n    if (this._asyncContinueActive)\n      throw new Error(\n        \"Can't \" +\n          activityStr +\n          \". Story is in the middle of a ContinueAsync(). Make more ContinueAsync() calls or a single Continue() call beforehand.\"\n      );\n  }\n\n  public ChoosePath(p: Path, incrementingTurnIndex: boolean = true) {\n    this.state.SetChosenPath(p, incrementingTurnIndex);\n\n    // Take a note of newly visited containers for read counts etc\n    this.VisitChangedContainersDueToDivert();\n  }\n\n  public ChooseChoiceIndex(choiceIdx: number) {\n    choiceIdx = choiceIdx;\n    let choices = this.currentChoices;\n    this.Assert(\n      choiceIdx >= 0 && choiceIdx < choices.length,\n      \"choice out of range\"\n    );\n\n    let choiceToChoose = choices[choiceIdx];\n    if (this.onMakeChoice !== null) this.onMakeChoice(choiceToChoose);\n\n    if (choiceToChoose.threadAtGeneration === null) {\n      return throwNullException(\"choiceToChoose.threadAtGeneration\");\n    }\n    if (choiceToChoose.targetPath === null) {\n      return throwNullException(\"choiceToChoose.targetPath\");\n    }\n\n    this.state.callStack.currentThread = choiceToChoose.threadAtGeneration;\n\n    this.ChoosePath(choiceToChoose.targetPath);\n  }\n\n  public HasFunction(functionName: string) {\n    try {\n      return this.KnotContainerWithName(functionName) != null;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  public EvaluateFunction(\n    functionName: string,\n    args: any[] = [],\n    returnTextOutput: boolean = false\n  ): Story.EvaluateFunctionTextOutput | any {\n    // EvaluateFunction behaves slightly differently than the C# version.\n    // In C#, you can pass a (second) parameter `out textOutput` to get the\n    // text outputted by the function. This is not possible in js. Instead,\n    // we maintain the regular signature (functionName, args), plus an\n    // optional third parameter returnTextOutput. If set to true, we will\n    // return both the textOutput and the returned value, as an object.\n\n    if (this.onEvaluateFunction !== null)\n      this.onEvaluateFunction(functionName, args);\n\n    this.IfAsyncWeCant(\"evaluate a function\");\n\n    if (functionName == null) {\n      throw new Error(\"Function is null\");\n    } else if (functionName == \"\" || functionName.trim() == \"\") {\n      throw new Error(\"Function is empty or white space.\");\n    }\n\n    let funcContainer = this.KnotContainerWithName(functionName);\n    if (funcContainer == null) {\n      throw new Error(\"Function doesn't exist: '\" + functionName + \"'\");\n    }\n\n    let outputStreamBefore: InkObject[] = [];\n    outputStreamBefore.push(...this.state.outputStream);\n    this._state.ResetOutput();\n\n    this.state.StartFunctionEvaluationFromGame(funcContainer, args);\n\n    // Evaluate the function, and collect the string output\n    let stringOutput = new StringBuilder();\n    while (this.canContinue) {\n      stringOutput.Append(this.Continue());\n    }\n    let textOutput = stringOutput.toString();\n\n    this._state.ResetOutput(outputStreamBefore);\n\n    let result = this.state.CompleteFunctionEvaluationFromGame();\n    if (this.onCompleteEvaluateFunction != null)\n      this.onCompleteEvaluateFunction(functionName, args, textOutput, result);\n\n    return returnTextOutput ? { returned: result, output: textOutput } : result;\n  }\n\n  public EvaluateExpression(exprContainer: Container) {\n    let startCallStackHeight = this.state.callStack.elements.length;\n\n    this.state.callStack.Push(PushPopType.Tunnel);\n\n    this._temporaryEvaluationContainer = exprContainer;\n\n    this.state.GoToStart();\n\n    let evalStackHeight = this.state.evaluationStack.length;\n\n    this.Continue();\n\n    this._temporaryEvaluationContainer = null;\n\n    // Should have fallen off the end of the Container, which should\n    // have auto-popped, but just in case we didn't for some reason,\n    // manually pop to restore the state (including currentPath).\n    if (this.state.callStack.elements.length > startCallStackHeight) {\n      this.state.PopCallStack();\n    }\n\n    let endStackHeight = this.state.evaluationStack.length;\n    if (endStackHeight > evalStackHeight) {\n      return this.state.PopEvaluationStack();\n    } else {\n      return null;\n    }\n  }\n\n  public allowExternalFunctionFallbacks: boolean = false;\n\n  public CallExternalFunction(\n    funcName: string | null,\n    numberOfArguments: number\n  ) {\n    if (funcName === null) {\n      return throwNullException(\"funcName\");\n    }\n    let funcDef = this._externals.get(funcName);\n    let fallbackFunctionContainer = null;\n\n    let foundExternal = typeof funcDef !== \"undefined\";\n\n    if (\n      foundExternal &&\n      !funcDef!.lookAheadSafe &&\n      this._state.inStringEvaluation\n    ) {\n      this.Error(\n        \"External function \" +\n          funcName +\n          ' could not be called because 1) it wasn\\'t marked as lookaheadSafe when BindExternalFunction was called and 2) the story is in the middle of string generation, either because choice text is being generated, or because you have ink like \"hello {func()}\". You can work around this by generating the result of your function into a temporary variable before the string or choice gets generated: ~ temp x = ' +\n          funcName +\n          \"()\"\n      );\n    }\n\n    if (\n      foundExternal &&\n      !funcDef!.lookAheadSafe &&\n      this._stateSnapshotAtLastNewline !== null\n    ) {\n      this._sawLookaheadUnsafeFunctionAfterNewline = true;\n      return;\n    }\n\n    if (!foundExternal) {\n      if (this.allowExternalFunctionFallbacks) {\n        fallbackFunctionContainer = this.KnotContainerWithName(funcName);\n        this.Assert(\n          fallbackFunctionContainer !== null,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound, and fallback ink function could not be found.\"\n        );\n\n        // Divert direct into fallback function and we're done\n        this.state.callStack.Push(\n          PushPopType.Function,\n          undefined,\n          this.state.outputStream.length\n        );\n        this.state.divertedPointer = Pointer.StartOf(fallbackFunctionContainer);\n        return;\n      } else {\n        this.Assert(\n          false,\n          \"Trying to call EXTERNAL function '\" +\n            funcName +\n            \"' which has not been bound (and ink fallbacks disabled).\"\n        );\n      }\n    }\n\n    // Pop arguments\n    let args: any[] = [];\n    for (let i = 0; i < numberOfArguments; ++i) {\n      // var poppedObj = state.PopEvaluationStack () as Value;\n      let poppedObj = asOrThrows(this.state.PopEvaluationStack(), Value);\n      let valueObj = poppedObj.valueObject;\n      args.push(valueObj);\n    }\n\n    // Reverse arguments from the order they were popped,\n    // so they're the right way round again.\n    args.reverse();\n\n    // Run the function!\n    let funcResult = funcDef!.function(args);\n\n    // Convert return value (if any) to the a type that the ink engine can use\n    let returnObj = null;\n    if (funcResult != null) {\n      returnObj = Value.Create(funcResult);\n      this.Assert(\n        returnObj !== null,\n        \"Could not create ink value from returned object of type \" +\n          typeof funcResult\n      );\n    } else {\n      returnObj = new Void();\n    }\n\n    this.state.PushEvaluationStack(returnObj);\n  }\n\n  public BindExternalFunctionGeneral(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean = true\n  ) {\n    this.IfAsyncWeCant(\"bind an external function\");\n    this.Assert(\n      !this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has already been bound.\"\n    );\n    this._externals.set(funcName, {\n      function: func,\n      lookAheadSafe: lookaheadSafe,\n    });\n  }\n\n  public TryCoerce(value: any) {\n    // We're skipping type coercition in this implementation. First of, js\n    // is loosely typed, so it's not that important. Secondly, there is no\n    // clean way (AFAIK) for the user to describe what type of parameters\n    // they expect.\n    return value;\n  }\n\n  public BindExternalFunction(\n    funcName: string,\n    func: Story.ExternalFunction,\n    lookaheadSafe: boolean = false\n  ) {\n    this.Assert(func != null, \"Can't bind a null function\");\n\n    this.BindExternalFunctionGeneral(\n      funcName,\n      (args: any) => {\n        this.Assert(\n          args.length >= func.length,\n          \"External function expected \" + func.length + \" arguments\"\n        );\n\n        let coercedArgs = [];\n        for (let i = 0, l = args.length; i < l; i++) {\n          coercedArgs[i] = this.TryCoerce(args[i]);\n        }\n        return func.apply(null, coercedArgs);\n      },\n      lookaheadSafe\n    );\n  }\n\n  public UnbindExternalFunction(funcName: string) {\n    this.IfAsyncWeCant(\"unbind an external a function\");\n    this.Assert(\n      this._externals.has(funcName),\n      \"Function '\" + funcName + \"' has not been bound.\"\n    );\n    this._externals.delete(funcName);\n  }\n\n  public ValidateExternalBindings(): void;\n  public ValidateExternalBindings(\n    c: Container | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings(\n    o: InkObject | null,\n    missingExternals: Set<string>\n  ): void;\n  public ValidateExternalBindings() {\n    let c: Container | null = null;\n    let o: InkObject | null = null;\n    let missingExternals: Set<string> = arguments[1] || new Set();\n\n    if (arguments[0] instanceof Container) {\n      c = arguments[0];\n    }\n\n    if (arguments[0] instanceof InkObject) {\n      o = arguments[0];\n    }\n\n    if (c === null && o === null) {\n      this.ValidateExternalBindings(\n        this._mainContentContainer,\n        missingExternals\n      );\n      this._hasValidatedExternals = true;\n\n      // No problem! Validation complete\n      if (missingExternals.size == 0) {\n        this._hasValidatedExternals = true;\n      } else {\n        let message = \"Error: Missing function binding for external\";\n        message += missingExternals.size > 1 ? \"s\" : \"\";\n        message += \": '\";\n        message += Array.from(missingExternals).join(\"', '\");\n        message += \"' \";\n        message += this.allowExternalFunctionFallbacks\n          ? \", and no fallback ink function found.\"\n          : \" (ink fallbacks disabled)\";\n\n        this.Error(message);\n      }\n    } else if (c != null) {\n      for (let innerContent of c.content) {\n        let container = innerContent as Container;\n        if (container == null || !container.hasValidName)\n          this.ValidateExternalBindings(innerContent, missingExternals);\n      }\n      for (let [, value] of c.namedContent) {\n        this.ValidateExternalBindings(\n          asOrNull(value, InkObject),\n          missingExternals\n        );\n      }\n    } else if (o != null) {\n      let divert = asOrNull(o, Divert);\n      if (divert && divert.isExternal) {\n        let name = divert.targetPathString;\n        if (name === null) {\n          return throwNullException(\"name\");\n        }\n        if (!this._externals.has(name)) {\n          if (this.allowExternalFunctionFallbacks) {\n            let fallbackFound =\n              this.mainContentContainer.namedContent.has(name);\n            if (!fallbackFound) {\n              missingExternals.add(name);\n            }\n          } else {\n            missingExternals.add(name);\n          }\n        }\n      }\n    }\n  }\n\n  public ObserveVariable(\n    variableName: string,\n    observer: Story.VariableObserver\n  ) {\n    this.IfAsyncWeCant(\"observe a new variable\");\n\n    if (this._variableObservers === null) this._variableObservers = new Map();\n\n    if (!this.state.variablesState.GlobalVariableExistsWithName(variableName))\n      throw new Error(\n        \"Cannot observe variable '\" +\n          variableName +\n          \"' because it wasn't declared in the ink story.\"\n      );\n\n    if (this._variableObservers.has(variableName)) {\n      this._variableObservers.get(variableName)!.push(observer);\n    } else {\n      this._variableObservers.set(variableName, [observer]);\n    }\n  }\n\n  public ObserveVariables(\n    variableNames: string[],\n    observers: Story.VariableObserver[]\n  ) {\n    for (let i = 0, l = variableNames.length; i < l; i++) {\n      this.ObserveVariable(variableNames[i], observers[i]);\n    }\n  }\n\n  public RemoveVariableObserver(\n    observer?: Story.VariableObserver,\n    specificVariableName?: string\n  ) {\n    // A couple of things to know about this method:\n    //\n    // 1. Since `RemoveVariableObserver` is exposed to the JavaScript world,\n    //    optionality is marked as `undefined` rather than `null`.\n    //    To keep things simple, null-checks are performed using regular\n    //    equality operators, where undefined == null.\n    //\n    // 2. Since C# delegates are translated to arrays of functions,\n    //    -= becomes a call to splice and null-checks are replaced by\n    //    emptiness-checks.\n    //\n    this.IfAsyncWeCant(\"remove a variable observer\");\n\n    if (this._variableObservers === null) return;\n\n    if (specificVariableName != null) {\n      if (this._variableObservers.has(specificVariableName)) {\n        if (observer != null) {\n          let variableObservers =\n            this._variableObservers.get(specificVariableName);\n          if (variableObservers != null) {\n            variableObservers.splice(variableObservers.indexOf(observer), 1);\n            if (variableObservers.length === 0) {\n              this._variableObservers.delete(specificVariableName);\n            }\n          }\n        } else {\n          this._variableObservers.delete(specificVariableName);\n        }\n      }\n    } else if (observer != null) {\n      let keys = this._variableObservers.keys();\n      for (let varName of keys) {\n        let variableObservers = this._variableObservers.get(varName);\n        if (variableObservers != null) {\n          variableObservers.splice(variableObservers.indexOf(observer), 1);\n          if (variableObservers.length === 0) {\n            this._variableObservers.delete(varName);\n          }\n        }\n      }\n    }\n  }\n\n  public VariableStateDidChangeEvent(\n    variableName: string,\n    newValueObj: InkObject\n  ) {\n    if (this._variableObservers === null) return;\n\n    let observers = this._variableObservers.get(variableName);\n    if (typeof observers !== \"undefined\") {\n      if (!(newValueObj instanceof Value)) {\n        throw new Error(\n          \"Tried to get the value of a variable that isn't a standard type\"\n        );\n      }\n      // var val = newValueObj as Value;\n      let val = asOrThrows(newValueObj, Value);\n\n      for (let observer of observers) {\n        observer(variableName, val.valueObject);\n      }\n    }\n  }\n\n  get globalTags() {\n    return this.TagsAtStartOfFlowContainerWithPathString(\"\");\n  }\n\n  public TagsForContentAtPath(path: string) {\n    return this.TagsAtStartOfFlowContainerWithPathString(path);\n  }\n\n  public TagsAtStartOfFlowContainerWithPathString(pathString: string) {\n    let path = new Path(pathString);\n\n    let flowContainer = this.ContentAtPath(path).container;\n    if (flowContainer === null) {\n      return throwNullException(\"flowContainer\");\n    }\n    while (true) {\n      let firstContent: InkObject = flowContainer.content[0];\n      if (firstContent instanceof Container) flowContainer = firstContent;\n      else break;\n    }\n\n    let inTag = false;\n    let tags: string[] | null = null;\n\n    for (let c of flowContainer.content) {\n      // var tag = c as Runtime.Tag;\n      let command = asOrNull(c, ControlCommand);\n\n      if (command != null) {\n        if (command.commandType == ControlCommand.CommandType.BeginTag) {\n          inTag = true;\n        } else if (command.commandType == ControlCommand.CommandType.EndTag) {\n          inTag = false;\n        }\n      } else if (inTag) {\n        let str = asOrNull(c, StringValue);\n        if (str !== null) {\n          if (tags === null) tags = [];\n          if (str.value !== null) tags.push(str.value);\n        } else {\n          this.Error(\n            \"Tag contained non-text content. Only plain text is allowed when using globalTags or TagsAtContentPath. If you want to evaluate dynamic content, you need to use story.Continue().\"\n          );\n        }\n      } else {\n        break;\n      }\n    }\n\n    return tags;\n  }\n\n  public BuildStringOfHierarchy() {\n    let sb = new StringBuilder();\n\n    this.mainContentContainer.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n\n    return sb.toString();\n  }\n\n  public BuildStringOfContainer(container: Container) {\n    let sb = new StringBuilder();\n    container.BuildStringOfHierarchy(\n      sb,\n      0,\n      this.state.currentPointer.Resolve()\n    );\n    return sb.toString();\n  }\n\n  public NextContent() {\n    this.state.previousPointer = this.state.currentPointer.copy();\n\n    if (!this.state.divertedPointer.isNull) {\n      this.state.currentPointer = this.state.divertedPointer.copy();\n      this.state.divertedPointer = Pointer.Null;\n\n      this.VisitChangedContainersDueToDivert();\n\n      if (!this.state.currentPointer.isNull) {\n        return;\n      }\n    }\n\n    let successfulPointerIncrement = this.IncrementContentPointer();\n\n    if (!successfulPointerIncrement) {\n      let didPop = false;\n\n      if (this.state.callStack.CanPop(PushPopType.Function)) {\n        this.state.PopCallStack(PushPopType.Function);\n\n        if (this.state.inExpressionEvaluation) {\n          this.state.PushEvaluationStack(new Void());\n        }\n\n        didPop = true;\n      } else if (this.state.callStack.canPopThread) {\n        this.state.callStack.PopThread();\n\n        didPop = true;\n      } else {\n        this.state.TryExitFunctionEvaluationFromGame();\n      }\n\n      if (didPop && !this.state.currentPointer.isNull) {\n        this.NextContent();\n      }\n    }\n  }\n\n  public IncrementContentPointer() {\n    let successfulIncrement = true;\n\n    let pointer = this.state.callStack.currentElement.currentPointer.copy();\n    pointer.index++;\n\n    if (pointer.container === null) {\n      return throwNullException(\"pointer.container\");\n    }\n    while (pointer.index >= pointer.container.content.length) {\n      successfulIncrement = false;\n\n      // Container nextAncestor = pointer.container.parent as Container;\n      let nextAncestor = asOrNull(pointer.container.parent, Container);\n      if (nextAncestor instanceof Container === false) {\n        break;\n      }\n\n      let indexInAncestor = nextAncestor!.content.indexOf(pointer.container);\n      if (indexInAncestor == -1) {\n        break;\n      }\n\n      pointer = new Pointer(nextAncestor, indexInAncestor);\n\n      pointer.index++;\n\n      successfulIncrement = true;\n      if (pointer.container === null) {\n        return throwNullException(\"pointer.container\");\n      }\n    }\n\n    if (!successfulIncrement) pointer = Pointer.Null;\n\n    this.state.callStack.currentElement.currentPointer = pointer.copy();\n\n    return successfulIncrement;\n  }\n\n  public TryFollowDefaultInvisibleChoice() {\n    let allChoices = this._state.currentChoices;\n\n    let invisibleChoices = allChoices.filter((c) => c.isInvisibleDefault);\n\n    if (\n      invisibleChoices.length == 0 ||\n      allChoices.length > invisibleChoices.length\n    )\n      return false;\n\n    let choice = invisibleChoices[0];\n\n    if (choice.targetPath === null) {\n      return throwNullException(\"choice.targetPath\");\n    }\n\n    if (choice.threadAtGeneration === null) {\n      return throwNullException(\"choice.threadAtGeneration\");\n    }\n\n    this.state.callStack.currentThread = choice.threadAtGeneration;\n\n    if (this._stateSnapshotAtLastNewline !== null) {\n      this.state.callStack.currentThread = this.state.callStack.ForkThread();\n    }\n\n    this.ChoosePath(choice.targetPath, false);\n\n    return true;\n  }\n\n  public NextSequenceShuffleIndex() {\n    // var numElementsIntVal = state.PopEvaluationStack () as IntValue;\n    let numElementsIntVal = asOrNull(this.state.PopEvaluationStack(), IntValue);\n    if (!(numElementsIntVal instanceof IntValue)) {\n      this.Error(\"expected number of elements in sequence for shuffle index\");\n      return 0;\n    }\n\n    let seqContainer = this.state.currentPointer.container;\n    if (seqContainer === null) {\n      return throwNullException(\"seqContainer\");\n    }\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (numElementsIntVal.value === null) {\n      return throwNullException(\"numElementsIntVal.value\");\n    }\n    let numElements = numElementsIntVal.value;\n\n    // var seqCountVal = state.PopEvaluationStack () as IntValue;\n    let seqCountVal = asOrThrows(this.state.PopEvaluationStack(), IntValue);\n    let seqCount = seqCountVal.value;\n\n    // Originally a primitive type, but here, can be null.\n    // TODO: Replace by default value?\n    if (seqCount === null) {\n      return throwNullException(\"seqCount\");\n    }\n\n    let loopIndex = seqCount / numElements;\n    let iterationIndex = seqCount % numElements;\n\n    let seqPathStr = seqContainer.path.toString();\n    let sequenceHash = 0;\n    for (let i = 0, l = seqPathStr.length; i < l; i++) {\n      sequenceHash += seqPathStr.charCodeAt(i) || 0;\n    }\n    let randomSeed = sequenceHash + loopIndex + this.state.storySeed;\n    let random = new PRNG(Math.floor(randomSeed));\n\n    let unpickedIndices = [];\n    for (let i = 0; i < numElements; ++i) {\n      unpickedIndices.push(i);\n    }\n\n    for (let i = 0; i <= iterationIndex; ++i) {\n      let chosen = random.next() % unpickedIndices.length;\n      let chosenIndex = unpickedIndices[chosen];\n      unpickedIndices.splice(chosen, 1);\n\n      if (i == iterationIndex) {\n        return chosenIndex;\n      }\n    }\n\n    throw new Error(\"Should never reach here\");\n  }\n\n  public Error(message: string, useEndLineNumber = false): never {\n    let e = new StoryException(message);\n    e.useEndLineNumber = useEndLineNumber;\n    throw e;\n  }\n\n  public Warning(message: string) {\n    this.AddError(message, true);\n  }\n\n  public AddError(\n    message: string,\n    isWarning = false,\n    useEndLineNumber = false\n  ) {\n    let dm = this.currentDebugMetadata;\n\n    let errorTypeStr = isWarning ? \"WARNING\" : \"ERROR\";\n\n    if (dm != null) {\n      let lineNum = useEndLineNumber ? dm.endLineNumber : dm.startLineNumber;\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": '\" +\n        dm.fileName +\n        \"' line \" +\n        lineNum +\n        \": \" +\n        message;\n    } else if (!this.state.currentPointer.isNull) {\n      message =\n        \"RUNTIME \" +\n        errorTypeStr +\n        \": (\" +\n        this.state.currentPointer +\n        \"): \" +\n        message;\n    } else {\n      message = \"RUNTIME \" + errorTypeStr + \": \" + message;\n    }\n\n    this.state.AddError(message, isWarning);\n\n    // In a broken state don't need to know about any other errors.\n    if (!isWarning) this.state.ForceEnd();\n  }\n\n  public Assert(condition: boolean, message: string | null = null) {\n    if (condition == false) {\n      if (message == null) {\n        message = \"Story assert\";\n      }\n\n      throw new Error(message + \" \" + this.currentDebugMetadata);\n    }\n  }\n\n  get currentDebugMetadata(): DebugMetadata | null {\n    let dm: DebugMetadata | null;\n\n    let pointer = this.state.currentPointer;\n    if (!pointer.isNull && pointer.Resolve() !== null) {\n      dm = pointer.Resolve()!.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    for (let i = this.state.callStack.elements.length - 1; i >= 0; --i) {\n      pointer = this.state.callStack.elements[i].currentPointer;\n      if (!pointer.isNull && pointer.Resolve() !== null) {\n        dm = pointer.Resolve()!.debugMetadata;\n        if (dm !== null) {\n          return dm;\n        }\n      }\n    }\n\n    for (let i = this.state.outputStream.length - 1; i >= 0; --i) {\n      let outputObj = this.state.outputStream[i];\n      dm = outputObj.debugMetadata;\n      if (dm !== null) {\n        return dm;\n      }\n    }\n\n    return null;\n  }\n\n  get mainContentContainer() {\n    if (this._temporaryEvaluationContainer) {\n      return this._temporaryEvaluationContainer;\n    } else {\n      return this._mainContentContainer;\n    }\n  }\n\n  /**\n   * `_mainContentContainer` is almost guaranteed to be set in the\n   * constructor, unless the json is malformed.\n   */\n  private _mainContentContainer!: Container;\n  private _listDefinitions: ListDefinitionsOrigin | null = null;\n\n  private _externals: Map<string, Story.ExternalFunctionDef>;\n  private _variableObservers: Map<string, Story.VariableObserver[]> | null =\n    null;\n  private _hasValidatedExternals: boolean = false;\n\n  private _temporaryEvaluationContainer: Container | null = null;\n\n  /**\n   * `state` is almost guaranteed to be set in the constructor, unless\n   * using the compiler-specific constructor which will likely not be used in\n   * the real world.\n   */\n  private _state!: StoryState;\n\n  private _asyncContinueActive: boolean = false;\n  private _stateSnapshotAtLastNewline: StoryState | null = null;\n  private _sawLookaheadUnsafeFunctionAfterNewline: boolean = false;\n\n  private _recursiveContinueCount: number = 0;\n\n  private _asyncSaving: boolean = false;\n\n  private _profiler: any | null = null; // TODO: Profiler\n}\n\nexport namespace Story {\n  export enum OutputStateChange {\n    NoChange = 0,\n    ExtendedBeyondNewline = 1,\n    NewlineRemoved = 2,\n  }\n\n  export interface EvaluateFunctionTextOutput {\n    returned: any;\n    output: string;\n  }\n\n  export interface ExternalFunctionDef {\n    function: ExternalFunction;\n    lookAheadSafe: boolean;\n  }\n\n  export type VariableObserver = (variableName: string, newValue: any) => void;\n  export type ExternalFunction = (...args: any) => any;\n}\n","import { AuthorWarning } from \"./AuthorWarning\";\nimport { ConstantDeclaration } from \"./Declaration/ConstantDeclaration\";\nimport { Container as RuntimeContainer } from \"../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../engine/ControlCommand\";\nimport { ErrorHandler } from \"../../../engine/Error\";\nimport { ErrorType } from \"../ErrorType\";\nimport { Expression } from \"./Expression/Expression\";\nimport { ExternalDeclaration } from \"./Declaration/ExternalDeclaration\";\nimport { FlowBase } from \"./Flow/FlowBase\";\nimport { FlowLevel } from \"./Flow/FlowLevel\";\nimport { IncludedFile } from \"./IncludedFile\";\nimport { ListDefinition } from \"./List/ListDefinition\";\nimport { ListElementDefinition } from \"./List/ListElementDefinition\";\nimport { ParsedObject } from \"./Object\";\nimport { Story as RuntimeStory } from \"../../../engine/Story\";\nimport { SymbolType } from \"./SymbolType\";\nimport { Text } from \"./Text\";\nimport { VariableAssignment as RuntimeVariableAssignment } from \"../../../engine/VariableAssignment\";\nimport { Identifier } from \"./Identifier\";\nimport { asOrNull } from \"../../../engine/TypeAssertion\";\nimport { ClosestFlowBase } from \"./Flow/ClosestFlowBase\";\nimport { FunctionCall } from \"./FunctionCall\";\nimport { Path } from \"./Path\";\nimport { VariableAssignment } from \"./Variable/VariableAssignment\";\n\nexport class Story extends FlowBase {\n  public static readonly IsReservedKeyword = (name?: string): boolean => {\n    switch (name) {\n      case \"true\":\n      case \"false\":\n      case \"not\":\n      case \"return\":\n      case \"else\":\n      case \"VAR\":\n      case \"CONST\":\n      case \"temp\":\n      case \"LIST\":\n      case \"function\":\n        return true;\n    }\n\n    return false;\n  };\n\n  private _errorHandler: ErrorHandler | null = null;\n  private _hadError: boolean = false;\n  private _hadWarning: boolean = false;\n  private _dontFlattenContainers: Set<RuntimeContainer> = new Set();\n  private _listDefs: Map<string, ListDefinition> = new Map();\n\n  get flowLevel(): FlowLevel {\n    return FlowLevel.Story;\n  }\n\n  get hadError(): boolean {\n    return this._hadError;\n  }\n\n  get hadWarning(): boolean {\n    return this._hadWarning;\n  }\n\n  public constants: Map<string, Expression> = new Map();\n  public externals: Map<string, ExternalDeclaration> = new Map();\n\n  // Build setting for exporting:\n  // When true, the visit count for *all* knots, stitches, choices,\n  // and gathers is counted. When false, only those that are direclty\n  // referenced by the ink are recorded. Use this flag to allow game-side\n  // querying of  arbitrary knots/stitches etc.\n  // Storing all counts is more robust and future proof (updates to the story file\n  // that reference previously uncounted visits are possible, but generates a much\n  // larger safe file, with a lot of potentially redundant counts.\n  public countAllVisits: boolean = false;\n\n  constructor(toplevelObjects: ParsedObject[], isInclude: boolean = false) {\n    // Don't do anything much on construction, leave it lightweight until\n    // the ExportRuntime method is called.\n    super(null, toplevelObjects, null, false, isInclude);\n  }\n\n  get typeName(): string {\n    return \"Story\";\n  }\n\n  // Before this function is called, we have IncludedFile objects interspersed\n  // in our content wherever an include statement was.\n  // So that the include statement can be added in a sensible place (e.g. the\n  // top of the file) without side-effects of jumping into a knot that was\n  // defined in that include, we separate knots and stitches from anything\n  // else defined at the top scope of the included file.\n  //\n  // Algorithm: For each IncludedFile we find, split its contents into\n  // knots/stiches and any other content. Insert the normal content wherever\n  // the include statement was, and append the knots/stitches to the very\n  // end of the main story.\n  public PreProcessTopLevelObjects(topLevelContent: ParsedObject[]): void {\n    super.PreProcessTopLevelObjects(topLevelContent);\n\n    const flowsFromOtherFiles = [];\n\n    // Inject included files\n    for (let obj of topLevelContent) {\n      if (obj instanceof IncludedFile) {\n        const file: IncludedFile = obj;\n\n        // Remove the IncludedFile itself\n        const posOfObj = topLevelContent.indexOf(obj);\n        topLevelContent.splice(posOfObj, 1);\n\n        // When an included story fails to load, the include\n        // line itself is still valid, so we have to handle it here\n        if (file.includedStory) {\n          const nonFlowContent: ParsedObject[] = [];\n          const subStory = file.includedStory;\n          // Allow empty file\n          if (subStory.content != null) {\n            for (const subStoryObj of subStory.content) {\n              if (subStoryObj instanceof FlowBase) {\n                flowsFromOtherFiles.push(subStoryObj);\n              } else {\n                nonFlowContent.push(subStoryObj);\n              }\n            }\n\n            // Add newline on the end of the include\n            nonFlowContent.push(new Text(\"\\n\"));\n\n            // Add contents of the file in its place\n            topLevelContent.splice(posOfObj, 0, ...nonFlowContent);\n\n            // Skip past the content of this sub story\n            // (since it will already have recursively included\n            //  any lines from other files)\n          }\n        }\n\n        // Include object has been removed, with possible content inserted,\n        // and position of 'i' will have been determined already.\n        continue;\n      }\n    }\n\n    // Add the flows we collected from the included files to the\n    // end of our list of our content\n    topLevelContent.splice(0, 0, ...flowsFromOtherFiles);\n  }\n\n  public readonly ExportRuntime = (\n    errorHandler: ErrorHandler | null = null\n  ): RuntimeStory | null => {\n    this._errorHandler = errorHandler;\n\n    // Find all constants before main export begins, so that VariableReferences know\n    // whether to generate a runtime variable reference or the literal value\n    this.constants = new Map();\n    for (const constDecl of this.FindAll(ConstantDeclaration)()) {\n      // Check for duplicate definitions\n      const existingDefinition: Expression = this.constants.get(\n        constDecl.constantName!\n      ) as any;\n\n      if (existingDefinition) {\n        if (!existingDefinition.Equals(constDecl.expression)) {\n          const errorMsg = `CONST '${constDecl.constantName}' has been redefined with a different value. Multiple definitions of the same CONST are valid so long as they contain the same value. Initial definition was on ${existingDefinition.debugMetadata}.`;\n          this.Error(errorMsg, constDecl, false);\n        }\n      }\n\n      this.constants.set(constDecl.constantName!, constDecl.expression);\n    }\n\n    // List definitions are treated like constants too - they should be usable\n    // from other variable declarations.\n    this._listDefs = new Map();\n    for (const listDef of this.FindAll<ListDefinition>(ListDefinition)()) {\n      if (listDef.identifier?.name) {\n        this._listDefs.set(listDef.identifier?.name, listDef);\n      }\n    }\n\n    this.externals = new Map();\n\n    // Resolution of weave point names has to come first, before any runtime code generation\n    // since names have to be ready before diverts start getting created.\n    // (It used to be done in the constructor for a weave, but didn't allow us to generate\n    // errors when name resolution failed.)\n    this.ResolveWeavePointNaming();\n\n    // Get default implementation of runtimeObject, which calls ContainerBase's generation method\n    const rootContainer = this.runtimeObject as RuntimeContainer;\n\n    // Export initialisation of global variables\n    // TODO: We *could* add this as a declarative block to the story itself...\n    const variableInitialisation = new RuntimeContainer();\n    variableInitialisation.AddContent(RuntimeControlCommand.EvalStart());\n\n    // Global variables are those that are local to the story and marked as global\n    const runtimeLists = [];\n    for (const [key, value] of this.variableDeclarations) {\n      if (value.isGlobalDeclaration) {\n        if (value.listDefinition) {\n          this._listDefs.set(key, value.listDefinition);\n          variableInitialisation.AddContent(\n            value.listDefinition.runtimeObject!\n          );\n\n          runtimeLists.push(value.listDefinition.runtimeListDefinition);\n        } else {\n          if (!value.expression) {\n            throw new Error();\n          }\n          value.expression.GenerateIntoContainer(variableInitialisation);\n        }\n\n        const runtimeVarAss = new RuntimeVariableAssignment(key, true);\n        runtimeVarAss.isGlobal = true;\n        variableInitialisation.AddContent(runtimeVarAss);\n      }\n    }\n\n    variableInitialisation.AddContent(RuntimeControlCommand.EvalEnd());\n    variableInitialisation.AddContent(RuntimeControlCommand.End());\n\n    if (this.variableDeclarations.size > 0) {\n      variableInitialisation.name = \"global decl\";\n      rootContainer.AddToNamedContentOnly(variableInitialisation);\n    }\n\n    // Signal that it's safe to exit without error, even if there are no choices generated\n    // (this only happens at the end of top level content that isn't in any particular knot)\n    rootContainer.AddContent(RuntimeControlCommand.Done());\n\n    // Replace runtimeObject with Story object instead of the Runtime.Container generated by Parsed.ContainerBase\n    const runtimeStory = new RuntimeStory(rootContainer, runtimeLists);\n\n    this.runtimeObject = runtimeStory;\n\n    if (this.hadError) {\n      return null;\n    }\n\n    // Optimisation step - inline containers that can be\n    this.FlattenContainersIn(rootContainer);\n\n    // Now that the story has been fulled parsed into a hierarchy,\n    // and the derived runtime hierarchy has been built, we can\n    // resolve referenced symbols such as variables and paths.\n    // e.g. for paths \" -> knotName --> stitchName\" into an INKPath (knotName.stitchName)\n    // We don't make any assumptions that the INKPath follows the same\n    // conventions as the script format, so we resolve to actual objects before\n    // translating into an INKPath. (This also allows us to choose whether\n    // we want the paths to be absolute)\n    this.ResolveReferences(this);\n\n    if (this.hadError) {\n      return null;\n    }\n\n    runtimeStory.ResetState();\n\n    return runtimeStory;\n  };\n\n  public readonly ResolveList = (listName: string): ListDefinition | null => {\n    let list: ListDefinition | null | undefined = this._listDefs.get(listName);\n    if (!list) {\n      return null;\n    }\n\n    return list;\n  };\n\n  public readonly ResolveListItem = (\n    listName: string | null,\n    itemName: string,\n    source: ParsedObject | null = null\n  ): ListElementDefinition | null => {\n    let listDef: ListDefinition | null | undefined = null;\n\n    // Search a specific list if we know its name (i.e. the form listName.itemName)\n    if (listName) {\n      if (!(listDef = this._listDefs.get(listName))) {\n        return null;\n      }\n\n      return listDef.ItemNamed(itemName);\n    } else {\n      // Otherwise, try to search all lists\n\n      let foundItem: ListElementDefinition | null = null;\n      let originalFoundList: ListDefinition | null = null;\n\n      for (const [, value] of this._listDefs.entries()) {\n        const itemInThisList = value.ItemNamed(itemName);\n        if (itemInThisList) {\n          if (foundItem) {\n            this.Error(\n              `Ambiguous item name '${itemName}' found in multiple sets, including ${\n                originalFoundList!.identifier\n              } and ${value!.identifier}`,\n              source,\n              false\n            );\n          } else {\n            foundItem = itemInThisList;\n            originalFoundList = value!;\n          }\n        }\n      }\n\n      return foundItem;\n    }\n  };\n\n  public readonly FlattenContainersIn = (container: RuntimeContainer): void => {\n    // Need to create a collection to hold the inner containers\n    // because otherwise we'd end up modifying during iteration\n    const innerContainers = new Set<RuntimeContainer>();\n    if (container.content) {\n      for (const c of container.content) {\n        const innerContainer = asOrNull(c, RuntimeContainer);\n        if (innerContainer) {\n          innerContainers.add(innerContainer);\n        }\n      }\n    }\n\n    // Can't flatten the named inner containers, but we can at least\n    // iterate through their children\n    if (container.namedContent) {\n      for (const [, value] of container.namedContent) {\n        const namedInnerContainer = asOrNull(value, RuntimeContainer);\n        if (namedInnerContainer) {\n          innerContainers.add(namedInnerContainer);\n        }\n      }\n    }\n\n    for (const innerContainer of innerContainers) {\n      this.TryFlattenContainer(innerContainer);\n      this.FlattenContainersIn(innerContainer);\n    }\n  };\n\n  public readonly TryFlattenContainer = (container: RuntimeContainer): void => {\n    if (\n      (container.namedContent && container.namedContent.size > 0) ||\n      container.hasValidName ||\n      this._dontFlattenContainers.has(container)\n    ) {\n      return;\n    }\n\n    // Inline all the content in container into the parent\n    const parentContainer = asOrNull(container.parent, RuntimeContainer);\n    if (parentContainer) {\n      let contentIdx = parentContainer.content.indexOf(container);\n      parentContainer.content.splice(contentIdx, 1);\n\n      const dm = container.ownDebugMetadata;\n\n      if (container.content) {\n        for (const innerContent of container.content) {\n          innerContent.parent = null;\n          if (dm !== null && innerContent.ownDebugMetadata === null) {\n            innerContent.debugMetadata = dm;\n          }\n\n          parentContainer.InsertContent(innerContent, contentIdx);\n          contentIdx += 1;\n        }\n      }\n    }\n  };\n\n  public readonly Error = (\n    message: string,\n    source: ParsedObject | null | undefined,\n    isWarning: boolean | null | undefined\n  ) => {\n    let errorType: ErrorType = isWarning ? ErrorType.Warning : ErrorType.Error;\n\n    let sb = \"\";\n    if (source instanceof AuthorWarning) {\n      sb += \"TODO: \";\n      errorType = ErrorType.Author;\n    } else if (isWarning) {\n      sb += \"WARNING: \";\n    } else {\n      sb += \"ERROR: \";\n    }\n\n    if (\n      source &&\n      source.debugMetadata !== null &&\n      source.debugMetadata.startLineNumber >= 1\n    ) {\n      if (source.debugMetadata.fileName != null) {\n        sb += `'${source.debugMetadata.fileName}' `;\n      }\n\n      sb += `line ${source.debugMetadata.startLineNumber}: `;\n    }\n\n    sb += message;\n\n    message = sb;\n\n    if (this._errorHandler !== null) {\n      this._errorHandler(message, errorType);\n    } else {\n      throw new Error(message);\n    }\n\n    this._hadError = errorType === ErrorType.Error;\n    this._hadWarning = errorType === ErrorType.Warning;\n  };\n\n  public readonly ResetError = (): void => {\n    this._hadError = false;\n    this._hadWarning = false;\n  };\n\n  public readonly IsExternal = (namedFuncTarget: string): boolean =>\n    this.externals.has(namedFuncTarget);\n\n  public readonly AddExternal = (decl: ExternalDeclaration): void => {\n    if (this.externals.has(decl.name!)) {\n      this.Error(\n        `Duplicate EXTERNAL definition of '${decl.name}'`,\n        decl,\n        false\n      );\n    } else if (decl.name) {\n      this.externals.set(decl.name, decl);\n    }\n  };\n\n  public readonly DontFlattenContainer = (\n    container: RuntimeContainer\n  ): void => {\n    this._dontFlattenContainers.add(container);\n  };\n\n  public readonly NameConflictError = (\n    obj: ParsedObject,\n    name: string,\n    existingObj: ParsedObject,\n    typeNameToPrint: string\n  ): void => {\n    obj.Error(\n      `${typeNameToPrint} '${name}': name has already been used for a ${existingObj.typeName.toLowerCase()} on ${\n        existingObj.debugMetadata\n      }`\n    );\n  };\n\n  // Check given symbol type against everything that's of a higher priority in the ordered SymbolType enum (above).\n  // When the given symbol type level is reached, we early-out / return.\n  public readonly CheckForNamingCollisions = (\n    obj: ParsedObject,\n    identifier: Identifier,\n    symbolType: SymbolType,\n    typeNameOverride: string = \"\"\n  ): void => {\n    const typeNameToPrint: string = typeNameOverride || obj.typeName;\n    if (Story.IsReservedKeyword(identifier?.name)) {\n      obj.Error(\n        `'${identifier}' cannot be used for the name of a ${typeNameToPrint.toLowerCase()} because it's a reserved keyword`\n      );\n      return;\n    } else if (FunctionCall.IsBuiltIn(identifier?.name || \"\")) {\n      obj.Error(\n        `'${identifier}' cannot be used for the name of a ${typeNameToPrint.toLowerCase()} because it's a built in function`\n      );\n\n      return;\n    }\n\n    // Top level knots\n    const maybeKnotOrFunction = this.ContentWithNameAtLevel(\n      identifier?.name || \"\",\n      FlowLevel.Knot\n    );\n\n    const knotOrFunction = asOrNull(maybeKnotOrFunction, FlowBase);\n\n    if (\n      knotOrFunction &&\n      (knotOrFunction !== obj || symbolType === SymbolType.Arg)\n    ) {\n      this.NameConflictError(\n        obj,\n        identifier?.name || \"\",\n        knotOrFunction,\n        typeNameToPrint\n      );\n      return;\n    }\n\n    if (symbolType < SymbolType.List) {\n      return;\n    }\n\n    // Lists\n    for (const [key, value] of this._listDefs) {\n      if (\n        identifier?.name === key &&\n        obj !== value &&\n        value.variableAssignment !== obj\n      ) {\n        this.NameConflictError(obj, identifier?.name, value, typeNameToPrint);\n      }\n\n      // We don't check for conflicts between individual elements in\n      // different lists because they are namespaced.\n      if (!(obj instanceof ListElementDefinition)) {\n        for (const item of value.itemDefinitions) {\n          if (identifier?.name === item.name) {\n            this.NameConflictError(\n              obj,\n              identifier?.name || \"\",\n              item,\n              typeNameToPrint\n            );\n          }\n        }\n      }\n    }\n\n    // Don't check for VAR->VAR conflicts because that's handled separately\n    // (necessary since checking looks up in a dictionary)\n    if (symbolType <= SymbolType.Var) {\n      return;\n    }\n\n    // Global variable collision\n    const varDecl: VariableAssignment | null =\n      (identifier?.name && this.variableDeclarations.get(identifier?.name)) ||\n      null;\n    if (\n      varDecl &&\n      varDecl !== obj &&\n      varDecl.isGlobalDeclaration &&\n      varDecl.listDefinition == null\n    ) {\n      this.NameConflictError(\n        obj,\n        identifier?.name || \"\",\n        varDecl,\n        typeNameToPrint\n      );\n    }\n\n    if (symbolType < SymbolType.SubFlowAndWeave) {\n      return;\n    }\n\n    // Stitches, Choices and Gathers\n    const path = new Path(identifier);\n    const targetContent = path.ResolveFromContext(obj);\n    if (targetContent && targetContent !== obj) {\n      this.NameConflictError(\n        obj,\n        identifier?.name || \"\",\n        targetContent,\n        typeNameToPrint\n      );\n      return;\n    }\n\n    if (symbolType < SymbolType.Arg) {\n      return;\n    }\n\n    // Arguments to the current flow\n    if (symbolType !== SymbolType.Arg) {\n      let flow: FlowBase | null = asOrNull(obj, FlowBase);\n      if (!flow) {\n        flow = ClosestFlowBase(obj);\n      }\n\n      if (flow && flow.hasParameters && flow.args) {\n        for (const arg of flow.args) {\n          if (arg.identifier?.name === identifier?.name) {\n            obj.Error(\n              `${typeNameToPrint} '${identifier}': name has already been used for a argument to ${flow.identifier} on ${flow.debugMetadata}`\n            );\n\n            return;\n          }\n        }\n      }\n    }\n  };\n}\n","import { Container as RuntimeContainer } from \"../../../../engine/Container\";\nimport { ControlCommand as RuntimeControlCommand } from \"../../../../engine/ControlCommand\";\nimport { Expression } from \"./Expression\";\nimport { ParsedObject } from \"../Object\";\nimport { Text } from \"../Text\";\nimport { asOrNull } from \"../../../../engine/TypeAssertion\";\n\nexport class StringExpression extends Expression {\n  get isSingleString() {\n    if (this.content.length !== 1) {\n      return false;\n    }\n\n    const c = this.content[0];\n    if (!(c instanceof Text)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  constructor(content: ParsedObject[]) {\n    super();\n\n    this.AddContent(content);\n  }\n\n  get typeName(): string {\n    return \"String\";\n  }\n\n  public readonly GenerateIntoContainer = (\n    container: RuntimeContainer\n  ): void => {\n    container.AddContent(RuntimeControlCommand.BeginString());\n\n    for (const c of this.content) {\n      container.AddContent(c.runtimeObject);\n    }\n\n    container.AddContent(RuntimeControlCommand.EndString());\n  };\n\n  public readonly toString = (): string => {\n    let sb = \"\";\n    for (const c of this.content) {\n      sb += c;\n    }\n\n    return sb;\n  };\n\n  // Equals override necessary in order to check for CONST multiple definition equality\n  public Equals(obj: ParsedObject): boolean {\n    const otherStr = asOrNull(obj, StringExpression);\n    if (otherStr === null) {\n      return false;\n    }\n\n    // Can only compare direct equality on single strings rather than\n    // complex string expressions that contain dynamic logic\n    if (!this.isSingleString || !otherStr.isSingleString) {\n      return false;\n    }\n\n    const thisTxt = this.toString();\n    const otherTxt = otherStr.toString();\n    return thisTxt === otherTxt;\n  }\n}\n","import { ParsedObject } from \"./Object\";\nimport { ControlCommand } from \"../../../engine/ControlCommand\";\nimport { InkObject as RuntimeObject } from \"../../../engine/Object\";\n\nexport class Tag extends ParsedObject {\n  public isStart: boolean;\n  public inChoice: boolean;\n\n  constructor(isStart: boolean, inChoice: boolean = false) {\n    super();\n    this.isStart = isStart;\n    this.inChoice = inChoice;\n  }\n  get typeName(): string {\n    return \"Tag\";\n  }\n  public readonly GenerateRuntimeObject = (): RuntimeObject => {\n    if (this.isStart) {\n      return ControlCommand.BeginTag();\n    } else {\n      return ControlCommand.EndTag();\n    }\n  };\n\n  public readonly toString = () => {\n    if (this.isStart) {\n      return \"#StartTag\";\n    } else {\n      return \"#EndTag\";\n    }\n  };\n}\n\nimport { Tag as RuntimeTag } from \"../../../engine/Tag\";\nimport { Wrap } from \"./Wrap\";\nexport class LegacyTag extends Wrap<RuntimeTag> {\n  constructor(tag: RuntimeTag) {\n    super(tag);\n  }\n  get typeName(): string {\n    return \"Tag\";\n  }\n}\n","import { IFileHandler } from \"../IFileHandler\";\n\n// This class replaces upstream's DefaultFileHandler. It doesn't perform any\n// resolution and warns the user about providing a proper file handler when\n// INCLUDE statements are parsed. Since the JavaScript parser can be executed in\n// different environments, we let the user decide which FileHandler is best for\n// their use-case. See PosixFileHandler and JsonFileHandler.\nexport class DefaultFileHandler implements IFileHandler {\n  constructor(public readonly rootPath?: string) {}\n\n  readonly ResolveInkFilename = (): string => {\n    throw Error(\n      \"Can't resolve filename because no FileHandler was provided when instantiating the parser / compiler.\"\n    );\n  };\n\n  readonly LoadInkFileContents = (): string => {\n    throw Error(\n      \"Can't load ink content because no FileHandler was provided when instantiating the parser / compiler.\"\n    );\n  };\n}\n","import { Argument } from \"./ParsedHierarchy/Argument\";\nimport { AuthorWarning } from \"./ParsedHierarchy/AuthorWarning\";\nimport { BinaryExpression } from \"./ParsedHierarchy/Expression/BinaryExpression\";\nimport { CharacterRange } from \"./CharacterRange\";\nimport { CharacterSet } from \"./CharacterSet\";\nimport { Choice } from \"./ParsedHierarchy/Choice\";\nimport { CommentEliminator } from \"./CommentEliminator\";\nimport { Conditional } from \"./ParsedHierarchy/Conditional/Conditional\";\nimport { ConditionalSingleBranch } from \"./ParsedHierarchy/Conditional/ConditionalSingleBranch\";\nimport { ContentList } from \"./ParsedHierarchy/ContentList\";\nimport { ConstantDeclaration } from \"./ParsedHierarchy/Declaration/ConstantDeclaration\";\nimport { CustomFlags } from \"./CustomFlags\";\nimport { DebugMetadata } from \"../../engine/DebugMetadata\";\nimport { Divert } from \"./ParsedHierarchy/Divert/Divert\";\nimport { DivertTarget } from \"./ParsedHierarchy/Divert/DivertTarget\";\nimport { Expression } from \"./ParsedHierarchy/Expression/Expression\";\nimport { ErrorHandler } from \"../../engine/Error\";\nimport { ExternalDeclaration } from \"./ParsedHierarchy/Declaration/ExternalDeclaration\";\nimport { FlowDecl } from \"./FlowDecl\";\nimport { FunctionCall } from \"./ParsedHierarchy/FunctionCall\";\nimport { Gather } from \"./ParsedHierarchy/Gather/Gather\";\nimport { Glue } from \"./ParsedHierarchy/Glue\";\nimport { Glue as RuntimeGlue } from \"../../engine/Glue\";\nimport { IFileHandler } from \"../IFileHandler\";\nimport { IncDecExpression } from \"./ParsedHierarchy/Expression/IncDecExpression\";\nimport { IncludedFile } from \"./ParsedHierarchy/IncludedFile\";\nimport { InfixOperator } from \"./InfixOperator\";\nimport { Knot } from \"./ParsedHierarchy/Knot\";\nimport { List } from \"./ParsedHierarchy/List/List\";\nimport { ListDefinition } from \"./ParsedHierarchy/List/ListDefinition\";\nimport { ListElementDefinition } from \"./ParsedHierarchy/List/ListElementDefinition\";\nimport { MultipleConditionExpression } from \"./ParsedHierarchy/Expression/MultipleConditionExpression\";\nimport { ParsedObject } from \"./ParsedHierarchy/Object\";\nimport { Path } from \"./ParsedHierarchy/Path\";\nimport { ReturnType } from \"./ParsedHierarchy/ReturnType\";\nimport { Sequence } from \"./ParsedHierarchy/Sequence/Sequence\";\nimport { SequenceType } from \"./ParsedHierarchy/Sequence/SequenceType\";\nimport { StatementLevel } from \"./StatementLevel\";\nimport { Stitch } from \"./ParsedHierarchy/Stitch\";\nimport { Story } from \"./ParsedHierarchy/Story\";\nimport { StringExpression } from \"./ParsedHierarchy/Expression/StringExpression\";\nimport {\n  StringParser,\n  SpecificParseRule,\n  ParseRule,\n  ParseRuleReturn,\n  ParseSuccess,\n} from \"./StringParser/StringParser\";\nimport { StringParserElement } from \"./StringParser/StringParserElement\";\nimport { Tag } from \"./ParsedHierarchy/Tag\";\nimport { Text } from \"./ParsedHierarchy/Text\";\nimport { TunnelOnwards } from \"./ParsedHierarchy/TunnelOnwards\";\nimport { VariableAssignment } from \"./ParsedHierarchy/Variable/VariableAssignment\";\nimport { VariableReference } from \"./ParsedHierarchy/Variable/VariableReference\";\nimport { UnaryExpression } from \"./ParsedHierarchy/Expression/UnaryExpression\";\nimport { asOrNull, filterUndef } from \"../../engine/TypeAssertion\";\nimport { Identifier } from \"./ParsedHierarchy/Identifier\";\nimport { NumberExpression } from \"./ParsedHierarchy/Expression/NumberExpression\";\nimport { ErrorType } from \"./ErrorType\";\nimport { DefaultFileHandler } from \"../FileHandler/DefaultFileHandler\";\n\nexport class InkParser extends StringParser {\n  /**\n   * Begin base InkParser section.\n   */\n\n  get fileHandler(): IFileHandler {\n    if (!this._fileHandler) {\n      throw new Error(\"No FileHandler defined\");\n    }\n    return this._fileHandler;\n  }\n\n  set fileHandler(value: IFileHandler) {\n    this._fileHandler = value;\n  }\n\n  constructor(\n    str: string,\n    filename: string | null = null,\n    externalErrorHandler: ErrorHandler | null = null,\n    rootParser: InkParser | null = null,\n    fileHandler: IFileHandler | null = null\n  ) {\n    super(str);\n\n    this._filename = filename;\n    this.RegisterExpressionOperators();\n    this.GenerateStatementLevelRules();\n\n    this.errorHandler = this.OnStringParserError;\n\n    this._externalErrorHandler = externalErrorHandler;\n\n    if (fileHandler === null) {\n      this._fileHandler = new DefaultFileHandler();\n    } else {\n      this._fileHandler = fileHandler;\n    }\n\n    if (rootParser === null) {\n      this._rootParser = this;\n      this._openFilenames = [];\n\n      if (this._filename !== null) {\n        const fullRootInkPath = this.fileHandler.ResolveInkFilename(\n          this._filename\n        );\n        this._openFilenames.push(fullRootInkPath);\n      }\n    } else {\n      this._rootParser = rootParser;\n    }\n  }\n\n  // Main entry point\n  // NOTE: This method is named Parse() in upstream.\n  public readonly ParseStory = (): Story => {\n    const topLevelContent: ParsedObject[] = this.StatementsAtLevel(\n      StatementLevel.Top\n    );\n\n    // Note we used to return null if there were any errors, but this would mean\n    // that include files would return completely empty rather than attempting to\n    // continue with errors. Returning an empty include files meant that anything\n    // that *did* compile successfully would otherwise be ignored, generating way\n    // more errors than necessary.\n    return new Story(topLevelContent, this._rootParser !== this);\n  };\n\n  public readonly SeparatedList = <T extends ParseRule>(\n    mainRule: SpecificParseRule<T>,\n    separatorRule: ParseRule\n  ): ParseRuleReturn[] | null => {\n    const firstElement: ParseRuleReturn = this.Parse(mainRule);\n    if (firstElement === null) {\n      return null;\n    }\n\n    const allElements = [];\n    allElements.push(firstElement);\n\n    do {\n      const nextElementRuleId: number = this.BeginRule();\n      let sep = separatorRule();\n      if (sep === null) {\n        this.FailRule(nextElementRuleId);\n        break;\n      }\n\n      const nextElement = this.Parse(mainRule);\n      if (nextElement === null) {\n        this.FailRule(nextElementRuleId);\n        break;\n      }\n\n      this.SucceedRule(nextElementRuleId);\n      allElements.push(nextElement);\n    } while (true);\n\n    return allElements;\n  };\n\n  public PreProcessInputString(str: string): string {\n    const commentEliminator = new CommentEliminator(str);\n    return commentEliminator.Process();\n  }\n\n  public readonly CreateDebugMetadata = (\n    stateAtStart: StringParserElement | null,\n    stateAtEnd: StringParserElement\n  ): DebugMetadata => {\n    const md = new DebugMetadata();\n    md.startLineNumber = (stateAtStart?.lineIndex || 0) + 1;\n    md.endLineNumber = stateAtEnd.lineIndex + 1;\n    md.startCharacterNumber = (stateAtStart?.characterInLineIndex || 0) + 1;\n    md.endCharacterNumber = stateAtEnd.characterInLineIndex + 1;\n    md.fileName = this._filename;\n\n    return md;\n  };\n\n  public readonly RuleDidSucceed = (\n    result: ParseRuleReturn,\n    stateAtStart: StringParserElement | null,\n    stateAtEnd: StringParserElement\n  ): void => {\n    // Apply DebugMetadata based on the state at the start of the rule\n    // (i.e. use line number as it was at the start of the rule)\n    const parsedObj = asOrNull(result, ParsedObject);\n    if (parsedObj) {\n      parsedObj.debugMetadata = this.CreateDebugMetadata(\n        stateAtStart,\n        stateAtEnd\n      );\n    }\n\n    // A list of objects that doesn't already have metadata?\n    const parsedListObjs: ParsedObject[] | null = Array.isArray(result)\n      ? (result as ParsedObject[])\n      : null;\n    if (parsedListObjs !== null) {\n      for (const parsedListObj of parsedListObjs) {\n        const singleObj = asOrNull(parsedListObj, ParsedObject);\n        if (!singleObj) continue;\n        if (!parsedListObj.hasOwnDebugMetadata) {\n          parsedListObj.debugMetadata = this.CreateDebugMetadata(\n            stateAtStart,\n            stateAtEnd\n          );\n        }\n      }\n    }\n\n    const id = asOrNull(result, Identifier);\n    if (id != null) {\n      id.debugMetadata = this.CreateDebugMetadata(stateAtStart, stateAtEnd);\n    }\n  };\n\n  get parsingStringExpression(): boolean {\n    return this.GetFlag(Number(CustomFlags.ParsingString));\n  }\n\n  set parsingStringExpression(value: boolean) {\n    this.SetFlag(Number(CustomFlags.ParsingString), value);\n  }\n\n  get tagActive(): boolean {\n    return this.GetFlag(Number(CustomFlags.TagActive));\n  }\n\n  set tagActive(value: boolean) {\n    this.SetFlag(Number(CustomFlags.TagActive), value);\n  }\n\n  public readonly OnStringParserError = (\n    message: string,\n    index: number,\n    lineIndex: number = 0,\n    isWarning: boolean = false\n  ): void => {\n    const warningType: string = isWarning ? \"WARNING:\" : \"ERROR:\";\n    let fullMessage: string = warningType;\n\n    if (this._filename !== null) {\n      fullMessage += ` '${this._filename}'`;\n    }\n\n    fullMessage += ` line ${lineIndex + 1}: ${message}`;\n\n    if (this._externalErrorHandler !== null) {\n      this._externalErrorHandler(\n        fullMessage,\n        isWarning ? ErrorType.Warning : ErrorType.Error\n      );\n    } else {\n      throw new Error(fullMessage);\n    }\n  };\n\n  public readonly AuthorWarning = (): AuthorWarning | null => {\n    this.Whitespace();\n\n    const identifier = this.Parse(\n      this.IdentifierWithMetadata\n    ) as unknown as Identifier | null;\n    if (identifier === null || identifier.name !== \"TODO\") {\n      return null;\n    }\n\n    this.Whitespace();\n    this.ParseString(\":\");\n    this.Whitespace();\n\n    const message = this.ParseUntilCharactersFromString(\"\\n\\r\");\n\n    if (message) {\n      return new AuthorWarning(message);\n    }\n\n    return null;\n  };\n\n  /**\n   * End base InkParser section.\n   */\n\n  /**\n   * Begin CharacterRanges section.\n   */\n\n  public static readonly LatinBasic: CharacterRange = CharacterRange.Define(\n    \"\\u0041\",\n    \"\\u007A\",\n    new CharacterSet().AddRange(\"\\u005B\", \"\\u0060\")\n  );\n\n  public static readonly LatinExtendedA: CharacterRange = CharacterRange.Define(\n    \"\\u0100\",\n    \"\\u017F\"\n    // no excludes here\n  );\n\n  public static readonly LatinExtendedB: CharacterRange = CharacterRange.Define(\n    \"\\u0180\",\n    \"\\u024F\"\n    // no excludes here\n  );\n\n  public static readonly Greek: CharacterRange = CharacterRange.Define(\n    \"\\u0370\",\n    \"\\u03FF\",\n    new CharacterSet()\n      .AddRange(\"\\u0378\", \"\\u0385\")\n      .AddCharacters(\"\\u0374\\u0375\\u0378\\u0387\\u038B\\u038D\\u03A2\")\n  );\n\n  public static readonly Cyrillic: CharacterRange = CharacterRange.Define(\n    \"\\u0400\",\n    \"\\u04FF\",\n    new CharacterSet().AddRange(\"\\u0482\", \"\\u0489\")\n  );\n\n  public static readonly Armenian: CharacterRange = CharacterRange.Define(\n    \"\\u0530\",\n    \"\\u058F\",\n    new CharacterSet()\n      .AddCharacters(\"\\u0530\")\n      .AddRange(\"\\u0557\", \"\\u0560\")\n      .AddRange(\"\\u0588\", \"\\u058E\")\n  );\n\n  public static readonly Hebrew: CharacterRange = CharacterRange.Define(\n    \"\\u0590\",\n    \"\\u05FF\",\n    new CharacterSet()\n  );\n\n  public static readonly Arabic: CharacterRange = CharacterRange.Define(\n    \"\\u0600\",\n    \"\\u06FF\",\n    new CharacterSet()\n  );\n\n  public static readonly Korean: CharacterRange = CharacterRange.Define(\n    \"\\uAC00\",\n    \"\\uD7AF\",\n    new CharacterSet()\n  );\n\n  public static readonly Latin1Supplement: CharacterRange =\n    CharacterRange.Define(\"\\u0080\", \"\\u00FF\", new CharacterSet());\n\n  public static readonly Chinese: CharacterRange = CharacterRange.Define(\n    \"\\u4E00\",\n    \"\\u9FFF\",\n    new CharacterSet()\n  );\n\n  private readonly ExtendIdentifierCharacterRanges = (\n    identifierCharSet: CharacterSet\n  ): void => {\n    const characterRanges = InkParser.ListAllCharacterRanges();\n    for (const charRange of characterRanges) {\n      identifierCharSet.AddCharacters(charRange.ToCharacterSet());\n    }\n  };\n\n  /// <summary>\n  /// Gets an array of <see cref=\"CharacterRange\" /> representing all of the currently supported\n  /// non-ASCII character ranges that can be used in identifier names.\n  /// </summary>\n  /// <returns>\n  /// An array of <see cref=\"CharacterRange\" /> representing all of the currently supported\n  /// non-ASCII character ranges that can be used in identifier names.\n  /// </returns>\n  public static readonly ListAllCharacterRanges = (): CharacterRange[] => [\n    InkParser.LatinBasic,\n    InkParser.LatinExtendedA,\n    InkParser.LatinExtendedB,\n    InkParser.Arabic,\n    InkParser.Armenian,\n    InkParser.Cyrillic,\n    InkParser.Greek,\n    InkParser.Hebrew,\n    InkParser.Korean,\n    InkParser.Latin1Supplement,\n    InkParser.Chinese,\n  ];\n\n  /**\n   * End CharacterRanges section.\n   */\n\n  /**\n   * Begin Choices section.\n   */\n\n  public _parsingChoice: boolean = false;\n\n  public readonly Choice = (): Choice | null => {\n    let onceOnlyChoice: boolean = true;\n    let bullets = this.Interleave<string>(\n      this.OptionalExclude(this.Whitespace),\n      this.String(\"*\")\n    );\n\n    if (!bullets) {\n      bullets = this.Interleave<string>(\n        this.OptionalExclude(this.Whitespace),\n        this.String(\"+\")\n      );\n\n      if (bullets === null) {\n        return null;\n      }\n\n      onceOnlyChoice = false;\n    }\n\n    // Optional name for the choice\n    const optionalName: Identifier = this.Parse(\n      this.BracketedName\n    ) as Identifier;\n\n    this.Whitespace();\n\n    // Allow optional newline right after a choice name\n    if (optionalName != null) this.Newline();\n\n    // Optional condition for whether the choice should be shown to the player\n    const conditionExpr: Expression = this.Parse(\n      this.ChoiceCondition\n    ) as Expression;\n\n    this.Whitespace();\n\n    // Ordinarily we avoid parser state variables like these, since\n    // nesting would require us to store them in a stack. But since you should\n    // never be able to nest choices within choice content, it's fine here.\n    if (this._parsingChoice) {\n      throw new Error(\n        \"Already parsing a choice - shouldn't have nested choices\"\n      );\n    }\n\n    this._parsingChoice = true;\n\n    let startContent: ContentList | null = null;\n    const startTextAndLogic = this.Parse(\n      this.MixedTextAndLogic\n    ) as ParsedObject[];\n    if (startTextAndLogic) {\n      startContent = new ContentList(startTextAndLogic);\n    }\n\n    let optionOnlyContent: ContentList | null = null;\n    let innerContent: ContentList | null = null;\n\n    // Check for a the weave style format:\n    //   * \"Hello[.\"],\" he said.\n    const hasWeaveStyleInlineBrackets: boolean = this.ParseString(\"[\") !== null;\n    if (hasWeaveStyleInlineBrackets) {\n      this.EndTagIfNecessary(startContent);\n\n      const optionOnlyTextAndLogic = this.Parse(\n        this.MixedTextAndLogic\n      ) as ParsedObject[];\n\n      if (optionOnlyTextAndLogic !== null) {\n        optionOnlyContent = new ContentList(optionOnlyTextAndLogic);\n      }\n\n      this.Expect(this.String(\"]\"), \"closing ']' for weave-style option\");\n\n      this.EndTagIfNecessary(optionOnlyContent);\n\n      let innerTextAndLogic = this.Parse(\n        this.MixedTextAndLogic\n      ) as ParsedObject[];\n      if (innerTextAndLogic !== null) {\n        innerContent = new ContentList(innerTextAndLogic);\n      }\n    }\n\n    this.Whitespace();\n\n    this.EndTagIfNecessary(innerContent ?? startContent);\n\n    // Finally, now we know we're at the end of the main choice body, parse\n    // any diverts separately.\n    const diverts: ParsedObject[] = this.Parse(\n      this.MultiDivert\n    ) as ParsedObject[];\n\n    this._parsingChoice = false;\n\n    this.Whitespace();\n\n    // Completely empty choice without even an empty divert?\n    const emptyContent: boolean =\n      !startContent && !innerContent && !optionOnlyContent;\n\n    if (emptyContent && diverts === null) {\n      this.Warning(\n        \"Choice is completely empty. Interpretting as a default fallback choice. Add a divert arrow to remove this warning: * ->\"\n      );\n    }\n\n    if (!startContent && hasWeaveStyleInlineBrackets && !optionOnlyContent) {\n      // * [] some text\n      this.Warning(\n        \"Blank choice - if you intended a default fallback choice, use the `* ->` syntax\"\n      );\n    }\n\n    if (!innerContent) {\n      innerContent = new ContentList();\n    }\n\n    this.EndTagIfNecessary(innerContent);\n\n    // Normal diverts on the end of a choice - simply add to the normal content\n    if (diverts !== null) {\n      for (const divObj of diverts) {\n        // may be TunnelOnwards\n        const div = asOrNull(divObj, Divert);\n\n        // Empty divert serves no purpose other than to say\n        // \"this choice is intentionally left blank\"\n        // (as an invisible default choice)\n        if (div && div.isEmpty) {\n          continue;\n        }\n\n        innerContent.AddContent(divObj);\n      }\n    }\n\n    // Terminate main content with a newline since this is the end of the line\n    // Note that this will be redundant if the diverts above definitely take\n    // the flow away permanently.\n    innerContent.AddContent(new Text(\"\\n\"));\n\n    const choice = new Choice(startContent!, optionOnlyContent!, innerContent);\n    if (optionalName) choice.identifier = optionalName;\n    choice.indentationDepth = bullets.length;\n    choice.hasWeaveStyleInlineBrackets = hasWeaveStyleInlineBrackets;\n    choice.condition = conditionExpr;\n    choice.onceOnly = onceOnlyChoice;\n    choice.isInvisibleDefault = emptyContent;\n    return choice;\n  };\n\n  public readonly ChoiceCondition = (): Expression | null => {\n    const conditions = this.Interleave<Expression>(\n      this.ChoiceSingleCondition,\n      this.ChoiceConditionsSpace\n    );\n\n    if (conditions === null) {\n      return null;\n    } else if (conditions.length === 1) {\n      return conditions[0];\n    }\n\n    return new MultipleConditionExpression(conditions);\n  };\n\n  public readonly ChoiceConditionsSpace = (): typeof ParseSuccess => {\n    // Both optional\n    // Newline includes initial end of line whitespace\n    this.Newline();\n    this.Whitespace();\n\n    return ParseSuccess;\n  };\n\n  public readonly ChoiceSingleCondition = (): Expression | null => {\n    if (this.ParseString(\"{\") === null) {\n      return null;\n    }\n\n    const condExpr = this.Expect(\n      this.Expression,\n      \"choice condition inside { }\"\n    ) as Expression;\n\n    this.DisallowIncrement(condExpr);\n    this.Expect(this.String(\"}\"), \"closing '}' for choice condition\");\n\n    return condExpr;\n  };\n\n  public readonly Gather = (): Gather | null => {\n    const gatherDashCountObj: number = this.Parse(this.GatherDashes) as number;\n    if (gatherDashCountObj === null) {\n      return null;\n    }\n\n    const gatherDashCount: number = Number(gatherDashCountObj);\n\n    // Optional name for the gather\n    const optionalName: Identifier = this.Parse(\n      this.BracketedName\n    ) as Identifier;\n\n    const gather = new Gather(optionalName, gatherDashCount);\n\n    // Optional newline before gather's content begins\n    this.Newline();\n\n    return gather;\n  };\n\n  public readonly GatherDashes = (): number | null => {\n    this.Whitespace();\n\n    let gatherDashCount: number = 0;\n    while (this.ParseDashNotArrow() !== null) {\n      gatherDashCount += 1;\n      this.Whitespace();\n    }\n\n    if (gatherDashCount === 0) {\n      return null;\n    }\n\n    return gatherDashCount as number;\n  };\n\n  public readonly ParseDashNotArrow = () => {\n    const ruleId = this.BeginRule();\n\n    if (\n      this.ParseString(\"->\") === null &&\n      this.ParseSingleCharacter() === \"-\"\n    ) {\n      return this.SucceedRule(ruleId);\n    }\n\n    return this.FailRule(ruleId);\n  };\n\n  public readonly BracketedName = (): Identifier | null => {\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const name = this.Parse(this.IdentifierWithMetadata) as Identifier | null;\n    if (name === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    this.Expect(this.String(\")\"), \"closing ')' for bracketed name\");\n\n    return name;\n  };\n\n  /**\n   * End Choices section.\n   */\n\n  /**\n   * Begin Conditional section.\n   */\n\n  public readonly InnerConditionalContent = (\n    initialQueryExpression: Expression\n  ): Conditional | null => {\n    if (initialQueryExpression === undefined) {\n      const initialQueryExpression = this.Parse(this.ConditionExpression);\n      const conditional = this.Parse(() =>\n        this.InnerConditionalContent(initialQueryExpression as Expression)\n      ) as Conditional;\n\n      if (conditional === null) {\n        return null;\n      }\n\n      return conditional;\n    }\n\n    let alternatives: ConditionalSingleBranch[] | null;\n    const canBeInline: boolean = initialQueryExpression !== null;\n    const isInline: boolean = this.Parse(this.Newline) === null;\n\n    if (isInline && !canBeInline) {\n      return null;\n    }\n\n    if (isInline) {\n      // Inline innards\n      alternatives = this.InlineConditionalBranches();\n    } else {\n      // Multiline innards\n      alternatives = this.MultilineConditionalBranches();\n\n      if (alternatives === null) {\n        // Allow single piece of content within multi-line expression, e.g.:\n        // { true:\n        //    Some content that isn't preceded by '-'\n        // }\n        if (initialQueryExpression) {\n          let soleContent: ParsedObject[] = this.StatementsAtLevel(\n            StatementLevel.InnerBlock\n          );\n          if (soleContent !== null) {\n            const soleBranch = new ConditionalSingleBranch(soleContent);\n            alternatives = [soleBranch];\n\n            // Also allow a final \"- else:\" clause\n            const elseBranch = this.Parse(\n              this.SingleMultilineCondition\n            ) as ConditionalSingleBranch;\n            if (elseBranch) {\n              if (!elseBranch.isElse) {\n                this.ErrorWithParsedObject(\n                  \"Expected an '- else:' clause here rather than an extra condition\",\n                  elseBranch\n                );\n\n                elseBranch.isElse = true;\n              }\n\n              alternatives.push(elseBranch);\n            }\n          }\n        }\n\n        // Still null?\n        if (alternatives === null) {\n          return null;\n        }\n      } else if (\n        alternatives.length === 1 &&\n        alternatives[0].isElse &&\n        initialQueryExpression\n      ) {\n        // Empty true branch - didn't get parsed, but should insert one for semantic correctness,\n        // and to make sure that any evaluation stack values get tidied up correctly.\n        const emptyTrueBranch = new ConditionalSingleBranch(null);\n        emptyTrueBranch.isTrueBranch = true;\n        alternatives.unshift(emptyTrueBranch);\n      }\n\n      // Like a switch statement\n      // { initialQueryExpression:\n      //    ... match the expression\n      // }\n      if (initialQueryExpression) {\n        let earlierBranchesHaveOwnExpression: boolean = false;\n        for (let ii = 0; ii < alternatives.length; ++ii) {\n          const branch = alternatives[ii];\n          const isLast: boolean = ii === alternatives.length - 1;\n\n          // Matching equality with initial query expression\n          // We set this flag even for the \"else\" clause so that\n          // it knows to tidy up the evaluation stack at the end\n\n          // Match query\n          if (branch.ownExpression) {\n            branch.matchingEquality = true;\n            earlierBranchesHaveOwnExpression = true;\n          } else if (earlierBranchesHaveOwnExpression && isLast) {\n            // Else (final branch)\n            branch.matchingEquality = true;\n            branch.isElse = true;\n          } else {\n            // Binary condition:\n            // { trueOrFalse:\n            //    - when true\n            //    - when false\n            // }\n            if (!isLast && alternatives.length > 2) {\n              this.ErrorWithParsedObject(\n                \"Only final branch can be an 'else'. Did you miss a ':'?\",\n                branch\n              );\n            } else {\n              if (ii === 0) {\n                branch.isTrueBranch = true;\n              } else {\n                branch.isElse = true;\n              }\n            }\n          }\n        }\n      } else {\n        // No initial query, so just a multi-line conditional. e.g.:\n        // {\n        //   - x > 3:  greater than three\n        //   - x == 3: equal to three\n        //   - x < 3:  less than three\n        // }\n\n        for (let ii = 0; ii < alternatives.length; ++ii) {\n          const alt = alternatives[ii];\n          const isLast: boolean = ii === alternatives.length - 1;\n\n          if (alt.ownExpression === null) {\n            if (isLast) {\n              alt.isElse = true;\n            } else {\n              if (alt.isElse) {\n                // Do we ALSO have a valid \"else\" at the end? Let's report the error there.\n                const finalClause = alternatives[alternatives.length - 1];\n                if (finalClause.isElse) {\n                  this.ErrorWithParsedObject(\n                    \"Multiple 'else' cases. Can have a maximum of one, at the end.\",\n                    finalClause\n                  );\n                } else {\n                  this.ErrorWithParsedObject(\n                    \"'else' case in conditional should always be the final one\",\n                    alt\n                  );\n                }\n              } else {\n                this.ErrorWithParsedObject(\n                  \"Branch doesn't have condition. Are you missing a ':'? \",\n                  alt\n                );\n              }\n            }\n          }\n        }\n\n        if (\n          alternatives.length === 1 &&\n          alternatives[0].ownExpression === null\n        ) {\n          this.ErrorWithParsedObject(\n            \"Condition block with no conditions\",\n            alternatives[0]\n          );\n        }\n      }\n    }\n\n    // TODO: Come up with water-tight error conditions... it's quite a flexible system!\n    // e.g.\n    //   - inline conditionals must have exactly 1 or 2 alternatives\n    //   - multiline expression shouldn't have mixed existence of branch-conditions?\n    if (alternatives === null) {\n      return null;\n    }\n\n    for (const branch of alternatives) {\n      branch.isInline = isInline;\n    }\n\n    const cond = new Conditional(initialQueryExpression, alternatives);\n\n    return cond;\n  };\n\n  public readonly InlineConditionalBranches = ():\n    | ConditionalSingleBranch[]\n    | null => {\n    const listOfLists = this.Interleave<ParsedObject[]>(\n      this.MixedTextAndLogic,\n      this.Exclude(this.String(\"|\")),\n      null,\n      false\n    );\n\n    if (listOfLists === null || listOfLists.length === 0) {\n      return null;\n    }\n\n    const result: ConditionalSingleBranch[] = [];\n\n    if (listOfLists.length > 2) {\n      this.Error(\n        \"Expected one or two alternatives separated by '|' in inline conditional\"\n      );\n    } else {\n      const trueBranch = new ConditionalSingleBranch(listOfLists[0]);\n      trueBranch.isTrueBranch = true;\n      result.push(trueBranch);\n\n      if (listOfLists.length > 1) {\n        const elseBranch = new ConditionalSingleBranch(listOfLists[1]);\n        elseBranch.isElse = true;\n        result.push(elseBranch);\n      }\n    }\n\n    return result;\n  };\n\n  public readonly MultilineConditionalBranches = ():\n    | ConditionalSingleBranch[]\n    | null => {\n    this.MultilineWhitespace();\n\n    const multipleConditions = this.OneOrMore(this.SingleMultilineCondition);\n    if (multipleConditions === null) {\n      return null;\n    }\n\n    this.MultilineWhitespace();\n\n    return multipleConditions as ConditionalSingleBranch[];\n  };\n\n  public readonly SingleMultilineCondition =\n    (): ConditionalSingleBranch | null => {\n      this.Whitespace();\n\n      if (\n        // Make sure we're not accidentally parsing a divert\n        this.ParseString(\"->\") !== null ||\n        this.ParseString(\"-\") === null\n      ) {\n        return null;\n      }\n\n      this.Whitespace();\n\n      let expr: Expression | null = null;\n      const isElse: boolean = this.Parse(this.ElseExpression) !== null;\n\n      if (!isElse) {\n        expr = this.Parse(this.ConditionExpression) as Expression;\n      }\n\n      let content: ParsedObject[] = this.StatementsAtLevel(\n        StatementLevel.InnerBlock\n      );\n      if (expr === null && content === null) {\n        this.Error(\"expected content for the conditional branch following '-'\");\n\n        // Recover\n        content = [new Text(\"\")];\n      }\n\n      // Allow additional multiline whitespace, if the statements were empty (valid)\n      // then their surrounding multiline whitespacce needs to be handled manually.\n      // e.g.\n      // { x:\n      //   - 1:    // intentionally left blank, but newline needs to be parsed\n      //   - 2: etc\n      // }\n      this.MultilineWhitespace();\n\n      const branch = new ConditionalSingleBranch(content);\n      branch.ownExpression = expr;\n      branch.isElse = isElse;\n\n      return branch;\n    };\n\n  public readonly ConditionExpression = (): ParsedObject | null => {\n    const expr = this.Parse(this.Expression) as ParsedObject;\n    if (expr === null) {\n      return null;\n    }\n\n    this.DisallowIncrement(expr);\n\n    this.Whitespace();\n\n    if (this.ParseString(\":\") === null) {\n      return null;\n    }\n\n    return expr;\n  };\n\n  public readonly ElseExpression = (): typeof ParseSuccess | null => {\n    if (this.ParseString(\"else\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    if (this.ParseString(\":\") === null) {\n      return null;\n    }\n\n    return ParseSuccess;\n  };\n\n  /**\n   * End Conditional section.\n   */\n\n  /**\n   * Begin Content section.\n   */\n\n  public _nonTextPauseCharacters: CharacterSet | null = null;\n  public _nonTextEndCharacters: CharacterSet | null = null;\n  public _notTextEndCharactersChoice: CharacterSet | null = null;\n  public _notTextEndCharactersString: CharacterSet | null = null;\n\n  public readonly TrimEndWhitespace = (\n    mixedTextAndLogicResults: ParsedObject[],\n    terminateWithSpace: boolean\n  ): void => {\n    // Trim whitespace from end\n    if (mixedTextAndLogicResults.length > 0) {\n      const lastObjIdx = mixedTextAndLogicResults.length - 1;\n      const lastObj = mixedTextAndLogicResults[lastObjIdx];\n      if (lastObj instanceof Text) {\n        const textObj: Text = lastObj;\n        textObj.text = textObj.text.replace(new RegExp(/[ \\t]+$/g), \"\");\n\n        if (terminateWithSpace) {\n          textObj.text += \" \";\n        } else if (textObj.text.length === 0) {\n          // No content left at all? trim the whole object\n          mixedTextAndLogicResults.splice(lastObjIdx, 1);\n\n          // Recurse in case there's more whitespace\n          this.TrimEndWhitespace(mixedTextAndLogicResults, false);\n        }\n      }\n    }\n  };\n\n  public readonly LineOfMixedTextAndLogic = (): ParsedObject[] | null => {\n    // Consume any whitespace at the start of the line\n    // (Except for escaped whitespace)\n    this.Parse(this.Whitespace);\n\n    let result: ParsedObject[] = this.Parse(\n      this.MixedTextAndLogic\n    ) as ParsedObject[];\n\n    if (!result || !result.length) {\n      return null;\n    }\n\n    // Warn about accidentally writing \"return\" without \"~\"\n    const firstText = result[0] as Text;\n    if (firstText && firstText.text && firstText.text.startsWith(\"return\")) {\n      this.Warning(\n        \"Do you need a '~' before 'return'? If not, perhaps use a glue: <> (since it's lowercase) or rewrite somehow?\"\n      );\n    }\n\n    if (result.length === 0) {\n      return null;\n    }\n\n    const lastObj = result[result.length - 1];\n    if (!(lastObj instanceof Divert)) {\n      this.TrimEndWhitespace(result, false);\n    }\n\n    this.EndTagIfNecessary(result);\n\n    // If the line doens't actually contain any normal text content\n    // but is in fact entirely a tag, then let's not append\n    // a newline, since we want the tag (or tags) to be associated\n    // with the line below rather than being completely independent.\n    let lineIsPureTag =\n      result.length > 0 && result[0] instanceof Tag && result[0].isStart;\n\n    if (!lineIsPureTag) {\n      result.push(new Text(\"\\n\"));\n    }\n\n    this.Expect(this.EndOfLine, \"end of line\", this.SkipToNextLine);\n    return result;\n  };\n\n  public readonly MixedTextAndLogic = (): ParsedObject[] | null => {\n    // Check for disallowed \"~\" within this context\n    const disallowedTilde = this.ParseObject(this.Spaced(this.String(\"~\")));\n    if (disallowedTilde !== null) {\n      this.Error(\n        \"You shouldn't use a '~' here - tildas are for logic that's on its own line. To do inline logic, use { curly braces } instead\"\n      );\n    }\n\n    // Either, or both interleaved\n    let results: ParsedObject[] = this.Interleave<ParsedObject>(\n      this.Optional(this.ContentText),\n      this.Optional(this.InlineLogicOrGlueOrStartTag)\n    );\n\n    // Terminating divert?\n    // (When parsing content for the text of a choice, diverts aren't allowed.\n    //  The divert on the end of the body of a choice is handled specially.)\n    if (!this._parsingChoice) {\n      const diverts: ParsedObject[] = this.Parse(\n        this.MultiDivert\n      ) as ParsedObject[];\n      if (diverts !== null) {\n        // May not have had any results at all if there's *only* a divert!\n        if (results === null) {\n          results = [];\n        }\n\n        // End previously active tag if necessary\n        this.EndTagIfNecessary(results);\n\n        this.TrimEndWhitespace(results, true);\n\n        results.push(...diverts);\n      }\n    }\n\n    if (!results) {\n      return null;\n    }\n\n    return results;\n  };\n\n  public readonly ContentText = () => {\n    return this.ContentTextAllowingEscapeChar();\n  };\n\n  public readonly ContentTextAllowingEscapeChar = (): Text | null => {\n    let sb: string | null = null;\n\n    do {\n      let str = this.Parse(this.ContentTextNoEscape);\n      const gotEscapeChar: boolean = this.ParseString(\"\\\\\") !== null;\n\n      if (gotEscapeChar || str !== null) {\n        if (sb === null) {\n          sb = \"\";\n        }\n\n        if (str !== null) {\n          sb += String(str);\n        }\n\n        if (gotEscapeChar) {\n          const c: string = this.ParseSingleCharacter();\n          sb += c;\n        }\n      } else {\n        break;\n      }\n    } while (true);\n\n    if (sb !== null) {\n      return new Text(sb);\n    }\n\n    return null;\n  };\n\n  // Content text is an unusual parse rule compared with most since it's\n  // less about saying \"this is is the small selection of stuff that we parse\"\n  // and more \"we parse ANYTHING except this small selection of stuff\".\n  public readonly ContentTextNoEscape = (): string | null => {\n    // Eat through text, pausing at the following characters, and\n    // attempt to parse the nonTextRule.\n    // \"-\": possible start of divert or start of gather\n    // \"<\": possible start of glue\n    if (this._nonTextPauseCharacters === null) {\n      this._nonTextPauseCharacters = new CharacterSet(\"-<\");\n    }\n\n    // If we hit any of these characters, we stop *immediately* without bothering to even check the nonTextRule\n    // \"{\" for start of logic\n    // \"|\" for mid logic branch\n    if (this._nonTextEndCharacters === null) {\n      this._nonTextEndCharacters = new CharacterSet(\"{}|\\n\\r\\\\#\");\n      this._notTextEndCharactersChoice = new CharacterSet(\n        this._nonTextEndCharacters\n      );\n      this._notTextEndCharactersChoice.AddCharacters(\"[]\");\n      this._notTextEndCharactersString = new CharacterSet(\n        this._nonTextEndCharacters\n      );\n      this._notTextEndCharactersString.AddCharacters('\"');\n    }\n\n    // When the ParseUntil pauses, check these rules in case they evaluate successfully\n    const nonTextRule: ParseRule = () =>\n      this.OneOf([\n        this.ParseDivertArrow,\n        this.ParseThreadArrow,\n        this.EndOfLine,\n        this.Glue,\n      ]);\n\n    let endChars: CharacterSet | null = null;\n    if (this.parsingStringExpression) {\n      endChars = this._notTextEndCharactersString;\n    } else if (this._parsingChoice) {\n      endChars = this._notTextEndCharactersChoice;\n    } else {\n      endChars = this._nonTextEndCharacters;\n    }\n\n    const pureTextContent: string = this.ParseUntil(\n      nonTextRule,\n      this._nonTextPauseCharacters,\n      endChars\n    );\n\n    if (pureTextContent !== null) {\n      return pureTextContent;\n    }\n\n    return null;\n  };\n\n  /**\n   * End Content section.\n   */\n\n  /**\n   * Begin Divert section.\n   */\n\n  public readonly MultiDivert = (): ParsedObject[] | null => {\n    this.Whitespace();\n\n    let diverts: ParsedObject[] = [];\n\n    // Try single thread first\n    const threadDivert = this.Parse(this.StartThread) as ParsedObject;\n    if (threadDivert) {\n      diverts = [threadDivert];\n\n      return diverts;\n    }\n\n    // Normal diverts and tunnels\n    const arrowsAndDiverts = this.Interleave<ParsedObject>(\n      this.ParseDivertArrowOrTunnelOnwards,\n      this.DivertIdentifierWithArguments\n    );\n\n    if (!arrowsAndDiverts) {\n      return null;\n    }\n\n    diverts = [];\n\n    this.EndTagIfNecessary(diverts);\n\n    // Possible patterns:\n    //  ->                   -- explicit gather\n    //  ->->                 -- tunnel onwards\n    //  -> div               -- normal divert\n    //  ->-> div             -- tunnel onwards, followed by override divert\n    //  -> div ->            -- normal tunnel\n    //  -> div ->->          -- tunnel then tunnel continue\n    //  -> div -> div        -- tunnel then divert\n    //  -> div -> div ->     -- tunnel then tunnel\n    //  -> div -> div ->->\n    //  -> div -> div ->-> div    (etc)\n\n    // Look at the arrows and diverts\n    for (let ii = 0; ii < arrowsAndDiverts.length; ++ii) {\n      const isArrow: boolean = ii % 2 === 0;\n\n      // Arrow string\n      if (isArrow) {\n        // Tunnel onwards\n        if ((arrowsAndDiverts[ii] as any) === \"->->\") {\n          const tunnelOnwardsPlacementValid: boolean =\n            ii === 0 ||\n            ii === arrowsAndDiverts.length - 1 ||\n            ii === arrowsAndDiverts.length - 2;\n\n          if (!tunnelOnwardsPlacementValid) {\n            this.Error(\n              \"Tunnel onwards '->->' must only come at the begining or the start of a divert\"\n            );\n          }\n\n          const tunnelOnwards = new TunnelOnwards();\n          if (ii < arrowsAndDiverts.length - 1) {\n            const tunnelOnwardDivert = asOrNull(\n              arrowsAndDiverts[ii + 1],\n              Divert\n            );\n            tunnelOnwards.divertAfter = tunnelOnwardDivert;\n          }\n\n          diverts.push(tunnelOnwards);\n\n          // Not allowed to do anything after a tunnel onwards.\n          // If we had anything left it would be caused in the above Error for\n          // the positioning of a ->->\n          break;\n        }\n      } else {\n        // Divert\n        const divert = arrowsAndDiverts[ii] as Divert;\n        // More to come? (further arrows) Must be tunnelling.\n        if (ii < arrowsAndDiverts.length - 1) {\n          divert.isTunnel = true;\n        }\n\n        diverts.push(divert);\n      }\n    }\n\n    // Single -> (used for default choices)\n    if (diverts.length === 0 && arrowsAndDiverts.length === 1) {\n      const gatherDivert = new Divert(null);\n      gatherDivert.isEmpty = true;\n      diverts.push(gatherDivert);\n\n      if (!this._parsingChoice) {\n        this.Error(\"Empty diverts (->) are only valid on choices\");\n      }\n    }\n\n    return diverts;\n  };\n\n  public readonly StartThread = (): Divert | null => {\n    this.Whitespace();\n\n    if (this.ParseThreadArrow() === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const divert = this.Expect(\n      this.DivertIdentifierWithArguments,\n      \"target for new thread\",\n      () => new Divert(null)\n    ) as Divert;\n\n    divert.isThread = true;\n\n    return divert;\n  };\n\n  public readonly DivertIdentifierWithArguments = (): Divert | null => {\n    this.Whitespace();\n\n    const targetComponents: Identifier[] = this.Parse(\n      this.DotSeparatedDivertPathComponents\n    ) as Identifier[];\n\n    if (!targetComponents) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const optionalArguments = this.Parse(\n      this.ExpressionFunctionCallArguments\n    ) as Expression[];\n\n    this.Whitespace();\n\n    const targetPath = new Path(targetComponents);\n\n    return new Divert(targetPath, optionalArguments);\n  };\n\n  public readonly SingleDivert = (): Divert | null => {\n    const diverts = this.Parse(this.MultiDivert) as ParsedObject[];\n    if (!diverts) {\n      return null;\n    }\n\n    // Ideally we'd report errors if we get the\n    // wrong kind of divert, but unfortunately we\n    // have to hack around the fact that sequences use\n    // a very similar syntax.\n    // i.e. if you have a multi-divert at the start\n    // of a sequence, it initially tries to parse it\n    // as a divert target (part of an expression of\n    // a conditional) and gives errors. So instead\n    // we just have to blindly reject it as a single\n    // divert, and give a slightly less nice error\n    // when you DO use a multi divert as a divert taret.\n\n    if (diverts.length !== 1) {\n      return null;\n    }\n\n    const singleDivert = diverts[0];\n    if (singleDivert instanceof TunnelOnwards) {\n      return null;\n    }\n\n    const divert = diverts[0] as Divert;\n    if (divert.isTunnel) {\n      return null;\n    }\n\n    return divert;\n  };\n\n  public readonly DotSeparatedDivertPathComponents = (): Identifier[] =>\n    this.Interleave<Identifier>(\n      this.Spaced(this.IdentifierWithMetadata),\n      this.Exclude(this.String(\".\"))\n    );\n\n  public readonly ParseDivertArrowOrTunnelOnwards = (): string | null => {\n    let numArrows: number = 0;\n    while (this.ParseString(\"->\") !== null) {\n      numArrows += 1;\n    }\n\n    if (numArrows === 0) {\n      return null;\n    } else if (numArrows === 1) {\n      return \"->\";\n    } else if (numArrows === 2) {\n      return \"->->\";\n    }\n\n    this.Error(\n      \"Unexpected number of arrows in divert. Should only have '->' or '->->'\"\n    );\n\n    return \"->->\";\n  };\n\n  public readonly ParseDivertArrow = () => this.ParseString(\"->\");\n\n  public readonly ParseThreadArrow = () => this.ParseString(\"<-\");\n\n  /**\n   * End Divert section.\n   */\n\n  /**\n   * Begin Expressions section.\n   */\n\n  public _binaryOperators: InfixOperator[] = [];\n  public _maxBinaryOpLength: number = 0;\n\n  public readonly TempDeclarationOrAssignment = (): ParsedObject | null => {\n    this.Whitespace();\n\n    const isNewDeclaration: boolean = this.ParseTempKeyword();\n\n    this.Whitespace();\n\n    let varIdentifier: Identifier | null = null;\n    if (isNewDeclaration) {\n      varIdentifier = this.Expect(\n        this.IdentifierWithMetadata,\n        \"variable name\"\n      ) as Identifier;\n    } else {\n      varIdentifier = this.Parse(this.IdentifierWithMetadata) as Identifier;\n    }\n\n    if (varIdentifier === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // += -=\n    const isIncrement: boolean = this.ParseString(\"+\") !== null;\n    const isDecrement: boolean = this.ParseString(\"-\") !== null;\n\n    if (isIncrement && isDecrement) {\n      this.Error(\"Unexpected sequence '+-'\");\n    }\n\n    if (this.ParseString(\"=\") === null) {\n      // Definitely in an assignment expression?\n      if (isNewDeclaration) {\n        this.Error(\"Expected '='\");\n      }\n\n      return null;\n    }\n\n    const assignedExpression: Expression = this.Expect(\n      this.Expression,\n      \"value expression to be assigned\"\n    ) as Expression;\n\n    if (isIncrement || isDecrement) {\n      const result = new IncDecExpression(\n        varIdentifier,\n        assignedExpression,\n        isIncrement\n      );\n      return result;\n    }\n\n    const result = new VariableAssignment({\n      variableIdentifier: varIdentifier,\n      assignedExpression,\n      isTemporaryNewDeclaration: isNewDeclaration,\n    });\n\n    return result;\n  };\n\n  public readonly DisallowIncrement = (expr: ParsedObject): void => {\n    if (expr instanceof IncDecExpression) {\n      this.Error(\n        \"Can't use increment/decrement here. It can only be used on a ~ line\"\n      );\n    }\n  };\n\n  public readonly ParseTempKeyword = () => {\n    const ruleId = this.BeginRule();\n\n    if (this.Parse(this.Identifier) === \"temp\") {\n      this.SucceedRule(ruleId);\n      return true;\n    }\n\n    this.FailRule(ruleId);\n    return false;\n  };\n\n  public readonly ReturnStatement = (): ReturnType | null => {\n    this.Whitespace();\n\n    const returnOrDone = this.Parse(this.Identifier);\n    if (returnOrDone !== \"return\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const expr = this.Parse(this.Expression) as Expression;\n\n    const returnObj = new ReturnType(expr);\n\n    return returnObj;\n  };\n\n  // Pratt Parser\n  // aka \"Top down operator precedence parser\"\n  // http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n  // Algorithm overview:\n  // The two types of precedence are handled in two different ways:\n  //   ((((a . b) . c) . d) . e)\t\t\t#1\n  //   (a . (b . (c . (d . e))))\t\t\t#2\n  // Where #1 is automatically handled by successive loops within the main 'while' in this function,\n  // so long as continuing operators have lower (or equal) precedence (e.g. imagine some series of \"*\"s then \"+\" above.\n  // ...and #2 is handled by recursion of the right hand term in the binary expression parser.\n  // (see link for advice on how to extend for postfix and mixfix operators)\n  public readonly Expression = (\n    minimumPrecedence: number = 0\n  ): Expression | null => {\n    this.Whitespace();\n\n    // First parse a unary expression e.g. \"-a\" or parethensised \"(1 + 2)\"\n    let expr = this.ExpressionUnary();\n    if (expr === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // Attempt to parse (possibly multiple) continuing infix expressions (e.g. 1 + 2 + 3)\n    while (true) {\n      const ruleId = this.BeginRule();\n\n      // Operator\n      const infixOp = this.ParseInfixOperator();\n      if (infixOp !== null && infixOp.precedence > minimumPrecedence) {\n        // Expect right hand side of operator\n        const expectationMessage = `right side of '${infixOp.type}' expression`;\n        const multiaryExpr = this.Expect(\n          () => this.ExpressionInfixRight(expr, infixOp),\n          expectationMessage\n        );\n\n        if (multiaryExpr === null) {\n          // Fail for operator and right-hand side of multiary expression\n          this.FailRule(ruleId);\n\n          return null;\n        }\n\n        expr = this.SucceedRule(ruleId, multiaryExpr) as Expression;\n\n        continue;\n      }\n\n      this.FailRule(ruleId);\n      break;\n    }\n\n    this.Whitespace();\n\n    return expr;\n  };\n\n  public readonly ExpressionUnary = (): Expression | null => {\n    // Divert target is a special case - it can't have any other operators\n    // applied to it, and we also want to check for it first so that we don't\n    // confuse \"->\" for subtraction.\n    const divertTarget = this.Parse(this.ExpressionDivertTarget) as Expression;\n    if (divertTarget !== null) {\n      return divertTarget;\n    }\n\n    let prefixOp: string = this.OneOf([\n      this.String(\"-\"),\n      this.String(\"!\"),\n    ]) as string;\n\n    // Don't parse like the string rules above, in case its actually\n    // a variable that simply starts with \"not\", e.g. \"notable\".\n    // This rule uses the Identifier rule, which will scan as much text\n    // as possible before returning.\n    if (prefixOp === null) {\n      prefixOp = this.Parse(this.ExpressionNot) as string;\n    }\n\n    this.Whitespace();\n\n    // - Since we allow numbers at the start of variable names, variable names are checked before literals\n    // - Function calls before variable names in case we see parentheses\n    let expr = this.OneOf([\n      this.ExpressionList,\n      this.ExpressionParen,\n      this.ExpressionFunctionCall,\n      this.ExpressionVariableName,\n      this.ExpressionLiteral,\n    ]) as Expression | null;\n\n    // Only recurse immediately if we have one of the (usually optional) unary ops\n    if (expr === null && prefixOp !== null) {\n      expr = this.ExpressionUnary();\n    }\n\n    if (expr === null) {\n      return null;\n    } else if (prefixOp !== null) {\n      expr = UnaryExpression.WithInner(expr, prefixOp) as Expression;\n    }\n\n    this.Whitespace();\n\n    const postfixOp = this.OneOf([this.String(\"++\"), this.String(\"--\")]);\n\n    if (postfixOp !== null) {\n      const isInc: boolean = postfixOp === \"++\";\n\n      if (!(expr instanceof VariableReference)) {\n        this.Error(\n          `can only increment and decrement variables, but saw '${expr}'.`\n        );\n\n        // Drop down and succeed without the increment after reporting error\n      } else {\n        const varRef = expr as VariableReference;\n        expr = new IncDecExpression(varRef.identifier, isInc);\n      }\n    }\n\n    return expr;\n  };\n\n  public readonly ExpressionNot = (): string | null => {\n    const id = this.Identifier();\n    if (id === \"not\") {\n      return id;\n    }\n\n    return null;\n  };\n\n  public readonly ExpressionLiteral = (): Expression =>\n    this.OneOf([\n      this.ExpressionFloat,\n      this.ExpressionInt,\n      this.ExpressionBool,\n      this.ExpressionString,\n    ]) as Expression;\n\n  public readonly ExpressionDivertTarget = (): Expression | null => {\n    this.Whitespace();\n\n    const divert = this.Parse(this.SingleDivert) as Divert;\n    if (!divert || (divert && divert.isThread)) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    return new DivertTarget(divert);\n  };\n\n  public readonly ExpressionInt = (): NumberExpression | null => {\n    const intOrNull: number = this.ParseInt() as number;\n    if (intOrNull === null) {\n      return null;\n    }\n\n    return new NumberExpression(intOrNull, \"int\");\n  };\n\n  public readonly ExpressionFloat = (): NumberExpression | null => {\n    const floatOrNull: number = this.ParseFloat() as number;\n    if (floatOrNull === null) {\n      return null;\n    }\n\n    return new NumberExpression(floatOrNull, \"float\");\n  };\n\n  public readonly ExpressionString = (): StringExpression | null => {\n    const openQuote = this.ParseString('\"');\n    if (openQuote === null) {\n      return null;\n    }\n\n    // Set custom parser state flag so that within the text parser,\n    // it knows to treat the quote character (\") as an end character\n    this.parsingStringExpression = true;\n\n    let textAndLogic: ParsedObject[] = this.Parse(\n      this.MixedTextAndLogic\n    ) as ParsedObject[];\n\n    this.Expect(this.String('\"'), \"close quote for string expression\");\n\n    this.parsingStringExpression = false;\n\n    if (textAndLogic === null) {\n      textAndLogic = [new Text(\"\")];\n    } else if (textAndLogic.find((c) => c instanceof Divert)) {\n      this.Error(\"String expressions cannot contain diverts (->)\");\n    }\n\n    return new StringExpression(textAndLogic);\n  };\n\n  public readonly ExpressionBool = (): NumberExpression | null => {\n    const id = this.Parse(this.Identifier);\n    if (id === \"true\") {\n      return new NumberExpression(true, \"bool\");\n    } else if (id === \"false\") {\n      return new NumberExpression(false, \"bool\");\n    }\n\n    return null;\n  };\n\n  public readonly ExpressionFunctionCall = (): Expression | null => {\n    const iden = this.Parse(this.IdentifierWithMetadata);\n    if (iden === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const args = this.Parse(\n      this.ExpressionFunctionCallArguments\n    ) as Expression[];\n    if (args === null) {\n      return null;\n    }\n\n    return new FunctionCall(iden as Identifier, args);\n  };\n\n  public readonly ExpressionFunctionCallArguments = (): Expression[] | null => {\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    // \"Exclude\" requires the rule to succeed, but causes actual comma string to be excluded from the list of results\n    const commas: ParseRule = this.Exclude(this.String(\",\"));\n    let args = this.Interleave<Expression>(this.Expression, commas);\n    if (args === null) {\n      args = [];\n    }\n\n    this.Whitespace();\n\n    this.Expect(this.String(\")\"), \"closing ')' for function call\");\n\n    return args;\n  };\n\n  public readonly ExpressionVariableName = (): Expression | null => {\n    const path = this.Interleave<Identifier>(\n      this.IdentifierWithMetadata,\n      this.Exclude(this.Spaced(this.String(\".\")))\n    );\n\n    if (path === null || Story.IsReservedKeyword(path[0].name)) {\n      return null;\n    }\n\n    return new VariableReference(path);\n  };\n\n  public readonly ExpressionParen = (): Expression | null => {\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    const innerExpr = this.Parse(this.Expression) as Expression;\n    if (innerExpr === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    this.Expect(this.String(\")\"), \"closing parenthesis ')' for expression\");\n\n    return innerExpr;\n  };\n\n  public readonly ExpressionInfixRight = (\n    left: Expression | null,\n    op: InfixOperator\n  ) => {\n    if (!left) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const right = this.Parse(() =>\n      this.Expression(op.precedence)\n    ) as Expression;\n    if (right) {\n      // We assume that the character we use for the operator's type is the same\n      // as that used internally by e.g. Runtime.Expression.Add, Runtime.Expression.Multiply etc\n      const expr = new BinaryExpression(left, right, op.type);\n      return expr;\n    }\n\n    return null;\n  };\n\n  private readonly ParseInfixOperator = (): InfixOperator | null => {\n    for (const op of this._binaryOperators) {\n      const ruleId: number = this.BeginRule();\n\n      if (this.ParseString(op.type) !== null) {\n        if (op.requireWhitespace) {\n          if (this.Whitespace() === null) {\n            this.FailRule(ruleId);\n\n            continue;\n          }\n        }\n\n        return this.SucceedRule(ruleId, op) as InfixOperator;\n      }\n\n      this.FailRule(ruleId);\n    }\n\n    return null;\n  };\n\n  public readonly ExpressionList = (): List | null => {\n    this.Whitespace();\n\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // When list has:\n    //  - 0 elements (null list) - this is okay, it's an empty list: \"()\"\n    //  - 1 element - it could be confused for a single non-list related\n    //    identifier expression in brackets, but this is a useless thing\n    //    to do, so we reserve that syntax for a list with one item.\n    //  - 2 or more elements - normal!\n    const memberNames: Identifier[] = this.SeparatedList(\n      this.ListMember,\n      this.Spaced(this.String(\",\"))\n    ) as Identifier[];\n\n    this.Whitespace();\n\n    // May have failed to parse the inner list - the parentheses may\n    // be for a normal expression\n    if (this.ParseString(\")\") === null) {\n      return null;\n    }\n    return new List(memberNames);\n  };\n\n  public readonly ListMember = (): Identifier | null => {\n    this.Whitespace();\n\n    let identifier: Identifier = this.Parse(\n      this.IdentifierWithMetadata\n    ) as Identifier;\n    if (identifier === null) {\n      return null;\n    }\n\n    const dot = this.ParseString(\".\");\n    if (dot !== null) {\n      const identifier2: Identifier = this.Expect(\n        this.IdentifierWithMetadata,\n        `element name within the set ${identifier}`\n      ) as Identifier;\n\n      identifier.name += `.${identifier2?.name}`;\n    }\n\n    this.Whitespace();\n\n    return identifier;\n  };\n\n  public readonly RegisterExpressionOperators = () => {\n    // These will be tried in order, so we need \"<=\" before \"<\"\n    // for correctness\n\n    this.RegisterBinaryOperator(\"&&\", 1);\n    this.RegisterBinaryOperator(\"||\", 1);\n    this.RegisterBinaryOperator(\"and\", 1, true);\n    this.RegisterBinaryOperator(\"or\", 1, true);\n    this.RegisterBinaryOperator(\"==\", 2);\n    this.RegisterBinaryOperator(\">=\", 2);\n    this.RegisterBinaryOperator(\"<=\", 2);\n    this.RegisterBinaryOperator(\"<\", 2);\n    this.RegisterBinaryOperator(\">\", 2);\n    this.RegisterBinaryOperator(\"!=\", 2);\n\n    // (apples, oranges) + cabbages has (oranges, cabbages) === true\n    this.RegisterBinaryOperator(\"?\", 3);\n    this.RegisterBinaryOperator(\"has\", 3, true);\n    this.RegisterBinaryOperator(\"!?\", 3);\n    this.RegisterBinaryOperator(\"hasnt\", 3, true);\n    this.RegisterBinaryOperator(\"^\", 3);\n\n    this.RegisterBinaryOperator(\"+\", 4);\n    this.RegisterBinaryOperator(\"-\", 5);\n    this.RegisterBinaryOperator(\"*\", 6);\n    this.RegisterBinaryOperator(\"/\", 7);\n\n    this.RegisterBinaryOperator(\"%\", 8);\n    this.RegisterBinaryOperator(\"mod\", 8, true);\n  };\n\n  public readonly RegisterBinaryOperator = (\n    op: string,\n    precedence: number,\n    requireWhitespace: boolean = false\n  ): void => {\n    const infix = new InfixOperator(op, precedence, requireWhitespace);\n    this._binaryOperators.push(infix);\n    this._maxBinaryOpLength = Math.max(this._maxBinaryOpLength, op.length);\n  };\n\n  /**\n   * End Expressions section.\n   */\n\n  /**\n   * Begin Include section.\n   */\n\n  private _rootParser: InkParser;\n  private _openFilenames: string[] = [];\n\n  public readonly IncludeStatement = () => {\n    this.Whitespace();\n\n    if (this.ParseString(\"INCLUDE\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    let filename: string = this.Expect(\n      () => this.ParseUntilCharactersFromString(\"\\n\\r\"),\n      \"filename for include statement\"\n    ) as string;\n\n    filename = filename.replace(new RegExp(/[ \\t]+$/g), \"\");\n\n    // Working directory should already have been set up relative to the root ink file.\n    const fullFilename = this.fileHandler.ResolveInkFilename(filename);\n\n    if (this.FilenameIsAlreadyOpen(fullFilename)) {\n      this.Error(\n        `Recursive INCLUDE detected: '${fullFilename}' is already open.`\n      );\n      this.ParseUntilCharactersFromString(\"\\r\\n\");\n      return new IncludedFile(null);\n    } else {\n      this.AddOpenFilename(fullFilename);\n    }\n\n    let includedStory: Story | null = null;\n    let includedString: string = \"\";\n    try {\n      includedString =\n        this._rootParser.fileHandler.LoadInkFileContents(fullFilename);\n    } catch (err) {\n      this.Error(`Failed to load: '${filename}'.\\nError:${err}`);\n    }\n\n    if (includedString != null) {\n      const parser: InkParser = new InkParser(\n        includedString,\n        filename,\n        this._externalErrorHandler,\n        this._rootParser,\n        this.fileHandler\n      );\n\n      includedStory = parser.ParseStory();\n    }\n\n    this.RemoveOpenFilename(fullFilename);\n\n    // Return valid IncludedFile object even if there were errors when parsing.\n    // We don't want to attempt to re-parse the include line as something else,\n    // and we want to include the bits that *are* valid, so we don't generate\n    // more errors than necessary.\n    return new IncludedFile(includedStory);\n  };\n\n  public readonly FilenameIsAlreadyOpen = (fullFilename: string): boolean =>\n    this._rootParser._openFilenames.includes(fullFilename);\n\n  public readonly AddOpenFilename = (fullFilename: string): void => {\n    this._rootParser._openFilenames.push(fullFilename);\n  };\n\n  public readonly RemoveOpenFilename = (fullFilename: string) => {\n    this._rootParser._openFilenames.splice(\n      this._rootParser._openFilenames.indexOf(fullFilename),\n      1\n    );\n  };\n\n  /**\n   * End Include section.\n   */\n\n  /**\n   * Begin Knot section.\n   */\n\n  public readonly KnotDefinition = (): Knot | null => {\n    const knotDecl: FlowDecl = this.Parse(this.KnotDeclaration) as FlowDecl;\n    if (knotDecl === null) {\n      return null;\n    }\n\n    this.Expect(\n      this.EndOfLine,\n      \"end of line after knot name definition\",\n      this.SkipToNextLine\n    );\n\n    const innerKnotStatements: ParseRule = (): ParsedObject[] =>\n      this.StatementsAtLevel(StatementLevel.Knot);\n\n    const content = this.Expect(\n      innerKnotStatements,\n      \"at least one line within the knot\",\n      this.KnotStitchNoContentRecoveryRule\n    ) as ParsedObject[];\n\n    return new Knot(knotDecl.name, content, knotDecl.args, knotDecl.isFunction);\n  };\n\n  public readonly KnotDeclaration = (): FlowDecl | null => {\n    this.Whitespace();\n\n    if (this.KnotTitleEquals() === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const identifier: Identifier = this.Parse(\n      this.IdentifierWithMetadata\n    ) as Identifier;\n    let knotName: Identifier;\n\n    const isFunc: boolean = identifier?.name === \"function\";\n    if (isFunc) {\n      this.Expect(this.Whitespace, \"whitespace after the 'function' keyword\");\n\n      knotName = this.Parse(this.IdentifierWithMetadata) as Identifier;\n    } else {\n      knotName = identifier;\n    }\n\n    if (knotName === null) {\n      this.Error(`Expected the name of the ${isFunc ? \"function\" : \"knot\"}`);\n      knotName = new Identifier(\"\"); // prevent later null ref\n    }\n\n    this.Whitespace();\n\n    const parameterNames: Argument[] = this.Parse(\n      this.BracketedKnotDeclArguments\n    ) as Argument[];\n\n    this.Whitespace();\n\n    // Optional equals after name\n    this.Parse(this.KnotTitleEquals);\n\n    return new FlowDecl(knotName, parameterNames, isFunc);\n  };\n\n  public readonly KnotTitleEquals = (): string | null => {\n    // 2+ \"=\" starts a knot\n    const multiEquals = this.ParseCharactersFromString(\"=\");\n    if (multiEquals === null || multiEquals.length <= 1) {\n      return null;\n    }\n\n    return multiEquals;\n  };\n\n  public readonly StitchDefinition = (): ParseRuleReturn => {\n    const decl = this.Parse(this.StitchDeclaration) as FlowDecl;\n    if (decl === null) {\n      return null;\n    }\n\n    this.Expect(\n      this.EndOfLine,\n      \"end of line after stitch name\",\n      this.SkipToNextLine\n    );\n\n    const innerStitchStatements: ParseRule = () =>\n      this.StatementsAtLevel(StatementLevel.Stitch);\n\n    const content = this.Expect(\n      innerStitchStatements,\n      \"at least one line within the stitch\",\n      this.KnotStitchNoContentRecoveryRule\n    ) as ParsedObject[];\n\n    return new Stitch(decl.name, content, decl.args, decl.isFunction);\n  };\n\n  public readonly StitchDeclaration = (): FlowDecl | null => {\n    this.Whitespace();\n\n    // Single \"=\" to define a stitch\n    if (this.ParseString(\"=\") === null) {\n      return null;\n    }\n\n    // If there's more than one \"=\", that's actually a knot definition (or divert), so this rule should fail\n    if (this.ParseString(\"=\") !== null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // Stitches aren't allowed to be functions, but we parse it anyway and report the error later\n    const isFunc: boolean = this.ParseString(\"function\") !== null;\n    if (isFunc) {\n      this.Whitespace();\n    }\n\n    const stitchName: Identifier = this.Parse(\n      this.IdentifierWithMetadata\n    ) as Identifier;\n    if (stitchName === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const flowArgs: Argument[] = this.Parse(\n      this.BracketedKnotDeclArguments\n    ) as Argument[];\n\n    this.Whitespace();\n\n    return new FlowDecl(stitchName, flowArgs, isFunc);\n  };\n\n  public readonly KnotStitchNoContentRecoveryRule = (): ParseRuleReturn => {\n    // Jump ahead to the next knot or the end of the file\n    this.ParseUntil(this.KnotDeclaration, new CharacterSet(\"=\"), null);\n\n    const recoveredFlowContent: ParsedObject[] = [new Text(\"<ERROR IN FLOW>\")];\n\n    return recoveredFlowContent;\n  };\n\n  public readonly BracketedKnotDeclArguments = (): Argument[] | null => {\n    if (this.ParseString(\"(\") === null) {\n      return null;\n    }\n\n    let flowArguments = this.Interleave<Argument>(\n      this.Spaced(this.FlowDeclArgument),\n      this.Exclude(this.String(\",\"))\n    );\n\n    this.Expect(this.String(\")\"), \"closing ')' for parameter list\");\n\n    // If no parameters, create an empty list so that this method is type safe and\n    // doesn't attempt to return the ParseSuccess object\n    if (flowArguments === null) {\n      flowArguments = [];\n    }\n\n    return flowArguments;\n  };\n\n  public readonly FlowDeclArgument = (): Argument | null => {\n    // Possible forms:\n    //  name\n    //  -> name      (variable divert target argument\n    //  ref name\n    //  ref -> name  (variable divert target by reference)\n    const firstIden = this.Parse(this.IdentifierWithMetadata) as Identifier;\n    this.Whitespace();\n\n    const divertArrow = this.ParseDivertArrow();\n\n    this.Whitespace();\n\n    const secondIden = this.Parse(this.IdentifierWithMetadata) as Identifier;\n\n    if (firstIden == null && secondIden === null) {\n      return null;\n    }\n\n    const flowArg = new Argument();\n    if (divertArrow !== null) {\n      flowArg.isDivertTarget = true;\n    }\n\n    // Passing by reference\n    if (firstIden !== null && firstIden.name === \"ref\") {\n      if (secondIden === null) {\n        this.Error(\"Expected an parameter name after 'ref'\");\n      }\n\n      flowArg.identifier = secondIden;\n      flowArg.isByReference = true;\n    } else {\n      // Simple argument name\n      if (flowArg.isDivertTarget) {\n        flowArg.identifier = secondIden;\n      } else {\n        flowArg.identifier = firstIden;\n      }\n\n      if (flowArg.identifier === null) {\n        this.Error(\"Expected an parameter name\");\n      }\n\n      flowArg.isByReference = false;\n    }\n\n    return flowArg;\n  };\n\n  public readonly ExternalDeclaration = (): ExternalDeclaration | null => {\n    this.Whitespace();\n\n    const external = this.Parse(\n      this.IdentifierWithMetadata\n    ) as Identifier | null;\n    if (external === null || external.name != \"EXTERNAL\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const funcIdentifier: Identifier =\n      (this.Expect(\n        this.IdentifierWithMetadata,\n        \"name of external function\"\n      ) as Identifier | null) || new Identifier(\"\");\n\n    this.Whitespace();\n\n    let parameterNames = this.Expect(\n      this.BracketedKnotDeclArguments,\n      `declaration of arguments for EXTERNAL, even if empty, i.e. 'EXTERNAL ${funcIdentifier}()'`\n    ) as Argument[];\n\n    if (parameterNames === null) {\n      parameterNames = [];\n    }\n\n    const argNames = parameterNames\n      .map((arg) => arg.identifier?.name)\n      .filter(filterUndef);\n\n    return new ExternalDeclaration(funcIdentifier, argNames);\n  };\n\n  /**\n   * End Knot section.\n   */\n\n  /**\n   * Start Logic section.\n   */\n\n  private _identifierCharSet: CharacterSet | null = null;\n\n  get identifierCharSet(): CharacterSet {\n    if (this._identifierCharSet === null) {\n      (this._identifierCharSet = new CharacterSet())\n        .AddRange(\"A\", \"Z\")\n        .AddRange(\"a\", \"z\")\n        .AddRange(\"0\", \"9\")\n        .Add(\"_\");\n\n      // Enable non-ASCII characters for story identifiers.\n      this.ExtendIdentifierCharacterRanges(this._identifierCharSet);\n    }\n\n    return this._identifierCharSet;\n  }\n\n  public readonly LogicLine = (): ParsedObject | null => {\n    this.Whitespace();\n\n    if (this.ParseString(\"~\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    // Some example lines we need to be able to distinguish between:\n    // ~ temp x = 5  -- var decl + assign\n    // ~ temp x      -- var decl\n    // ~ x = 5       -- var assign\n    // ~ x           -- expr (not var decl or assign)\n    // ~ f()         -- expr\n    // We don't treat variable decl/assign as an expression since we don't want an assignment\n    // to have a return value, or to be used in compound expressions.\n    const afterTilde: ParseRule = () =>\n      this.OneOf([\n        this.ReturnStatement,\n        this.TempDeclarationOrAssignment,\n        this.Expression,\n      ]);\n\n    let result = this.Expect(\n      afterTilde,\n      \"expression after '~'\",\n      this.SkipToNextLine\n    ) as ParsedObject;\n\n    // Prevent further errors, already reported expected expression and have skipped to next line.\n    if (result === null) {\n      return new ContentList();\n    }\n\n    // Parse all expressions, but tell the writer off if they did something useless like:\n    //  ~ 5 + 4\n    // And even:\n    //  ~ false && myFunction()\n    // ...since it's bad practice, and won't do what they expect if\n    // they're expecting C's lazy evaluation.\n    if (\n      result instanceof Expression &&\n      !(result instanceof FunctionCall || result instanceof IncDecExpression)\n    ) {\n      this.Error(\n        \"Logic following a '~' can't be that type of expression. It can only be something like:\\n\\t~ return\\n\\t~ var x = blah\\n\\t~ x++\\n\\t~ myFunction()\"\n      );\n    }\n\n    // Line is pure function call? e.g.\n    //  ~ f()\n    // Add extra pop to make sure we tidy up after ourselves.\n    // We no longer need anything on the evaluation stack.\n    const funCall = asOrNull(result, FunctionCall);\n    if (funCall) {\n      funCall.shouldPopReturnedValue = true;\n    }\n\n    // If the expression contains a function call, then it could produce a text side effect,\n    // in which case it needs a newline on the end. e.g.\n    //  ~ printMyName()\n    //  ~ x = 1 + returnAValueAndAlsoPrintStuff()\n    // If no text gets printed, then the extra newline will have to be culled later.\n    // Multiple newlines on the output will be removed, so there will be no \"leak\" for\n    // long running calculations. It's disappointingly messy though :-/\n    if (result.Find(FunctionCall)() !== null) {\n      result = new ContentList(\n        result as unknown as ParsedObject[],\n        new Text(\"\\n\")\n      );\n    }\n\n    this.Expect(this.EndOfLine, \"end of line\", this.SkipToNextLine);\n\n    return result as ParsedObject;\n  };\n\n  public readonly VariableDeclaration = (): ParsedObject | null => {\n    this.Whitespace();\n\n    const id = this.Parse(this.Identifier);\n    if (id !== \"VAR\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const varName = this.Expect(\n      this.IdentifierWithMetadata,\n      \"variable name\"\n    ) as Identifier;\n\n    this.Whitespace();\n\n    this.Expect(\n      this.String(\"=\"),\n      \"the '=' for an assignment of a value, e.g. '= 5' (initial values are mandatory)\"\n    );\n\n    this.Whitespace();\n\n    const definition = this.Expect(this.Expression, \"initial value for \");\n\n    const expr = definition as Expression;\n\n    if (expr) {\n      const check =\n        expr instanceof NumberExpression ||\n        expr instanceof StringExpression ||\n        expr instanceof DivertTarget ||\n        expr instanceof VariableReference ||\n        expr instanceof List;\n\n      if (!check) {\n        this.Error(\n          \"initial value for a variable must be a number, constant, list or divert target\"\n        );\n      }\n\n      if (this.Parse(this.ListElementDefinitionSeparator) !== null) {\n        this.Error(\n          \"Unexpected ','. If you're trying to declare a new list, use the LIST keyword, not VAR\"\n        );\n      } else if (expr instanceof StringExpression) {\n        // Ensure string expressions are simple\n        const strExpr = expr as StringExpression;\n        if (!strExpr.isSingleString) {\n          this.Error(\"Constant strings cannot contain any logic.\");\n        }\n      }\n\n      const result = new VariableAssignment({\n        assignedExpression: expr,\n        isGlobalDeclaration: true,\n        variableIdentifier: varName,\n      });\n\n      return result;\n    }\n\n    return null;\n  };\n\n  public readonly ListDeclaration = (): VariableAssignment | null => {\n    this.Whitespace();\n\n    const id = this.Parse(this.Identifier);\n    if (id != \"LIST\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const varName = this.Expect(\n      this.IdentifierWithMetadata,\n      \"list name\"\n    ) as Identifier;\n\n    this.Whitespace();\n\n    this.Expect(\n      this.String(\"=\"),\n      \"the '=' for an assignment of the list definition\"\n    );\n\n    this.Whitespace();\n\n    const definition = this.Expect(\n      this.ListDefinition,\n      \"list item names\"\n    ) as ListDefinition;\n\n    if (definition) {\n      definition.identifier = new Identifier(varName.name);\n      return new VariableAssignment({\n        variableIdentifier: varName,\n        listDef: definition,\n      });\n    }\n\n    return null;\n  };\n\n  public readonly ListDefinition = (): ListDefinition | null => {\n    this.AnyWhitespace();\n\n    const allElements = this.SeparatedList(\n      this.ListElementDefinition,\n      this.ListElementDefinitionSeparator\n    ) as ListElementDefinition[];\n\n    if (allElements === null) {\n      return null;\n    }\n\n    return new ListDefinition(allElements);\n  };\n\n  public readonly ListElementDefinitionSeparator = (): string | null => {\n    this.AnyWhitespace();\n\n    if (this.ParseString(\",\") === null) {\n      return null;\n    }\n\n    this.AnyWhitespace();\n\n    return \",\";\n  };\n\n  public readonly ListElementDefinition = () => {\n    const inInitialList = this.ParseString(\"(\") !== null;\n    let needsToCloseParen = inInitialList;\n\n    this.Whitespace();\n\n    const name = this.Parse(this.IdentifierWithMetadata) as Identifier | null;\n    if (name === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    if (inInitialList) {\n      if (this.ParseString(\")\") != null) {\n        needsToCloseParen = false;\n        this.Whitespace();\n      }\n    }\n\n    let elementValue: number | null = null;\n    if (this.ParseString(\"=\") !== null) {\n      this.Whitespace();\n\n      const elementValueNum = this.Expect(\n        this.ExpressionInt,\n        \"value to be assigned to list item\"\n      ) as NumberExpression;\n\n      if (elementValueNum !== null) {\n        elementValue = elementValueNum.value as number;\n      }\n\n      if (needsToCloseParen) {\n        this.Whitespace();\n\n        if (this.ParseString(\")\") !== null) {\n          needsToCloseParen = false;\n        }\n      }\n    }\n\n    if (needsToCloseParen) {\n      this.Error(\"Expected closing ')'\");\n    }\n\n    return new ListElementDefinition(name, inInitialList, elementValue);\n  };\n\n  public readonly ConstDeclaration = (): ParsedObject | null => {\n    this.Whitespace();\n\n    const id = this.Parse(this.Identifier);\n    if (id !== \"CONST\") {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const varName = this.Expect(\n      this.IdentifierWithMetadata,\n      \"constant name\"\n    ) as Identifier;\n\n    this.Whitespace();\n\n    this.Expect(\n      this.String(\"=\"),\n      \"the '=' for an assignment of a value, e.g. '= 5' (initial values are mandatory)\"\n    );\n\n    this.Whitespace();\n\n    const expr = this.Expect(\n      this.Expression,\n      \"initial value for \"\n    ) as Expression;\n\n    const check =\n      expr instanceof NumberExpression ||\n      expr instanceof DivertTarget ||\n      expr instanceof StringExpression;\n\n    if (!check) {\n      this.Error(\n        \"initial value for a constant must be a number or divert target\"\n      );\n    } else if (expr instanceof StringExpression) {\n      // Ensure string expressions are simple\n      const strExpr = expr as StringExpression;\n      if (!strExpr.isSingleString) {\n        this.Error(\"Constant strings cannot contain any logic.\");\n      }\n    }\n\n    const result = new ConstantDeclaration(varName, expr);\n\n    return result;\n  };\n\n  public readonly InlineLogicOrGlueOrStartTag = (): ParsedObject =>\n    this.OneOf([this.InlineLogic, this.Glue, this.StartTag]) as ParsedObject;\n\n  public readonly Glue = (): Glue | null => {\n    // Don't want to parse whitespace, since it might be important\n    // surrounding the glue.\n    const glueStr = this.ParseString(\"<>\");\n    if (glueStr !== null) {\n      return new Glue(new RuntimeGlue());\n    }\n\n    return null;\n  };\n\n  public readonly InlineLogic = () => {\n    if (this.ParseString(\"{\") === null) {\n      return null;\n    }\n\n    let wasParsingString = this.parsingStringExpression;\n    let wasTagActive = this.tagActive;\n\n    this.Whitespace();\n\n    const logic = this.Expect(\n      this.InnerLogic,\n      \"some kind of logic, conditional or sequence within braces: { ... }\"\n    ) as ParsedObject;\n\n    if (logic === null) {\n      this.parsingStringExpression = wasParsingString;\n      return null;\n    }\n\n    this.DisallowIncrement(logic);\n\n    let contentList = asOrNull(logic, ContentList);\n    if (!contentList) {\n      contentList = new ContentList(logic as unknown as ParsedObject[]);\n    }\n\n    this.Whitespace();\n\n    this.Expect(this.String(\"}\"), \"closing brace '}' for inline logic\");\n\n    // Allow nested strings and logic\n    this.parsingStringExpression = wasParsingString;\n\n    // Difference between:\n    //\n    //     1) A thing # {image}.jpg\n    //     2) A {red #red|blue #blue} sequence.\n    //\n    //  When logic ends in (1) we still want tag to continue.\n    //  When logic ends in (2) we want to auto-end the tag.\n    //  Side note: we simply disallow tags within strings.\n    if (!wasTagActive) this.EndTagIfNecessary(contentList);\n\n    return contentList;\n  };\n\n  public readonly InnerLogic = (): ParsedObject | null => {\n    this.Whitespace();\n\n    // Explicitly try the combinations of inner logic\n    // that could potentially have conflicts first.\n\n    // Explicit sequence annotation?\n    const explicitSeqType: SequenceType = this.ParseObject(\n      this.SequenceTypeAnnotation\n    ) as SequenceType;\n\n    if (explicitSeqType !== null) {\n      const contentLists = this.Expect(\n        this.InnerSequenceObjects,\n        \"sequence elements (for cycle/stoping etc)\"\n      ) as ContentList[];\n\n      if (contentLists === null) {\n        return null;\n      }\n\n      return new Sequence(contentLists, explicitSeqType);\n    }\n\n    // Conditional with expression?\n    const initialQueryExpression = this.Parse(\n      this.ConditionExpression\n    ) as Expression;\n    if (initialQueryExpression) {\n      const conditional = this.Expect(\n        () => this.InnerConditionalContent(initialQueryExpression),\n        \"conditional content following query\"\n      ) as Conditional;\n\n      return conditional;\n    }\n\n    // Now try to evaluate each of the \"full\" rules in turn\n    const rules: ParseRule[] = [\n      // Conditional still necessary, since you can have a multi-line conditional\n      // without an initial query expression:\n      // {\n      //   - true:  this is true\n      //   - false: this is false\n      // }\n      this.InnerConditionalContent as ParseRule,\n      this.InnerSequence,\n      this.InnerExpression,\n    ];\n\n    //let wasTagActiveAtStartOfScope = this.tagActive;\n\n    // Adapted from \"OneOf\" structuring rule except that in\n    // order for the rule to succeed, it has to maximally\n    // cover the entire string within the { }. Used to\n    // differentiate between:\n    //  {myVar}                 -- Expression (try first)\n    //  {my content is jolly}   -- sequence with single element\n    for (const rule of rules) {\n      const ruleId: number = this.BeginRule();\n\n      const result: ParsedObject = this.ParseObject(rule) as ParsedObject;\n      if (result) {\n        // Not yet at end?\n        if (this.Peek(this.Spaced(this.String(\"}\"))) === null) {\n          this.FailRule(ruleId);\n        } else {\n          // Full parse of content within braces\n          return this.SucceedRule(ruleId, result) as ParsedObject;\n        }\n      } else {\n        this.FailRule(ruleId);\n      }\n    }\n\n    return null;\n  };\n\n  public readonly InnerExpression = (): ParsedObject => {\n    const expr = this.Parse(this.Expression) as Expression;\n    if (expr) {\n      expr.outputWhenComplete = true;\n    }\n\n    return expr;\n  };\n\n  public readonly IdentifierWithMetadata = (): Identifier | null => {\n    const id = this.Identifier();\n    if (id === null) {\n      return null;\n    }\n    return new Identifier(id);\n  };\n\n  // Note: we allow identifiers that start with a number,\n  // but not if they *only* comprise numbers\n  public readonly Identifier = (): string | null => {\n    // Parse remaining characters (if any)\n    const name = this.ParseCharactersFromCharSet(this.identifierCharSet);\n    if (name === null) {\n      return null;\n    }\n\n    // Reject if it's just a number\n    let isNumberCharsOnly: boolean = true;\n    for (let c of name) {\n      if (!(c >= \"0\" && c <= \"9\")) {\n        isNumberCharsOnly = false;\n        break;\n      }\n    }\n\n    if (isNumberCharsOnly) {\n      return null;\n    }\n\n    return name;\n  };\n\n  /**\n   * End Logic section.\n   */\n\n  /**\n   * Begin Sequences section.\n   */\n\n  public _sequenceTypeSymbols: CharacterSet = new CharacterSet(\"!&~$\");\n\n  public readonly InnerSequence = (): Sequence | null => {\n    this.Whitespace();\n\n    // Default sequence type\n    let seqType: SequenceType = SequenceType.Stopping;\n\n    // Optional explicit sequence type\n    const parsedSeqType: SequenceType = this.Parse(\n      this.SequenceTypeAnnotation\n    ) as SequenceType;\n\n    if (parsedSeqType !== null) {\n      seqType = parsedSeqType;\n    }\n\n    const contentLists = this.Parse(this.InnerSequenceObjects) as ContentList[];\n    if (contentLists === null || contentLists.length <= 1) {\n      return null;\n    }\n\n    return new Sequence(contentLists, seqType);\n  };\n\n  public readonly SequenceTypeAnnotation = (): ParseRuleReturn => {\n    let annotation = this.Parse(\n      this.SequenceTypeSymbolAnnotation\n    ) as SequenceType;\n\n    if (annotation === null) {\n      annotation = this.Parse(this.SequenceTypeWordAnnotation) as SequenceType;\n    }\n\n    if (annotation === null) {\n      return null;\n    }\n\n    switch (annotation) {\n      case SequenceType.Once:\n      case SequenceType.Cycle:\n      case SequenceType.Stopping:\n      case SequenceType.Shuffle:\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n      case SequenceType.Shuffle | SequenceType.Stopping:\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\n      case SequenceType.Shuffle | SequenceType.Once:\n        break;\n      default:\n        this.Error(`Sequence type combination not supported: ${annotation}`);\n        return SequenceType.Stopping;\n    }\n\n    return annotation;\n  };\n\n  public readonly SequenceTypeSymbolAnnotation = (): ParseRuleReturn => {\n    if (this._sequenceTypeSymbols === null) {\n      this._sequenceTypeSymbols = new CharacterSet(\"!&~$ \");\n    }\n\n    let sequenceType = 0 as SequenceType;\n    const sequenceAnnotations = this.ParseCharactersFromCharSet(\n      this._sequenceTypeSymbols\n    );\n\n    if (sequenceAnnotations === null) {\n      return null;\n    }\n\n    for (const symbolChar of sequenceAnnotations) {\n      switch (symbolChar) {\n        case \"!\":\n          sequenceType |= SequenceType.Once;\n          break;\n        case \"&\":\n          sequenceType |= SequenceType.Cycle;\n          break;\n        case \"~\":\n          sequenceType |= SequenceType.Shuffle;\n          break;\n        case \"$\":\n          sequenceType |= SequenceType.Stopping;\n          break;\n      }\n    }\n\n    if (sequenceType === (0 as SequenceType)) {\n      return null;\n    }\n\n    return sequenceType;\n  };\n\n  public readonly SequenceTypeWordAnnotation = (): ParseRuleReturn => {\n    const sequenceTypes = this.Interleave<SequenceType | null>(\n      this.SequenceTypeSingleWord,\n      this.Exclude(this.Whitespace)\n    );\n\n    if (sequenceTypes === null || sequenceTypes.length === 0) {\n      return null;\n    }\n\n    if (this.ParseString(\":\") === null) {\n      return null;\n    }\n\n    let combinedSequenceType = 0 as SequenceType;\n    for (const seqType of sequenceTypes) {\n      combinedSequenceType |= seqType!;\n    }\n\n    return combinedSequenceType;\n  };\n\n  public readonly SequenceTypeSingleWord = () => {\n    let seqType: SequenceType | null = null;\n\n    const word = this.Parse(this.IdentifierWithMetadata) as Identifier | null;\n\n    if (word !== null) {\n      switch (word.name) {\n        case \"once\":\n          seqType = SequenceType.Once;\n          break;\n        case \"cycle\":\n          seqType = SequenceType.Cycle;\n          break;\n        case \"shuffle\":\n          seqType = SequenceType.Shuffle;\n          break;\n        case \"stopping\":\n          seqType = SequenceType.Stopping;\n          break;\n      }\n    }\n\n    if (seqType === null) {\n      return null;\n    }\n\n    return seqType;\n  };\n\n  public readonly InnerSequenceObjects = (): ContentList[] => {\n    const multiline = this.Parse(this.Newline) !== null;\n\n    let result: ContentList[] | null = null;\n    if (multiline) {\n      result = this.Parse(this.InnerMultilineSequenceObjects) as ContentList[];\n    } else {\n      result = this.Parse(this.InnerInlineSequenceObjects) as ContentList[];\n    }\n\n    return result;\n  };\n\n  public readonly InnerInlineSequenceObjects = (): ContentList[] | null => {\n    const interleavedContentAndPipes = this.Interleave<ParsedObject>(\n      this.Optional(this.MixedTextAndLogic),\n      this.String(\"|\"),\n      null,\n      false\n    );\n\n    if (interleavedContentAndPipes === null) {\n      return null;\n    }\n\n    const result = [];\n\n    // The content and pipes won't necessarily be perfectly interleaved in the sense that\n    // the content can be missing, but in that case it's intended that there's blank content.\n    let justHadContent: boolean = false;\n    for (const contentOrPipe of interleavedContentAndPipes) {\n      // Pipe/separator\n      if ((contentOrPipe as any) === \"|\") {\n        // Expected content, saw pipe - need blank content now\n        if (!justHadContent) {\n          // Add blank content\n          result.push(new ContentList());\n        }\n\n        justHadContent = false;\n      } else {\n        // Real content\n        const content = contentOrPipe as unknown as ParsedObject[];\n        if (content === null) {\n          this.Error(\n            `Expected content, but got ${contentOrPipe as unknown as string} (this is an ink compiler bug!)`\n          );\n        } else {\n          result.push(new ContentList(content));\n        }\n\n        justHadContent = true;\n      }\n    }\n\n    // Ended in a pipe? Need to insert final blank content\n    if (!justHadContent) {\n      result.push(new ContentList());\n    }\n\n    return result;\n  };\n\n  public readonly InnerMultilineSequenceObjects = (): ContentList[] | null => {\n    this.MultilineWhitespace();\n\n    const contentLists = this.OneOrMore(\n      this.SingleMultilineSequenceElement\n    ) as ContentList[];\n    if (contentLists === null) {\n      return null;\n    }\n\n    return contentLists;\n  };\n\n  public readonly SingleMultilineSequenceElement = () => {\n    this.Whitespace();\n\n    // Make sure we're not accidentally parsing a divert\n    if (this.ParseString(\"->\") !== null) {\n      return null;\n    }\n\n    if (this.ParseString(\"-\") === null) {\n      return null;\n    }\n\n    this.Whitespace();\n\n    const content: ParsedObject[] = this.StatementsAtLevel(\n      StatementLevel.InnerBlock\n    );\n\n    if (content === null) {\n      this.MultilineWhitespace();\n    } else {\n      // Add newline at the start of each branch\n      content.unshift(new Text(\"\\n\"));\n    }\n\n    return new ContentList(content);\n  };\n\n  /**\n   * End Sequences section.\n   */\n\n  /**\n   * Begin Statements section.\n   */\n\n  private _statementRulesAtLevel: ParseRule[][] = [];\n  private _statementBreakRulesAtLevel: ParseRule[][] = [];\n\n  public readonly StatementsAtLevel = (\n    level: StatementLevel\n  ): ParsedObject[] => {\n    // Check for error: Should not be allowed gather dashes within an inner block\n    if (level === StatementLevel.InnerBlock) {\n      const badGatherDashCount = this.Parse(this.GatherDashes) as ParsedObject;\n      if (badGatherDashCount !== null) {\n        this.Error(\n          \"You can't use a gather (the dashes) within the { curly braces } context. For multi-line sequences and conditions, you should only use one dash.\"\n        );\n      }\n    }\n\n    return this.Interleave<ParsedObject>(\n      this.Optional(this.MultilineWhitespace),\n      () => this.StatementAtLevel(level),\n      () => this.StatementsBreakForLevel(level)\n    );\n  };\n\n  public readonly StatementAtLevel = (level: StatementLevel): ParsedObject => {\n    const rulesAtLevel: ParseRule[] =\n      this._statementRulesAtLevel[level as number];\n    const statement = this.OneOf(rulesAtLevel) as ReturnType;\n\n    // For some statements, allow them to parse, but create errors, since\n    // writers may think they can use the statement, so it's useful to have\n    // the error message.\n    if (level === StatementLevel.Top) {\n      if (statement instanceof ReturnType) {\n        this.Error(\"should not have return statement outside of a knot\");\n      }\n    }\n\n    return statement;\n  };\n\n  public readonly StatementsBreakForLevel = (\n    level: StatementLevel\n  ): ParseRuleReturn => {\n    this.Whitespace();\n\n    const breakRules: ParseRule[] =\n      this._statementBreakRulesAtLevel[level as number];\n    const breakRuleResult = this.OneOf(breakRules);\n    if (breakRuleResult === null) {\n      return null;\n    }\n\n    return breakRuleResult;\n  };\n\n  public readonly GenerateStatementLevelRules = () => {\n    const levels: StatementLevel[] = Object.values(\n      StatementLevel\n    ) as StatementLevel[];\n\n    this._statementRulesAtLevel = \"f\"\n      .repeat(levels.length)\n      .split(\"f\")\n      .map(() => []);\n\n    this._statementBreakRulesAtLevel = \"f\"\n      .repeat(levels.length)\n      .split(\"f\")\n      .map(() => []);\n\n    for (const level of levels) {\n      const rulesAtLevel: ParseRule[] = [];\n      const breakingRules: ParseRule[] = [];\n\n      // Diverts can go anywhere\n      rulesAtLevel.push(this.Line(this.MultiDivert));\n\n      // Knots can only be parsed at Top/Global scope\n      if (level >= StatementLevel.Top) {\n        rulesAtLevel.push(this.KnotDefinition);\n      }\n\n      rulesAtLevel.push(this.Line(this.Choice));\n\n      rulesAtLevel.push(this.Line(this.AuthorWarning));\n\n      // Gather lines would be confused with multi-line block separators, like\n      // within a multi-line if statement\n      if (level > StatementLevel.InnerBlock) {\n        rulesAtLevel.push(this.Gather);\n      }\n\n      // Stitches (and gathers) can (currently) only go in Knots and top level\n      if (level >= StatementLevel.Knot) {\n        rulesAtLevel.push(this.StitchDefinition);\n      }\n\n      // Global variable declarations can go anywhere\n      rulesAtLevel.push(this.Line(this.ListDeclaration));\n      rulesAtLevel.push(this.Line(this.VariableDeclaration));\n      rulesAtLevel.push(this.Line(this.ConstDeclaration));\n      rulesAtLevel.push(this.Line(this.ExternalDeclaration));\n\n      // Global include can go anywhere\n      rulesAtLevel.push(this.Line(this.IncludeStatement));\n\n      // Normal logic / text can go anywhere\n      rulesAtLevel.push(this.LogicLine);\n      rulesAtLevel.push(this.LineOfMixedTextAndLogic);\n\n      // --------\n      // Breaking rules\n\n      // Break current knot with a new knot\n      if (level <= StatementLevel.Knot) {\n        breakingRules.push(this.KnotDeclaration);\n      }\n\n      // Break current stitch with a new stitch\n      if (level <= StatementLevel.Stitch) {\n        breakingRules.push(this.StitchDeclaration);\n      }\n\n      // Breaking an inner block (like a multi-line condition statement)\n      if (level <= StatementLevel.InnerBlock) {\n        breakingRules.push(this.ParseDashNotArrow);\n        breakingRules.push(this.String(\"}\"));\n      }\n\n      this._statementRulesAtLevel[level as number] = rulesAtLevel;\n      this._statementBreakRulesAtLevel[level as number] = breakingRules;\n    }\n  };\n\n  public readonly SkipToNextLine = (): typeof ParseSuccess => {\n    this.ParseUntilCharactersFromString(\"\\n\\r\");\n    this.ParseNewline();\n\n    return ParseSuccess;\n  };\n\n  // Modifier to turn a rule into one that expects a newline on the end.\n  // e.g. anywhere you can use \"MixedTextAndLogic\" as a rule, you can use\n  // \"Line(MixedTextAndLogic)\" to specify that it expects a newline afterwards.\n  public readonly Line =\n    (inlineRule: ParseRule): ParseRule =>\n    () => {\n      const result = this.ParseObject(inlineRule);\n      if (result === null) {\n        return null;\n      }\n\n      this.Expect(this.EndOfLine, \"end of line\", this.SkipToNextLine);\n\n      return result;\n    };\n\n  /**\n   * End Statements section.\n   */\n\n  /**\n   * Begin Tags section.\n   */\n\n  public readonly StartTag = (): ParsedObject | null => {\n    this.Whitespace();\n\n    if (this.ParseString(\"#\") === null) {\n      return null;\n    }\n\n    if (this.parsingStringExpression) {\n      this.Error(\n        \"Tags aren't allowed inside of strings. Please use \\\\# if you want a hash symbol.\"\n      );\n    }\n\n    let result: ParsedObject | null = null;\n    if (this.tagActive) {\n      let contentList = new ContentList();\n      contentList.AddContent(new Tag(/*isStart:*/ false));\n      contentList.AddContent(new Tag(/*isStart:*/ true));\n      result = contentList;\n    } else {\n      result = new Tag(/*isStart:*/ true);\n    }\n    this.tagActive = true;\n\n    this.Whitespace();\n\n    return result;\n  };\n\n  public EndTagIfNecessary(outputContentList: ParsedObject[] | null): void;\n  public EndTagIfNecessary(outputContentList: ContentList | null): void;\n  public EndTagIfNecessary(\n    outputContentList: ParsedObject[] | ContentList | null\n  ): void {\n    if (this.tagActive) {\n      if (outputContentList != null) {\n        if (outputContentList instanceof ContentList) {\n          outputContentList.AddContent(new Tag(/*isStart:*/ false));\n        } else {\n          outputContentList.push(new Tag(/*isStart:*/ false));\n        }\n      }\n      this.tagActive = false;\n    }\n  }\n\n  /**\n   * End Tags section.\n   */\n\n  /**\n   * Begin Whitespace section.\n   */\n\n  private _inlineWhitespaceChars: CharacterSet = new CharacterSet(\" \\t\");\n\n  // Handles both newline and endOfFile\n  public readonly EndOfLine = () => this.OneOf([this.Newline, this.EndOfFile]);\n\n  // Allow whitespace before the actual newline\n  public readonly Newline = (): typeof ParseSuccess | null => {\n    this.Whitespace();\n\n    const gotNewline: boolean = this.ParseNewline() !== null;\n\n    // Optional \\r, definite \\n to support Windows (\\r\\n) and Mac/Unix (\\n)\n\n    if (!gotNewline) {\n      return null;\n    }\n\n    return ParseSuccess;\n  };\n\n  public readonly EndOfFile = (): typeof ParseSuccess | null => {\n    this.Whitespace();\n\n    if (!this.endOfInput) return null;\n\n    return ParseSuccess;\n  };\n\n  // General purpose space, returns N-count newlines (fails if no newlines)\n  public readonly MultilineWhitespace = (): typeof ParseSuccess | null => {\n    let newlines: ParseRuleReturn[] | null = this.OneOrMore(this.Newline);\n    if (newlines === null) {\n      return null;\n    }\n\n    // Use content field of Token to say how many newlines there were\n    // (in most circumstances it's unimportant)\n    const numNewlines: number = newlines.length;\n    if (numNewlines >= 1) {\n      return ParseSuccess;\n    }\n\n    return null;\n  };\n\n  public readonly Whitespace = (): typeof ParseSuccess | null => {\n    const doneParsed = this.ParseCharactersFromCharSet(\n      this._inlineWhitespaceChars\n    );\n\n    if (doneParsed !== null) {\n      return ParseSuccess;\n    }\n\n    return null;\n  };\n\n  public readonly Spaced =\n    (rule: ParseRule): ParseRule =>\n    () => {\n      this.Whitespace();\n\n      const result = this.ParseObject(rule);\n      if (result === null) {\n        return null;\n      }\n\n      this.Whitespace();\n\n      return result;\n    };\n\n  public readonly AnyWhitespace = (): typeof ParseSuccess | null => {\n    let anyWhitespace: boolean = false;\n\n    while (this.OneOf([this.Whitespace, this.MultilineWhitespace]) !== null) {\n      anyWhitespace = true;\n    }\n\n    return anyWhitespace ? ParseSuccess : null;\n  };\n\n  public readonly MultiSpaced =\n    (rule: ParseRule): ParseRuleReturn =>\n    () => {\n      this.AnyWhitespace();\n\n      const result = this.ParseObject(rule);\n      if (result === null) {\n        return null;\n      }\n\n      this.AnyWhitespace();\n\n      return result;\n    };\n\n  private _filename: string | null = null;\n  private _externalErrorHandler: ErrorHandler | null = null;\n  private _fileHandler: IFileHandler | null = null;\n\n  /**\n   * End Whitespace section.\n   */\n}\n","import { IFileHandler } from \"../IFileHandler\";\n\nexport class JsonFileHandler implements IFileHandler {\n  constructor(public readonly fileHierarchy: Record<string, string>) {}\n\n  readonly ResolveInkFilename = (filename: string): string => {\n    if (Object.keys(this.fileHierarchy).includes(filename)) return filename;\n    throw new Error(\n      `Cannot locate ${filename}. Are you trying a relative import ? This is not yet implemented.`\n    );\n  };\n\n  readonly LoadInkFileContents = (filename: string): string => {\n    if (Object.keys(this.fileHierarchy).includes(filename)) {\n      return this.fileHierarchy[filename];\n    } else {\n      throw new Error(`Cannot open ${filename}.`);\n    }\n  };\n}\n","import { CompilerOptions } from \"./CompilerOptions\";\nimport { DebugSourceRange } from \"./DebugSourceRange\";\nimport { ErrorType } from \"./Parser/ErrorType\";\nimport { InkParser } from \"./Parser/InkParser\";\nimport { Story } from \"../engine/Story\";\nimport { Story as ParsedStory } from \"./Parser/ParsedHierarchy/Story\";\nimport { DebugMetadata } from \"../engine/DebugMetadata\";\nimport { StringValue } from \"../engine/Value\";\nimport { asOrNull } from \"../engine/TypeAssertion\";\nimport { GenerateStoryStats, Stats } from \"./Stats\";\n\nexport { CompilerOptions } from \"./CompilerOptions\";\nexport { InkParser } from \"./Parser/InkParser\";\nexport { StatementLevel } from \"./Parser/StatementLevel\";\nexport { JsonFileHandler } from \"./FileHandler/JsonFileHandler\";\nexport { InkList, Story } from \"../engine/Story\";\n\nexport class Compiler {\n  private _errors: string[] = [];\n  get errors(): string[] {\n    return this._errors;\n  }\n\n  private _warnings: string[] = [];\n  get warnings(): string[] {\n    return this._warnings;\n  }\n\n  private _authorMessages: string[] = [];\n  get authorMessages(): string[] {\n    return this._authorMessages;\n  }\n\n  private _inputString: string;\n  get inputString(): string {\n    return this._inputString;\n  }\n\n  private _options: CompilerOptions;\n  get options(): CompilerOptions {\n    return this._options;\n  }\n\n  private _parsedStory: ParsedStory | null = null;\n  get parsedStory(): ParsedStory {\n    if (!this._parsedStory) {\n      throw new Error();\n    }\n\n    return this._parsedStory;\n  }\n\n  private _runtimeStory: Story | null = null;\n  get runtimeStory(): Story {\n    if (!this._runtimeStory) {\n      throw new Error(\"Compilation failed.\");\n    }\n\n    return this._runtimeStory;\n  }\n\n  private _parser: InkParser | null = null;\n  get parser(): InkParser {\n    if (!this._parser) {\n      throw new Error();\n    }\n\n    return this._parser;\n  }\n\n  private _debugSourceRanges: DebugSourceRange[] = [];\n  get debugSourceRanges(): DebugSourceRange[] {\n    return this._debugSourceRanges;\n  }\n\n  constructor(inkSource: string, options: CompilerOptions | null = null) {\n    this._inputString = inkSource;\n    this._options = options || new CompilerOptions();\n  }\n\n  public readonly Compile = (): Story => {\n    this._parser = new InkParser(\n      this.inputString,\n      this.options.sourceFilename || null,\n      this.OnError,\n      null,\n      this.options.fileHandler\n    );\n\n    this._parsedStory = this.parser.ParseStory();\n\n    if (this.errors.length === 0) {\n      this.parsedStory.countAllVisits = this.options.countAllVisits;\n      this._runtimeStory = this.parsedStory.ExportRuntime(this.OnError);\n    } else {\n      this._runtimeStory = null;\n    }\n\n    return this.runtimeStory;\n  };\n\n  public readonly RetrieveDebugSourceForLatestContent = (): void => {\n    for (const outputObj of this.runtimeStory.state.outputStream) {\n      const textContent = asOrNull(outputObj, StringValue);\n      if (textContent !== null) {\n        const range = new DebugSourceRange(\n          textContent.value?.length || 0,\n          textContent.debugMetadata,\n          textContent.value || \"unknown\"\n        );\n\n        this.debugSourceRanges.push(range);\n      }\n    }\n  };\n\n  public readonly GenerateStats = (): Stats | null => {\n    if (this._parsedStory === null) {\n      return null;\n    }\n    return GenerateStoryStats(this._parsedStory);\n  };\n\n  public readonly DebugMetadataForContentAtOffset = (\n    offset: number\n  ): DebugMetadata | null => {\n    let currOffset = 0;\n\n    let lastValidMetadata: DebugMetadata | null = null;\n    for (const range of this.debugSourceRanges) {\n      if (range.debugMetadata !== null) {\n        lastValidMetadata = range.debugMetadata;\n      }\n\n      if (offset >= currOffset && offset < currOffset + range.length) {\n        return lastValidMetadata;\n      }\n\n      currOffset += range.length;\n    }\n\n    return null;\n  };\n\n  public readonly OnError = (message: string, errorType: ErrorType) => {\n    switch (errorType) {\n      case ErrorType.Author:\n        this._authorMessages.push(message);\n        break;\n\n      case ErrorType.Warning:\n        this._warnings.push(message);\n        break;\n\n      case ErrorType.Error:\n        this._errors.push(message);\n        break;\n    }\n\n    if (this.options.errorHandler !== null) {\n      this.options.errorHandler(message, errorType);\n    }\n  };\n}\n","import { Choice } from \"./Parser/ParsedHierarchy/Choice\";\nimport { Divert } from \"./Parser/ParsedHierarchy/Divert/Divert\";\nimport { Gather } from \"./Parser/ParsedHierarchy/Gather/Gather\";\nimport { Knot } from \"./Parser/ParsedHierarchy/Knot\";\nimport { Stitch } from \"./Parser/ParsedHierarchy/Stitch\";\nimport { Story } from \"./Parser/ParsedHierarchy/Story\";\nimport { Text } from \"./Parser/ParsedHierarchy/Text\";\n\nexport interface Stats {\n  words: number;\n  knots: number;\n  stitches: number;\n  functions: number;\n  choices: number;\n  gathers: number;\n  diverts: number;\n}\n\nexport function GenerateStoryStats(story: Story): Stats {\n  let allText = story.FindAll(Text)();\n  let words = 0;\n  for (const text of allText) {\n    let wordsInThisStr = 0;\n    let wasWhiteSpace = true;\n    for (const c of text.text) {\n      if (c == \" \" || c == \"\\t\" || c == \"\\n\" || c == \"\\r\") {\n        wasWhiteSpace = true;\n      } else if (wasWhiteSpace) {\n        wordsInThisStr++;\n        wasWhiteSpace = false;\n      }\n    }\n\n    words += wordsInThisStr;\n  }\n\n  const knots = story.FindAll(Knot)();\n  const stitches = story.FindAll(Stitch)();\n  const choices = story.FindAll(Choice)();\n  const gathers = story.FindAll(Gather)((g) => g.debugMetadata != null);\n  const diverts = story.FindAll(Divert)();\n\n  return {\n    words,\n    knots: knots.length,\n    functions: knots.filter((k) => k.isFunction).length,\n    stitches: stitches.length,\n    gathers: gathers.length,\n    diverts: diverts.length - 1,\n    choices: choices.length,\n  };\n}\n"],"names":["CompilerOptions","constructor","sourceFilename","arguments","length","undefined","pluginNames","countAllVisits","errorHandler","fileHandler","this","DebugSourceRange","debugMetadata","text","ErrorType","Argument","identifier","isByReference","isDivertTarget","typeName","asOrNull","obj","type","unsafeTypeAssertion","asOrThrows","Error","asINamedContentOrNull","hasValidName","name","nullIfUndefined","isEquatable","Equals","filterUndef","element","ParsedObject","_this","_alreadyHadError","_alreadyHadWarning","_debugMetadata","_runtimeObject","content","parent","GetType","AddContent","subContent","sub","Array","isArray","ss","hasOwnProperty","push","InsertContent","index","splice","Find","queryFunc","tObj","nestedResult","FindAll","foundSoFar","found","Warning","message","source","value","hasOwnDebugMetadata","Boolean","story","ancestor","runtimeObject","GenerateRuntimeObject","runtimePath","path","containerForCounting","ancestry","result","reverse","ResolveReferences","context","isWarning","AuthorWarning","warningMessage","super","Path","_components","_componentsString","_isRelative","componentsString","Component","head","tail","concat","relative","isRelative","componentCount","tailComps","slice","self","lastComponent","lastComponentIdx","containsNamedComponent","i","l","isIndex","GetComponent","PathByAppendingPath","pathToAppend","p","upwardMoves","isParent","join","substring","componentStrings","split","str","test","parseInt","toString","otherPath","PathByAppendingComponent","c","Debug","ValueType","PushPopType","parentId","indexOrName","static","otherComp","Assert","condition","console","warn","trace","AssertType","variable","NullException","throwNullException","InkObject","_path","ownDebugMetadata","DebugLineNumberOfPath","root","rootContentContainer","targetContent","ContentAtPath","dm","startLineNumber","comps","child","container","Container","namedChild","unshift","indexOf","ResolvePath","nearestContainer","contentContainer","ConvertPathToRelative","globalPath","ownPath","minPathLength","Math","min","lastSharedPathCompIndex","ownComp","numUpwardsMoves","newPathComps","up","ToParent","down","CompactPathString","globalPathStr","relativePathStr","Copy","SetChild","prop","StringBuilder","string","Length","Append","AppendLine","AppendFormat","format","_len","args","_key","replace","match","num","Clear","InkListItem","originName","itemName","nameParts","Null","isNull","fullName","otherItem","copy","serialized","JSON","stringify","key","parse","isLikeInkListItem","inkListItem","item","InkList","Map","origins","_originNames","otherList","otherOriginNames","originNames","singleOriginListName","originStory","SetInitialOriginName","listDefinitions","def","TryListGetDefinition","exists","singleElement","Add","Key","Value","myListItem","listValue","_a","FindSingleItemListWithName","AddItem","itemOrItemName","storyObject","origin","intVal","TryGetValueForItem","foundListDef","ContainsItemWithName","newItem","FromString","orderedItems","itemVal","ValueForItem","ContainsItemNamed","fromSerializedKey","ContainsKey","has","serializedKey","set","Remove","delete","Count","size","originOfMaxItem","maxOriginName","maxItem","every","initialOriginName","SetInitialOriginNames","initialOriginNames","max","minItem","inverse","list","items","all","Union","union","Intersect","intersection","HasIntersection","Without","listToRemove","Contains","what","GreaterThan","GreaterThanOrEquals","LessThan","LessThanOrEquals","MaxAsList","MinAsList","ListWithSubRange","minBound","maxBound","ordered","minValue","maxValue","Number","MAX_SAFE_INTEGER","isInteger","subList","otherInkList","sort","x","y","localeCompare","singleItem","sb","valueOf","NaN","StoryException","useEndLineNumber","tryGetValueFromMap","map","val","get","AbstractValue","preferredNumberType","Int","IntValue","Float","isNaN","FloatValue","BoolValue","StringValue","String","DivertTargetValue","ListValue","Create","valueObject","BadCastException","targetType","valueType","isTruthy","Bool","Cast","newType","_isNewline","_isInlineWhitespace","isNewline","isInlineWhitespace","isNonWhitespace","parsedInt","defaultValue","tryParseInt","parsedFloat","parseFloat","tryParseFloat","DivertTarget","targetPath","VariablePointerValue","variableName","contextIndex","_contextIndex","VariablePointer","List","listOrSingleItem","singleValue","oldValue","newValue","oldList","newList","SearchResult","approximate","correctObj","searchResult","_content","namedContent","visitsShouldBeCounted","turnIndexShouldBeCounted","countingAtStartOnly","_pathToFirstLeafContent","namedOnlyContent","namedOnlyContentDict","inkObject","named","existingNamedOnly","AddToNamedContentOnly","countFlags","flags","CountFlags","Visits","Turns","CountStartOnly","flag","pathToFirstLeafContent","internalPathToFirstLeafContent","components","contentObjOrList","contentList","contentObj","TryAddNamedContent","namedContentObj","partialPathStart","partialPathLength","currentContainer","currentObj","comp","foundObj","ContentWithPathComponent","nextContainer","AddContentsOfContainer","otherContainer","component","foundContent","BuildStringOfHierarchy","indentation","pointedObj","appendIndentation","onlyNamed","ControlCommand","commandType","_commandType","CommandType","NotSet","EvalStart","EvalOutput","EvalEnd","Duplicate","PopEvaluatedValue","PopFunction","PopTunnel","BeginString","EndString","NoOp","ChoiceCount","TurnsSince","ReadCount","Random","SeedRandom","VisitIndex","SequenceShuffleIndex","StartThread","Done","End","ListFromInt","ListRange","ListRandom","BeginTag","EndTag","Expression","_prototypeRuntimeConstantExpression","outputWhenComplete","RuntimeContainer","RuntimeControlCommand","GenerateIntoContainer","GenerateConstantIntoContainer","runtimeObj","Void","NativeFunctionCall","functionName","GenerateNativeFunctionsIfNecessary","_nativeFunctions","_name","_isPrototype","_prototype","numberOfParameters","_numberOfParameters","Call","parameters","hasList","CallBinaryListOperation","coercedParams","CoerceValuesToSingleType","coercedType","CallType","parametersOfSingleType","param1","valType","val1","paramCount","_operationFuncs","opForTypeObj","val2","opForType","resultVal","CallListIncrementOperation","v1","v2","op","asBooleanOrThrows","listIntParams","listVal","resultInkList","listItemKey","listItemValue","listItem","intOp","targetInt","itemOrigin","incrementedItem","TryGetItemWithValue","parametersIn","specialCaseList","parametersOut","inkObjectVal","castedValue","t","AddIntBinaryOp","Subtract","Multiply","Divide","floor","Mod","AddIntUnaryOp","Negate","Equal","Greater","Less","NotEquals","Not","And","Or","Max","Min","Pow","pow","Floor","Identity","Ceiling","AddFloatBinaryOp","AddFloatUnaryOp","ceil","AddStringBinaryOp","Has","includes","Hasnt","AddListBinaryOp","AddListUnaryOp","Invert","All","ListMin","ListMax","ValueOfList","divertTargetsEqual","d1","d2","divertTargetsNotEqual","AddOpToNativeFunc","AddOpFuncForType","nativeFunc","NumberExpression","subtype","isInt","isFloat","isBool","numberExpression","UnaryExpression","nativeNameForOp","inner","innerExpression","CallWithName","WithInner","innerNumber","BinaryExpression","left","right","opName","leftExpression","rightExpression","NativeNameForOp","leftUnary","CharacterSet","arg","Set","add","AddRange","start","end","charCodeAt","fromCharCode","AddCharacters","chars","FromRange","CharacterRange","_start","_end","excludes","_correspondingCharSet","_excludes","ToCharacterSet","ii","Define","ChoicePoint","onceOnly","_pathOnChoice","hasCondition","hasStartContent","hasChoiceOnlyContent","isInvisibleDefault","pathOnChoice","choiceTargetObj","choiceTarget","pathStringOnChoice","Pointer","Resolve","Divert","_targetPath","targetObj","targetPointer","_targetPointer","StartOf","targetPathString","hasVariableTarget","variableDivertName","stackPushType","pushesToStack","isExternal","externalArgs","isConditional","otherDivert","targetStr","Function","SymbolType","isNewDeclaration","isGlobal","runtimeChoice","_runtimeChoice","_condition","runtimeContainer","_innerContentContainer","innerContentContainer","startContent","choiceOnlyContent","innerContent","_outerContainer","_returnToR1","_returnToR2","_r1Label","_r2Label","_divertToStartContentOuter","_divertToStartContentInner","_startContentRuntimeContainer","hasWeaveStyleInlineBrackets","varAssign","RuntimeVariableAssignment","RuntimeDivert","varDivert","choiceOnlyRuntimeContent","innerChoiceOnlyContent","indentationDepth","CheckForNamingCollisions","SubFlowAndWeave","StringParserElement","characterIndex","characterInLineIndex","lineIndex","reportedErrorInScope","uniqueId","customFlags","CopyFrom","fromElement","_uniqueIdCounter","SquashFrom","StringParserState","currentElement","_stack","_numElements","errorReportedAlreadyInScope","stackHeight","Push","prevElement","newElement","Pop","expectedRuleId","Peek","PeekPenultimate","Squash","penultimateEl","lastEl","NoteErrorReported","el","ParseSuccess","Symbol","StringParser","ParseRule","hadError","BeginRule","state","FailRule","CancelRule","SucceedRule","stateAtSucceedRule","stateAtBeginRule","RuleDidSucceed","finalResult","Expect","rule","recoveryRule","ParseObject","butSaw","lineRemainder","LineRemainder","ErrorOnLine","ErrorWithParsedObject","lineNumber","errorType","ParseUntilCharactersFromString","SetFlag","trueOrFalse","GetFlag","ruleId","stackHeightBefore","Parse","OneOf","array","OneOrMore","results","Optional","Exclude","OptionalExclude","ParseString","TryAddResultToList","flatten","resultCollection","Interleave","ruleA","ruleB","untilTerminator","firstA","lastMainResult","outerResult","remainingLength","cli","li","success","tempIdx","_chars","ParseSingleCharacter","maxCount","ParseCharactersFromString","ParseUntilCharactersFromCharSet","charSet","ParseCharactersFromCharSet","maxCountOrShouldIncludeStrChars","shouldIncludeChars","startIndex","count","ParseInt","oldIndex","oldCharacterInLineIndex","negative","parsedString","numbersCharacterSet","MIN_SAFE_INTEGER","ParseFloat","leadingInt","afterDecimalPointStr","ParseNewline","strPreProc","PreProcessInputString","inputString","currentCharacter","endOfInput","remainingString","ParseUntil","stopRule","pauseCharacters","endCharacters","pauseAndEnd","values","ruleResultAtPause","partialParsedString","pauseCharacter","CommentEliminator","_commentOrNewlineStartCharacter","_commentBlockEndCharacter","_newlineCharacters","Process","stringList","CommentsAndNewlines","MainInk","newLines","ParseSingleComment","EndOfLineComment","BlockComment","startLineIndex","commentResult","repeat","Conditional","initialCondition","branches","_reJoinTarget","branch","branchContainer","ownExpression","isElse","pathToReJoin","returnDivert","Text","ConstantDeclaration","constantName","constantIdentifier","expression","_expression","assignedExpression","Var","FlowLevel","Gather","_b","baseTargetLevel","baseLevelIsAmbiguous","Story","_baseTargetLevel","firstComponent","numberOfComponents","dotSeparatedComponents","_dotSeparatedComponents","filter","argOne","argTwo","WeavePoint","ResolveFromContext","baseTargetObject","ResolveBaseTarget","ResolveTailComponents","originalContext","firstComp","ancestorContext","deepSearch","foundBase","GetChildFromContext","rootTarget","foundComponent","compName","minimumExpectedLevel","foundFlow","FlowBase","flowLevel","childName","minimumLevel","forceDeepSearch","ambiguousChildLevel","weaveContext","Weave","WeavePointNamed","flowContext","shouldDeepSearch","Knot","ContentWithNameAtLevel","Object","ReturnType","returnedExpression","ClosestFlowBase","iamFlowbase","Identifier","hasParameters","subFlowsByName","_subFlowsByName","isFunction","topLevelObjects","isIncludedStory","_rootWeave","_startingSubFlowDivert","_startingSubFlowRuntime","_firstChildFlow","variableDeclarations","SplitWeaveAndSubFlowContent","contentObjs","isRootStory","weaveObjs","subFlowObjs","subFlow","finalContent","ResolveVariableWithName","varName","fromNode","ownerFlow","isArgument","isTemporary","AddNewVariableDeclaration","varDecl","varab","prevDeclError","ResolveWeavePointNaming","foundReturn","CheckForDisallowedFunctionFlowControl","Stitch","GenerateArgumentVariableAssignments","contentIdx","childFlow","childFlowRuntime","existingChild","errorMsg","ValidateTermination","WarningInTermination","paramName","assign","level","weavePointResult","DeepSearchForAnyLevelContent","weaveResultSelf","deepResult","allDiverts","divert","isFunctionCall","allChoices","Choice","choice","terminatingObject","terminatingDivert","isTunnel","target","PreProcessTopLevelObjects","_","Arg","jj","symbolType","ContentList","objects","dontFlatten","TrimTrailingWhitespace","RegExp","contentObjRuntime","DontFlattenContainer","moreObjects","containerForCount","pathForCount","pathStringForCount","VariableReference","pathIdentifiers","id","runtimeVarRef","_runtimeVarRef","isConstantReference","isListItemReference","constantValue","constants","RuntimeVariableReference","listItemName","listName","ResolveListItem","parsedPath","targetForCount","targetFlow","FunctionCall","proxyDivert","_proxyDivert","runtimeDivert","isChoiceCount","isTurns","isTurnsSince","isRandom","isSeedRandom","isListRange","isListRandom","isReadCount","_divertTargetToCount","_variableReferenceToCount","shouldPopReturnedValue","foundList","ResolveList","usingProxyDivert","divertTarget","variableDivertTarget","CallExistsWithName","nativeCall","msg","RuntimeInkList","strArgs","attemptingTurnCountOfVariableTarget","targetObject","IsBuiltIn","MultipleConditionExpression","subExpressions","conditionExpressions","isFirst","conditionExpr","_runtimeDivert","runtimeDivertTargetValue","_runtimeDivertTargetValue","otherDivTarget","isDone","isEnd","usageContext","badUsage","foundUsage","usageParent","binaryExprParent","funcCall","ConditionalSingleBranch","parentFunc","isEmpty","isThread","ResolveTargetContent","CheckArgumentValidity","requiresArgCodeGen","targetArguments","argToPass","argExpected","varRef","varPointer","Tunnel","PathAsVariableName","variableTargetName","flowBaseScope","resolveResult","argument","find","a","numArgs","butClause","flowArg","divArgExpr","knotCountPath","CheckExternalArgumentValidity","externalName","external","externals","externalArgCount","argumentNames","ownArgCount","returnString","targetWasFound","isBuiltIn","IsExternal","RuntimePath","GatherPointToResolve","targetRuntimeObj","SequenceDivertToResolve","SequenceType","Sequence","elementContentLists","sequenceType","_sequenceDivertsToResolve","once","Once","cycle","Cycle","stopping","Stopping","shuffle","Shuffle","seqBranchCount","sequenceElements","postShuffleNoOp","lastIdx","skipShuffleDivert","AddDivertToResolve","elementCountToShuffle","postSequenceNoOp","elIndex","sequenceDivert","contentContainerForSequenceBranch","seqBranchCompleteDivert","elementContentList","seqElObject","toResolve","TunnelOnwards","_overrideDivertTarget","_divertAfter","divertAfter","returnRuntimeObj","returnRuntimeContainer","evalStart","evalEnd","cmd","returnDivertObj","_items","_itemNameToValues","ContainsItem","ListDefinition","runtimeListDefinition","allItems","e","itemDefinitions","seriesValue","RuntimeListDefinition","variableAssignment","_elementsByName","ItemNamed","initialValues","itemDef","inInitialList","RuntimeInkListItem","currentValue","explicitValue","VariableAssignment","variableIdentifier","isNewTemporaryDeclaration","isGlobalDeclaration","listDefinition","isDeclaration","_ref","isTemporaryNewDeclaration","listDef","_runtimeAssignment","newDeclScope","Temp","variableReference","resolvedVarAssignment","rootContainer","_rootContainer","namedWeavePoints","_namedWeavePoints","lastParsedSignificantObject","lastObject","lastText","IsGlobalDeclaration","lastWeave","cont","indentIndex","previousWeavePoint","addContentToPreviousWeavePoint","hasSeenChoiceInSection","_unnamedGatherCount","_choiceCount","looseEnds","gatherPointsToResolve","w","weavePoint","existingWeavePoint","existingObj","_c","ConstructWeaveHierarchyFromIndentation","weaveIndentIdx","baseIndentIndex","innerWeaveStartIdx","innerWeaveObj","weaveContentCount","weaveContent","weave","DetermineBaseIndentationFromContent","AddRuntimeForWeavePoint","AddRuntimeForNestedWeave","AddGeneralRuntimeContent","PassLooseEndsToAncestors","AddRuntimeForGather","gather","autoEnter","gatherContainer","looseEndWeavePoint","looseEnd","looseWeavePoint","WeavePointHasLooseEnd","closestInnerWeaveAncestor","closestOuterWeaveAncestor","nested","weaveAncestor","received","ReceiveLooseEnd","receivingWeave","childWeaveLooseEnd","varAss","ContentThatFollowsWeavePoint","returned","parentWeave","laterObj","badTerminationHandler","looseEndFlow","ValidateFlowOfObjectsTerminates","BadNestedTerminationHandler","terminatingObj","conditional","toLowerCase","objFlow","defaultObj","terminated","flowObj","d","innerDivert","CheckForWeavePointNamingCollisions","ancestorFlows","flow","weavePointName","otherContentWithName","isNestedWeave","gatherPoint","_ownExpression","_contentContainer","_conditionalDivert","_innerWeave","isTrueBranch","matchingEquality","isInline","startsWith","duplicatesStackValue","needsEval","GenerateRuntimeForContent","CustomFlags","DebugMetadata","endLineNumber","startCharacterNumber","endCharacterNumber","fileName","sourceName","Merge","newDebugMetadata","ExternalDeclaration","AddExternal","FlowDecl","Wrap","_objToWrap","glue","Glue","IncDecExpression","varIdentifier","isIncOrExpression","isInc","varResolveResult","incrementDecrementWord","IncludedFile","includedStory","InfixOperator","precedence","requireWhitespace","parentStory","stitchName","knotWithStitchName","stitch","itemIdentifierList","runtimeRawList","itemIdentifier","ListElementDefinition","parentList","indentifier","ListItem","StatementLevel","baseToString","tagText","threadAtGeneration","sourcePath","tags","originalThreadIndex","Clone","ListDefinitionsOrigin","lists","_lists","_allUnambiguousListValueCache","listOfLists","definition","JsonSerialisation","jArray","skipLast","jTok","JTokenToRuntimeObject","writer","dictionary","WriteObjectStart","WritePropertyStart","WriteRuntimeObject","WritePropertyEnd","WriteObjectEnd","WriteArrayStart","WriteArrayEnd","dict","WriteIntProperty","WriteRuntimeContainer","divTypeKey","WriteProperty","choicePoint","boolVal","WriteBool","WriteInt","floatVal","WriteFloat","strVal","Write","WriteStringStart","WriteStringInner","WriteStringEnd","WriteInkList","divTargetVal","varPtrVal","controlCmd","_controlCommandNames","readCountPath","tag","Tag","WriteChoice","jObject","token","firstChar","propValue","varPtr","isDivert","divPushType","readCountVarRef","isVarAss","isGlobalVar","isNewDecl","listContent","rawList","namesAsObjs","nameToVal","JObjectToChoice","JArrayToContainer","toJson","me","removes","space","k","v","some","r","withoutName","hasNameProperty","hasTerminator","namedContainer","WriteNull","JArrayToRuntimeObjList","namedContentItem","namedSubContainer","jObj","JArrayToTags","WriteChoiceTags","WritePropertyNameStart","WritePropertyNameInner","WritePropertyNameEnd","listDefJson","defsObj","allDefs","nameValueKey","nameValue","TOTAL_VALUES","CallStack","elements","callStack","depth","cs","_threads","callstack","currentElementIndex","currentThread","canPop","_threadCounter","_startOfRoot","storyContext","Reset","toCopy","otherThread","Thread","Element","SetJsonToken","jThreads","jThreadTok","jThreadObj","thread","WriteJson","WriteObject","PushThread","newThread","threadIndex","ForkThread","forkedThread","PopThread","canPopThread","elementIsEvaluateFromGame","FunctionEvaluationFromGame","externalEvaluationStackHeight","outputStreamLengthWithPushed","currentPointer","evaluationStackHeightWhenPushed","functionStartInOutputStream","CanPop","pop","GetTemporaryVariableWithName","varValue","temporaryVariables","SetTemporaryVariable","declareNew","contextElement","RetainListOriginsForAssignment","ContextForVariableNamed","ThreadWithIndex","filtered","callStackTrace","isCurrent","pointer","inExpressionEvaluation","previousPointer","jThreadCallstack","jElTok","currentContainerPathStr","jElementObj","pushPopType","currentContainerPathStrToken","threadPointerResult","temps","JObjectToDictionaryRuntimeObjs","clear","prevContentObjPath","prevPath","PointerAtPath","WriteDictionaryRuntimeObjs","resolvedPointer","VariablesState","variableChangedEvent","callback","variableChangedEventCallbacks","StartVariableObservation","_batchObservingVariableChanges","_changedVariablesForBatchObs","CompleteVariableObservation","changedVars","_globalVariables","patch","changedVariables","patchedVal","TryGetGlobal","NotifyObservers","_callStack","$","varContents","_defaultGlobalVariables","SetGlobal","listDefsOrigin","_listDefsOrigin","Proxy","ApplyPatch","namedVarKey","namedVarValue","globals","jToken","varValKey","varValValue","loadedToken","tokenInkObject","keyValKey","keyValValue","dontSaveDefaultValues","defaultVal","RuntimeObjectsEqual","obj1","obj2","GetVariableWithName","GetRawVariableWithName","ValueAtVariablePointer","TryGetDefaultVariableValue","GlobalVariableExistsWithName","variableValue","Assign","setGlobal","ResolveVariablePointer","existingPointer","SnapshotDefaultGlobals","AddChangedVariable","GetContextIndexOfVariableNamed","doubleRedirectionPointer","ObserveVariableChange","PRNG","seed","next","nextFloat","StatePatch","_globals","_changedVariables","visitCounts","_visitCounts","turnIndices","_turnIndices","TryGetVisitCount","SetVisitCount","SetTurnIndex","TryGetTurnIndex","SimpleJson","Reader","ToDictionary","ToArray","_rootObject","Writer","_currentPropertyName","_currentString","_stateStack","_collectionStack","_propertyNameStack","_jsonObject","StartNewObject","newObject","State","Property","currentCollection","currentPropertyName","propertyName","None","StateElement","innerOrContent","WriteFloatProperty","IncrementChildCount","childCount","PropertyName","_addToCurrentObject","error","POSITIVE_INFINITY","NEGATIVE_INFINITY","currEl","Flow","outputStream","currentChoices","jChoiceThreadsObj","LoadFlowChoiceThreads","WriteListRuntimeObjs","hasChoiceThreads","jChoiceThreads","foundActiveThread","jSavedChoiceThread","StoryState","ToJson","indented","LoadJson","json","TextToDictionary","LoadJsonObj","onDidLoadState","VisitCountAtPathString","pathString","visitCountOut","_patch","VisitCountForContainer","containerPathStr","count2","IncrementVisitCountForContainer","currCount","RecordTurnIndexVisitToContainer","currentTurnIndex","TurnsSinceForContainer","index2","callstackDepth","_currentFlow","canContinue","generatedChoices","currentErrors","_currentErrors","currentWarnings","_currentWarnings","variablesState","_variablesState","evaluationStack","_evaluationStack","_currentTurnIndex","currentPathString","previousPathString","hasError","hasWarning","currentText","_outputStreamTextDirty","inTag","outputObj","textContent","controlCommand","_currentText","CleanOutputWhitespace","currentWhitespaceStart","startOfLine","charAt","currentTags","_outputStreamTagsDirty","_currentTags","txt","currentFlowName","currentFlowIsDefaultFlow","kDefaultFlowName","aliveFlowNames","_aliveFlowNamesDirty","_aliveFlowNames","_namedFlows","flowName","keys","kInkSaveStateVersion","kMinCompatibleLoadVersion","divertedPointer","storySeed","previousRandom","didSafeExit","OutputStreamDirty","timeSeed","Date","getTime","GoToStart","mainContentContainer","SwitchFlow_Internal","SwitchToDefaultFlow_Internal","RemoveFlow_Internal","CopyAndStartPatching","forBackgroundSave","namedFlowKey","namedFlowValue","RestoreAfterPatch","ApplyAnyPatch","ApplyCountChanges","newCount","isVisit","WriteIntDictionary","inkVersionCurrent","jSaveVersion","flowsObj","flowsObjDict","flowsObjDictEntries","entries","namedFlowObjKey","namedFlowObjValue","currFlowName","currentDivertTargetPath","divertPath","JObjectToIntDictionary","ResetErrors","ResetOutput","objs","PushToOutputStream","listText","TrySplittingHeadTailWhitespace","textObj","PushToOutputStreamIndividual","PopFromOutputStream","single","headFirstNewlineIdx","headLastNewlineIdx","tailLastNewlineIdx","tailFirstNewlineIdx","listTexts","innerStrStart","innerStrEnd","leadingSpaces","innerStrText","numSpaces","trailingSpaces","includeInOutput","TrimNewlinesFromOutputStream","functionTrimIndex","glueTrimIndex","o","trimIndex","RemoveExistingGlue","callStackElements","outputStreamEndsInNewline","outputStreamContainsContent","removeWhitespaceFrom","inStringEvaluation","PushEvaluationStack","n","PopEvaluationStack","numberOfObjects","PeekEvaluationStack","ForceEnd","TrimWhitespaceFromFunctionEnd","functionStartPoint","PopCallStack","popType","SetChosenPath","incrementingTurnIndex","newPointer","StartFunctionEvaluationFromGame","funcContainer","PassArgumentsToEvaluationStack","TryExitFunctionEvaluationFromGame","CompleteFunctionEvaluationFromGame","originalEvaluationStackHeight","returnedObj","poppedObj","returnVal","AddError","Stopwatch","startTime","ElapsedMilliseconds","Start","Stop","nVal","isFinite","choices","_state","IfAsyncWeCant","_listDefinitions","StartProfiling","EndProfiling","inkVersionMinimumCompatible","onError","onDidContinue","onMakeChoice","onEvaluateFunction","onCompleteEvaluateFunction","onChoosePathString","_prevContainers","allowExternalFunctionFallbacks","_variableObservers","_hasValidatedExternals","_temporaryEvaluationContainer","_asyncContinueActive","_stateSnapshotAtLastNewline","_sawLookaheadUnsafeFunctionAfterNewline","_recursiveContinueCount","_asyncSaving","_profiler","_mainContentContainer","jsonString","_externals","rootObject","versionObj","formatFromFile","listDefsObj","rootToken","JTokenToListDefinitions","ResetState","shouldReturn","VariableStateDidChangeEvent","bind","ResetGlobals","ResetCallstack","originalPointer","ChoosePath","ContinueInternal","SwitchFlow","RemoveFlow","SwitchToDefaultFlow","Continue","ContinueAsync","asyncContinueComplete","millisecsLimitAsync","ValidateExternalBindings","PreContinue","isAsyncTimeLimited","durationStopwatch","ContinueSingleStep","changedVariablesToObserve","RestoreStateSnapshot","PostContinue","err","PreStep","Step","PostStep","TryFollowDefaultInvisibleChoice","PreSnapshot","change","CalculateNewlineOutputStateChange","OutputStateChange","ExtendedBeyondNewline","NewlineRemoved","DiscardSnapshot","StateSnapshot","PostSnapshot","prevText","currText","prevTagCount","currTagCount","newlineStillExists","NoChange","ContinueMaximally","KnotContainerWithName","pathLengthToUse","CopyStateForBackgroundThreadSave","stateToSave","BackgroundSaveComplete","shouldAddToStream","containerToEnter","VisitContainer","currentContentObj","isLogicOrFlowControl","PerformLogicAndFlowControl","ProcessChoice","contextIdx","NextContent","atStart","VisitChangedContainersDueToDivert","prevAncestor","currentChildOfContainer","currentContainerAncestor","allChildrenEnteredAtStart","enteringAtStart","PopChoiceStringAndTags","choiceOnlyStrVal","showChoice","conditionValue","IsTruthy","startText","choiceOnlyText","divTarget","currentDivert","intContent","errorMessage","CallExternalFunction","evalCommand","output","overrideTunnelReturnTarget","popped","names","expected","contentStackForTag","outputCountConsumed","command","choiceTag","contentStackForString","contentToRetain","rescuedTag","choiceCount","extraNote","eitherCount","maxInt","minInt","randomRange","resultSeed","nextRandom","chosenValue","shuffleIndex","NextSequenceShuffleIndex","listNameVal","generatedListValue","foundItem","targetList","listItemIndex","listEnumerator","randomItem","assignedVal","foundValue","func","funcParams","ChoosePathString","resetCallstack","funcDetail","activityStr","ChooseChoiceIndex","choiceIdx","choiceToChoose","HasFunction","EvaluateFunction","returnTextOutput","trim","outputStreamBefore","stringOutput","textOutput","EvaluateExpression","exprContainer","startCallStackHeight","evalStackHeight","funcName","numberOfArguments","funcDef","fallbackFunctionContainer","foundExternal","lookAheadSafe","valueObj","funcResult","function","returnObj","BindExternalFunctionGeneral","lookaheadSafe","TryCoerce","BindExternalFunction","coercedArgs","apply","UnbindExternalFunction","missingExternals","from","ObserveVariable","observer","ObserveVariables","variableNames","observers","RemoveVariableObserver","specificVariableName","variableObservers","newValueObj","globalTags","TagsAtStartOfFlowContainerWithPathString","TagsForContentAtPath","flowContainer","firstContent","BuildStringOfContainer","IncrementContentPointer","didPop","successfulIncrement","nextAncestor","indexInAncestor","invisibleChoices","numElementsIntVal","seqContainer","numElements","seqCount","loopIndex","iterationIndex","seqPathStr","sequenceHash","randomSeed","random","unpickedIndices","chosen","chosenIndex","currentDebugMetadata","errorTypeStr","lineNum","_hadError","hadWarning","_hadWarning","toplevelObjects","_errorHandler","_dontFlattenContainers","_listDefs","ExportRuntime","constDecl","existingDefinition","variableInitialisation","runtimeLists","runtimeVarAss","runtimeStory","RuntimeStory","FlattenContainersIn","originalFoundList","itemInThisList","innerContainers","innerContainer","namedInnerContainer","TryFlattenContainer","parentContainer","Author","ResetError","namedFuncTarget","decl","NameConflictError","typeNameToPrint","IsReservedKeyword","knotOrFunction","topLevelContent","flowsFromOtherFiles","file","posOfObj","nonFlowContent","subStory","subStoryObj","StringExpression","isSingleString","otherStr","isStart","inChoice","DefaultFileHandler","rootPath","ResolveInkFilename","LoadInkFileContents","InkParser","_fileHandler","filename","externalErrorHandler","rootParser","ParseStory","StatementsAtLevel","Top","_rootParser","SeparatedList","mainRule","separatorRule","firstElement","allElements","nextElementRuleId","nextElement","CreateDebugMetadata","stateAtStart","stateAtEnd","md","_filename","parsedObj","parsedListObjs","parsedListObj","OnStringParserError","fullMessage","_externalErrorHandler","Whitespace","IdentifierWithMetadata","ExtendIdentifierCharacterRanges","identifierCharSet","characterRanges","ListAllCharacterRanges","charRange","_parsingChoice","onceOnlyChoice","bullets","optionalName","BracketedName","Newline","ChoiceCondition","startTextAndLogic","MixedTextAndLogic","optionOnlyContent","EndTagIfNecessary","optionOnlyTextAndLogic","innerTextAndLogic","diverts","MultiDivert","emptyContent","divObj","div","conditions","ChoiceSingleCondition","ChoiceConditionsSpace","condExpr","DisallowIncrement","gatherDashCountObj","GatherDashes","gatherDashCount","ParseDashNotArrow","InnerConditionalContent","initialQueryExpression","ConditionExpression","alternatives","canBeInline","InlineConditionalBranches","MultilineConditionalBranches","soleContent","InnerBlock","elseBranch","SingleMultilineCondition","emptyTrueBranch","earlierBranchesHaveOwnExpression","isLast","alt","finalClause","trueBranch","MultilineWhitespace","multipleConditions","expr","ElseExpression","_nonTextPauseCharacters","_nonTextEndCharacters","_notTextEndCharactersChoice","_notTextEndCharactersString","TrimEndWhitespace","mixedTextAndLogicResults","terminateWithSpace","lastObjIdx","lastObj","LineOfMixedTextAndLogic","firstText","EndOfLine","SkipToNextLine","Spaced","ContentText","InlineLogicOrGlueOrStartTag","ContentTextAllowingEscapeChar","ContentTextNoEscape","gotEscapeChar","endChars","parsingStringExpression","pureTextContent","nonTextRule","ParseDivertArrow","ParseThreadArrow","threadDivert","arrowsAndDiverts","ParseDivertArrowOrTunnelOnwards","DivertIdentifierWithArguments","tunnelOnwards","tunnelOnwardDivert","gatherDivert","targetComponents","DotSeparatedDivertPathComponents","optionalArguments","ExpressionFunctionCallArguments","SingleDivert","numArrows","_binaryOperators","_maxBinaryOpLength","TempDeclarationOrAssignment","ParseTempKeyword","isIncrement","isDecrement","ReturnStatement","minimumPrecedence","ExpressionUnary","infixOp","ParseInfixOperator","expectationMessage","multiaryExpr","ExpressionInfixRight","ExpressionDivertTarget","prefixOp","ExpressionNot","ExpressionList","ExpressionParen","ExpressionFunctionCall","ExpressionVariableName","ExpressionLiteral","postfixOp","ExpressionFloat","ExpressionInt","ExpressionBool","ExpressionString","intOrNull","floatOrNull","textAndLogic","iden","commas","innerExpr","memberNames","ListMember","identifier2","RegisterExpressionOperators","RegisterBinaryOperator","infix","_openFilenames","IncludeStatement","fullFilename","FilenameIsAlreadyOpen","AddOpenFilename","includedString","RemoveOpenFilename","KnotDefinition","knotDecl","KnotDeclaration","innerKnotStatements","KnotStitchNoContentRecoveryRule","KnotTitleEquals","knotName","isFunc","parameterNames","BracketedKnotDeclArguments","multiEquals","StitchDefinition","StitchDeclaration","innerStitchStatements","flowArgs","flowArguments","FlowDeclArgument","firstIden","divertArrow","secondIden","funcIdentifier","argNames","_identifierCharSet","LogicLine","afterTilde","funCall","VariableDeclaration","ListElementDefinitionSeparator","ListDeclaration","AnyWhitespace","needsToCloseParen","elementValue","elementValueNum","ConstDeclaration","InlineLogic","StartTag","RuntimeGlue","wasParsingString","wasTagActive","tagActive","logic","InnerLogic","explicitSeqType","SequenceTypeAnnotation","contentLists","InnerSequenceObjects","rules","InnerSequence","InnerExpression","isNumberCharsOnly","_sequenceTypeSymbols","seqType","parsedSeqType","annotation","SequenceTypeSymbolAnnotation","SequenceTypeWordAnnotation","sequenceAnnotations","symbolChar","sequenceTypes","SequenceTypeSingleWord","combinedSequenceType","word","InnerMultilineSequenceObjects","InnerInlineSequenceObjects","interleavedContentAndPipes","justHadContent","contentOrPipe","SingleMultilineSequenceElement","_statementRulesAtLevel","_statementBreakRulesAtLevel","StatementAtLevel","StatementsBreakForLevel","rulesAtLevel","statement","breakRules","breakRuleResult","GenerateStatementLevelRules","levels","breakingRules","Line","inlineRule","_inlineWhitespaceChars","EndOfFile","newlines","anyWhitespace","MultiSpaced","fullRootInkPath","ParsingString","TagActive","outputContentList","LatinBasic","LatinExtendedA","LatinExtendedB","Greek","Cyrillic","Armenian","Hebrew","Arabic","Korean","Latin1Supplement","Chinese","JsonFileHandler","fileHierarchy","Compiler","errors","_errors","warnings","_warnings","authorMessages","_authorMessages","_inputString","options","_options","parsedStory","_parsedStory","_runtimeStory","parser","_parser","debugSourceRanges","_debugSourceRanges","inkSource","Compile","OnError","RetrieveDebugSourceForLatestContent","range","GenerateStats","allText","words","wordsInThisStr","wasWhiteSpace","knots","stitches","gathers","g","functions","GenerateStoryStats","DebugMetadataForContentAtOffset","offset","currOffset","lastValidMetadata"],"mappings":"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"}